{"version":3,"file":"CRectangle.js","sourceRoot":"","sources":["../../../../../../../../../../../TanhX/online/browser/src/layer/vector/CRectangle.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-strict-ignore\n/* -*- js-indent-level: 8 -*- */\n\n/*\n * CRectangle extends CPolygon and creates a rectangle of given bounds.\n */\n\nclass CRectangle extends CPolygon {\n\n\tconstructor(bounds: cool.Bounds, options: any) {\n\t\tsuper(CRectangle.boundsToPointSet(bounds), options);\n\t}\n\n\tsetBounds(bounds: cool.Bounds) {\n\t\tthis.setPointSet(CRectangle.boundsToPointSet(bounds));\n\t}\n\n\tpublic static boundsToPointSet(bounds: cool.Bounds): CPointSet {\n\t\tif (!bounds.isValid()) {\n\t\t\treturn new CPointSet();\n\t\t}\n\t\treturn CPointSet.fromPointArray([bounds.getTopLeft(), bounds.getTopRight(), bounds.getBottomRight(), bounds.getBottomLeft(), bounds.getTopLeft()]);\n\t}\n}\n\nfunction getOptionsClone(baseOpts: any): any {\n\t// TODO: implement polyfill for Object.assign() instead.\n\tconst newOpt: any = {};\n\tfor (const prop in baseOpts) {\n\t\tif (Object.prototype.hasOwnProperty.call(baseOpts, prop)) {\n\t\t\tnewOpt[prop] = baseOpts[prop];\n\t\t}\n\t}\n\n\treturn newOpt;\n}\n\n// CCellSelection is used for drawing of the self and view cell-range selections on the canvas.\nclass CCellSelection extends CPathGroup {\n\n\tprivate selectionWeight: number = 2;\n\tprivate borderPaths: CPolygon[];\n\tprivate innerContrastBorder: CPolygon;\n\tprivate options: any;\n\n\tconstructor(pointSet: CPointSet, options: any) {\n\t\tsuper([]);\n\t\tthis.selectionWeight = Math.round(options.weight);\n\t\toptions.weight = 1; // Selection has multiple paths each with weight 1.\n\t\tthis.options = options;\n\t\tthis.options.lineJoin = 'miter';\n\t\tthis.options.lineCap = 'butt';\n\t\tthis.options.viewId = CPath.getViewId(options);\n\t\tthis.options.groupType = PathGroupType.CellSelection;\n\n\t\tthis.setPointSet(pointSet);\n\t}\n\n\t// This method is used to create/update the internal CPaths with the correct positions and dimensions\n\t// using CPointSet data-structure.\n\tsetPointSet(pointSet: CPointSet) {\n\t\tconst outerPointSet = pointSet;\n\t\touterPointSet.applyOffset(new cool.Point(0.5, 0.5), false /* centroidSymmetry */, true /* preRound */);\n\n\t\tconst borderPointSets: CPointSet[] = [];\n\n\t\tfor (let idx = 0; idx < this.selectionWeight; ++idx) {\n\t\t\tconst pixels = idx; // device pixels from real cell-border.\n\t\t\tconst borderPset = outerPointSet.clone();\n\t\t\tborderPset.applyOffset(new cool.Point(-pixels, -pixels), true /* centroidSymmetry */, false /* preRound */);\n\t\t\tborderPointSets.push(borderPset);\n\t\t}\n\t\tconst contrastBorderPointSet = outerPointSet.clone();\n\t\tcontrastBorderPointSet.applyOffset(new cool.Point(-this.selectionWeight, -this.selectionWeight), true /* centroidSymmetry */, false /* preRound */);\n\n\t\tif (this.borderPaths && this.innerContrastBorder) {\n\t\t\tconsole.assert(this.borderPaths.length === this.selectionWeight);\n\t\t\t// Update the border path.\n\t\t\tthis.borderPaths.forEach(function (borderPath, index) {\n\t\t\t\tborderPath.setPointSet(borderPointSets[index]);\n\t\t\t});\n\t\t\tthis.innerContrastBorder.setPointSet(contrastBorderPointSet);\n\n\t\t} else {\n\t\t\tthis.borderPaths = [];\n\t\t\tfor (let index = 0; index < this.selectionWeight; ++index) {\n\t\t\t\tconst borderOpt = getOptionsClone(this.options);\n\t\t\t\tborderOpt.fillColor = undefined;\n\t\t\t\tborderOpt.fillOpacity = undefined;\n\t\t\t\tborderOpt.fill = false;\n\t\t\t\tborderOpt.name += '-border-' + index;\n\t\t\t\tconst borderPath = new CPolygon(borderPointSets[index], borderOpt);\n\t\t\t\tthis.borderPaths.push(borderPath);\n\t\t\t\tthis.push(borderPath);\n\t\t\t}\n\n\t\t\tconst contrastBorderOpt = getOptionsClone(this.options);\n\t\t\tcontrastBorderOpt.name += '-contrast-border';\n\t\t\tcontrastBorderOpt.color = 'white';\n\t\t\tcontrastBorderOpt.fill = true;\n\t\t\tthis.innerContrastBorder = new CPolygon(contrastBorderPointSet, contrastBorderOpt);\n\t\t\tthis.push(this.innerContrastBorder);\n\t\t}\n\t}\n\n\tgetBounds(): cool.Bounds {\n\t\tif (!this.borderPaths || !this.borderPaths.length)\n\t\t\treturn new cool.Bounds(undefined);\n\t\treturn this.borderPaths[0].getBounds();\n\t}\n\n\tanyRingBoundContains(corePxPoint: cool.Point): boolean {\n\t\tif (!this.borderPaths || !this.borderPaths.length)\n\t\t\treturn false;\n\n\t\treturn this.borderPaths[0].anyRingBoundContains(corePxPoint);\n\t}\n}"]}