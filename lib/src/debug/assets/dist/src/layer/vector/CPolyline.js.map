{"version":3,"file":"CPolyline.js","sourceRoot":"","sources":["../../../../../../../../../../../TanhX/online/browser/src/layer/vector/CPolyline.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-strict-ignore\n/* -*- js-indent-level: 8 -*- */\n\n/*\n * CPolyline implements polyline vector layer (a set of points connected with lines).\n * This class implements basic line drawing and CPointSet datastructure which is to be used\n * by the subclass CPolygon for drawing of overlays like cell-selections, cell-cursors etc.\n */\n\nclass CPolyline extends CPath {\n\n\t// how much to simplify the polyline on each zoom level\n\t// more = better performance and smoother look, less = more accurate\n\tprivate smoothFactor: number = 1.0;\n\tprotected noClip: boolean = false;\n\tprivate pointSet: CPointSet;\n\tprivate bounds: cool.Bounds;\n\tprotected rings: Array<Array<cool.Point>>;\n\tprotected parts: Array<Array<cool.Point>>;\n\n\tconstructor(pointSet: CPointSet, options: any) {\n\t\tsuper(options);\n\t\tthis.smoothFactor = options.smoothFactor !== undefined ? options.smoothFactor : this.smoothFactor;\n\t\tthis.setPointSet(pointSet);\n\t}\n\n\tgetPointSet(): CPointSet {\n\t\treturn this.pointSet;\n\t}\n\n\tsetPointSet(pointSet: CPointSet) {\n\t\tvar oldBounds: cool.Bounds;\n\t\tif (this.bounds)\n\t\t\toldBounds = this.bounds.clone();\n\t\telse\n\t\t\toldBounds = new cool.Bounds(undefined);\n\n\t\tthis.pointSet = pointSet;\n\t\tthis.updateRingsBounds();\n\n\t\tif (this.renderer)\n\t\t\tthis.renderer.setPenOnOverlay();\n\n\t\treturn this.redraw(oldBounds);\n\t}\n\n\tupdateRingsBounds() {\n\t\tthis.rings = new Array<Array<cool.Point>>();\n\t\tvar bounds = this.bounds = new cool.Bounds(undefined);\n\n\t\tif (this.pointSet.empty()) {\n\t\t\treturn;\n\t\t}\n\n\t\tCPolyline.calcRingsBounds(this.pointSet, this.rings, (pt: cool.Point) => {\n\t\t\tbounds.extend(pt);\n\t\t});\n\t}\n\n\t// Converts the point-set datastructure into an array of point-arrays each of which is called a 'ring'.\n\t// While doing that it also computes the bounds too.\n\tprivate static calcRingsBounds(pset: CPointSet, rings: Array<Array<cool.Point>>, updateBounds: (pt: cool.Point) => void) {\n\t\tif (pset.isFlat()) {\n\t\t\tvar srcArray = pset.getPointArray();\n\t\t\tif (srcArray === undefined) {\n\t\t\t\trings.push([]);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar array = Array<cool.Point>(srcArray.length);\n\t\t\tsrcArray.forEach((pt: cool.Point, index: number) => {\n\t\t\t\tarray[index] = pt.clone();\n\t\t\t\tupdateBounds(pt);\n\t\t\t});\n\n\t\t\trings.push(array);\n\t\t\treturn;\n\t\t}\n\n\t\tvar psetArray = pset.getSetArray();\n\t\tif (psetArray) {\n\t\t\tpsetArray.forEach((psetNext: CPointSet) => {\n\t\t\t\tCPolyline.calcRingsBounds(psetNext, rings, updateBounds);\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate static getPoints(pset: CPointSet): Array<cool.Point> {\n\t\tif (pset.isFlat()) {\n\t\t\tvar parray = pset.getPointArray();\n\t\t\treturn parray === undefined ? [] : parray;\n\t\t}\n\n\t\tvar psetArray = pset.getSetArray();\n\t\tif (psetArray && psetArray.length) {\n\t\t\treturn CPolyline.getPoints(psetArray[0]);\n\t\t}\n\n\t\treturn [];\n\t}\n\n\tgetCenter(): cool.Point {\n\t\tvar i: number;\n\t\tvar halfDist: number;\n\t\tvar segDist: number;\n\t\tvar dist: number;\n\t\tvar p1: cool.Point;\n\t\tvar p2: cool.Point;\n\t\tvar ratio: number;\n\t\tvar points = CPolyline.getPoints(this.pointSet);\n\t\tvar len = points.length;\n\n\t\t// polyline centroid algorithm; only uses the first ring if there are multiple\n\n\t\tfor (i = 0, halfDist = 0; i < len - 1; i++) {\n\t\t\thalfDist += points[i].distanceTo(points[i + 1]) / 2;\n\t\t}\n\n\t\tfor (i = 0, dist = 0; i < len - 1; i++) {\n\t\t\tp1 = points[i];\n\t\t\tp2 = points[i + 1];\n\t\t\tsegDist = p1.distanceTo(p2);\n\t\t\tdist += segDist;\n\n\t\t\tif (dist > halfDist) {\n\t\t\t\tratio = (dist - halfDist) / segDist;\n\t\t\t\treturn new cool.Point(\n\t\t\t\t\tp2.x - ratio * (p2.x - p1.x),\n\t\t\t\t\tp2.y - ratio * (p2.y - p1.y)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tgetBounds(): cool.Bounds {\n\t\treturn this.bounds;\n\t}\n\n\tgetHitBounds(): cool.Bounds {\n\t\tif (!this.bounds.isValid())\n\t\t\treturn this.bounds;\n\n\t\t// add clicktolerance for hit detection/etc.\n\t\tvar w = this.clickTolerance();\n\t\tvar p = new cool.Point(w, w);\n\t\treturn new cool.Bounds(this.bounds.getTopLeft().subtract(p), this.bounds.getBottomRight().add(p));\n\t}\n\n\tupdatePath(paintArea?: cool.Bounds, paneBounds?: cool.Bounds, freezePane?: { freezeX: boolean, freezeY: boolean }) {\n\t\tthis.clipPoints(paintArea);\n\t\tthis.simplifyPoints();\n\n\t\tthis.renderer.updatePoly(this, false /* closed? */, paintArea, paneBounds, freezePane);\n\t}\n\n\t// clip polyline by renderer bounds so that we have less to render for performance\n\tclipPoints(paintArea?: cool.Bounds) {\n\t\tif (this.noClip) {\n\t\t\tthis.parts = this.rings;\n\t\t\treturn;\n\t\t}\n\n\t\tthis.parts = new Array<Array<cool.Point>>();\n\n\t\tvar parts = this.parts;\n\t\tvar bounds = paintArea ? paintArea : this.renderer.getBounds();\n\t\tvar i: number;\n\t\tvar j: number;\n\t\tvar k: number;\n\t\tvar len: number;\n\t\tvar len2: number;\n\t\tvar segment: Array<cool.Point>;\n\t\tvar points: Array<cool.Point>;\n\n\t\tfor (i = 0, k = 0, len = this.rings.length; i < len; i++) {\n\t\t\tpoints = this.rings[i];\n\n\t\t\tfor (j = 0, len2 = points.length; j < len2 - 1; j++) {\n\t\t\t\tsegment = CLineUtil.clipSegment(points[j], points[j + 1], bounds, j != 0, true);\n\n\t\t\t\tif (!segment.length) { continue; }\n\n\t\t\t\tparts[k] = parts[k] || [];\n\t\t\t\tparts[k].push(segment[0]);\n\n\t\t\t\t// if segment goes out of screen, or it's the last one, it's the end of the line part\n\t\t\t\tif ((segment[1] !== points[j + 1]) || (j === len2 - 2)) {\n\t\t\t\t\tparts[k].push(segment[1]);\n\t\t\t\t\tk++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// simplify each clipped part of the polyline for performance\n\tsimplifyPoints() {\n\t\tvar parts = this.parts;\n\t\tvar tolerance = this.smoothFactor;\n\n\t\tfor (var i: number = 0, len = parts.length; i < len; i++) {\n\t\t\tparts[i] = CLineUtil.simplify(parts[i], tolerance);\n\t\t}\n\t}\n\n\tgetParts(): Array<Array<cool.Point>> {\n\t\treturn this.parts;\n\t}\n\n\tempty(): boolean {\n\t\treturn this.pointSet.empty();\n\t}\n}\n"]}