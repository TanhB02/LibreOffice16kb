{"version":3,"file":"SheetGeometry.js","sourceRoot":"","sources":["../../../../../../../../../../../TanhX/online/browser/src/layer/tile/SheetGeometry.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-strict-ignore\n/* -*- js-indent-level: 8 -*- */\n\n/*\n * Copyright the Collabora Online contributors.\n *\n * SPDX-License-Identifier: MPL-2.0\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\ndeclare var L: any;\n\nnamespace cool {\n\nexport type GeometryUnit = 'corepixels' | 'tiletwips' | 'printtwips';\n\nexport interface DimensionRange {\n\tstart: number;\n\tend: number;\n}\n\nexport interface CellRange {\n\tcolumnrange: DimensionRange;\n\trowrange: DimensionRange;\n}\n\nexport interface DimensionPosSize {\n\tstartpos: number;\n\tsize: number;\n}\n\nexport interface DimensionStartEndPos {\n\tstartpos: number;\n\tendpos: number;\n}\n\nexport interface IndexAndSpan {\n\tindex: number;\n\tspan: SpanData;\n}\n\nexport interface SheetGeometryCoreData {\n\tcommandName: string;\n\tmaxtiledcolumn: string;\n\tmaxtiledrow: string;\n\tcolumns: SheetDimensionCoreData;\n\trows: SheetDimensionCoreData;\n}\n\nexport interface SheetDimensionCoreData {\n\tsizes: string;\n\thidden: string;\n\tfiltered: string;\n\tgroups: string;\n}\n\n/**\n * Used to parse and store the .unoSheetGeometry data that allows fast lookups between\n * different units. See @GeometryUnit\n */\nexport class SheetGeometry {\n\t/** sheetGeomJSON is expected to be the parsed JSON message from core\n\t * in response to client command '.uno:SheetGeometryData' with\n\t * all flags (ie 'columns', 'rows', 'sizes', 'hidden', 'filtered',\n\t * 'groups') enabled.\n\t */\n\tprivate _part: number;\n\tprivate _columns: SheetDimension;\n\tprivate _rows: SheetDimension;\n\tprivate _unoCommand: string;\n\tpublic maxVisibleColumnIndex: number;\n\tpublic maxVisibleRowIndex: number;\n\n\tconstructor(sheetGeomJSON: SheetGeometryCoreData, tileWidthTwips: number, tileHeightTwips: number,\n\t\ttileSizePixels: number, part: number) {\n\n\t\t// Remove the unnecessary checks only after SheetGeometry client code has moved to TS.\n\t\tif (typeof sheetGeomJSON !== 'object' ||\n\t\t\ttypeof tileWidthTwips !== 'number' ||\n\t\t\ttypeof tileHeightTwips !== 'number' ||\n\t\t\ttypeof tileSizePixels !== 'number' ||\n\t\t\ttypeof part !== 'number') {\n\t\t\tconsole.error('Incorrect constructor argument types or missing required arguments');\n\t\t\treturn;\n\t\t}\n\n\t\tthis._part = -1;\n\t\tthis._columns = new SheetDimension();\n\t\tthis._rows = new SheetDimension();\n\t\tthis._unoCommand = '.uno:SheetGeometryData';\n\n\t\t// Set various unit conversion info early on because on update() call below, these info are needed.\n\t\tthis.setTileGeometryData(tileWidthTwips, tileHeightTwips, tileSizePixels,\n\t\t\tfalse /* update position info ?*/);\n\n\t\tthis.update(sheetGeomJSON, /* checkCompleteness */ true, part);\n\t}\n\n\tprivate checkMaxIndex(sheetGeomJSON: SheetGeometryCoreData, column: boolean): number {\n\t\t/*\n\t\t\tAbout \"hidden\" variable format:\n\t\t\t* This information is sent from the core side.\n\t\t\t* Represents the hidden rows / columns.\n\t\t\t* Works with \"true - false - true - false\" pattern.\n\t\t\t\t* Like: 5 8 10 20... -> Means that visible up  to 5 (including), hidden up to 8 (including), visible up to 10 (including), hidden up to 20 (including)...\n\t\t\t* But now, above format assumes the first row / column is visible.\n\t\t\t* To determine if the data starts with true or false, the first value in data is formatted differently.\n\t\t\t\t* If first is visible: 0:0 5 8 10 20... -> Means that visible up to 1 (index 0), hidden up to 5 (including 5), visible up to 8 (including), hidden up to 10 (including)...\n\t\t\t\t* If first is hidden: 1:0 5 8 10 20... -> Means that hidden up to 0, visible up to 5, hidden up to 8, visible up to 10...\n\t\t*/\n\n\t\t// We will check one special case here: Only a few rows/columns are visible on top, others are hidden all the way to the bottom/right.\n\t\tconst hiddenInfo = column ? sheetGeomJSON.columns.hidden.trim() : sheetGeomJSON.rows.hidden.trim();\n\n\t\tconst isFirstHidden = hiddenInfo.indexOf('1') === 0;\n\t\tconst splitted = hiddenInfo.split(' ');\n\t\tconst isLastHidden = (splitted.length % 2 === 0 && !isFirstHidden) || (splitted.length % 2 === 1 && isFirstHidden);\n\n\t\tif (splitted.length === 1) {\n\t\t\tif (isFirstHidden) return 0; // All hidden.\n\t\t\telse return parseInt(splitted[0].split(':')[1]); // All visible.\n\t\t}\n\t\telse if (!isLastHidden) { // Last rows / columns are visible.\n\t\t\treturn parseInt(splitted[splitted.length - 1]);\n\t\t}\n\n\t\t/*\n\t\t\tLast rows / columns are hidden (below else if case):\n\t\t\t\t* We need the index from the item that comes right before the last one. Becase we want last visible index.\n\t\t\t\t* There are only 2 items, so we need the first item (index 0).\n\t\t\t\t* First item is written in a different format (0:1->hiddenOrNot:LastIndex).\n\t\t\t\t* We need to split the first item to get the last index (second item is hidden, we ignore that).\n\t\t*/\n\t\telse if (splitted.length === 2) {\n\t\t\treturn parseInt(splitted[0].split(':')[1]);\n\t\t}\n\t\telse { // Last rows / columns are hidden and there are more than 2 items.\n\t\t\treturn parseInt(splitted[splitted.length - 2]);\n\t\t}\n\t}\n\n\tpublic update(sheetGeomJSON: SheetGeometryCoreData, checkCompleteness: boolean, part: number): boolean {\n\t\tif (!this._testValidity(sheetGeomJSON, checkCompleteness)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tvar updateOK = true;\n\t\tif (sheetGeomJSON.columns) {\n\t\t\tif (!this._columns.update(sheetGeomJSON.columns)) {\n\t\t\t\tconsole.error(this._unoCommand + ': columns update failed.');\n\t\t\t\tupdateOK = false;\n\t\t\t}\n\n\t\t\tif (sheetGeomJSON.columns.hidden)\n\t\t\t\tthis.maxVisibleColumnIndex = this.checkMaxIndex(sheetGeomJSON, true);\n\t\t\telse\n\t\t\t\tthis.maxVisibleColumnIndex = parseInt(sheetGeomJSON.maxtiledcolumn);\n\t\t}\n\n\t\tif (sheetGeomJSON.rows) {\n\t\t\tif (!this._rows.update(sheetGeomJSON.rows)) {\n\t\t\t\tconsole.error(this._unoCommand + ': rows update failed.');\n\t\t\t\tupdateOK = false;\n\t\t\t}\n\n\t\t\tif (sheetGeomJSON.rows.hidden)\n\t\t\t\tthis.maxVisibleRowIndex = this.checkMaxIndex(sheetGeomJSON, false);\n\t\t\telse\n\t\t\t\tthis.maxVisibleRowIndex = parseInt(sheetGeomJSON.maxtiledrow);\n\t\t}\n\n\t\tif (updateOK) {\n\t\t\tconsole.assert(typeof part === 'number', 'part must be a number');\n\t\t\tif (part !== this._part) {\n\t\t\t\tthis._part = part;\n\t\t\t}\n\t\t}\n\n\t\tthis._columns.setMaxIndex(+sheetGeomJSON.maxtiledcolumn);\n\t\tthis._rows.setMaxIndex(+sheetGeomJSON.maxtiledrow);\n\n\t\treturn updateOK;\n\t}\n\n\tpublic setTileGeometryData(tileWidthTwips: number, tileHeightTwips: number, tileSizePixels: number,\n\t\tupdatePositions: boolean): void {\n\t\tthis._columns.setTileGeometryData(tileWidthTwips, tileSizePixels, updatePositions);\n\t\tthis._rows.setTileGeometryData(tileHeightTwips, tileSizePixels, updatePositions);\n\n\t\tif (app.map) app.map.fire('sheetgeometrychanged');\n\t}\n\n\tpublic setViewArea(topLeftTwipsPoint: Point, sizeTwips: Point): boolean {\n\n\t\tif (!(topLeftTwipsPoint instanceof L.Point) || !(sizeTwips instanceof L.Point)) {\n\t\t\tconsole.error('invalid argument types');\n\t\t\treturn false;\n\t\t}\n\n\t\tvar left = topLeftTwipsPoint.x;\n\t\tvar top = topLeftTwipsPoint.y;\n\t\tvar right = left + sizeTwips.x;\n\t\tvar bottom = top + sizeTwips.y;\n\n\t\tthis._columns.setViewLimits(left, right);\n\t\tthis._rows.setViewLimits(top, bottom);\n\n\t\treturn true;\n\t}\n\n\tpublic getPart(): number {\n\t\treturn this._part;\n\t}\n\n\tpublic getColumnsGeometry(): SheetDimension {\n\t\treturn this._columns;\n\t}\n\n\tpublic getRowsGeometry(): SheetDimension {\n\t\treturn this._rows;\n\t}\n\n\t// returns an object with keys 'start' and 'end' indicating the\n\t// column range in the current view area.\n\tpublic getViewColumnRange(): DimensionRange {\n\t\treturn this._columns.getViewElementRange();\n\t}\n\n\t// returns an object with keys 'start' and 'end' indicating the\n\t// row range in the current view area.\n\tpublic getViewRowRange(): DimensionRange {\n\t\treturn this._rows.getViewElementRange();\n\t}\n\n\tpublic getViewCellRange(): CellRange {\n\t\treturn {\n\t\t\tcolumnrange: this.getViewColumnRange(),\n\t\t\trowrange: this.getViewRowRange()\n\t\t};\n\t}\n\n\t// Returns an object with the following fields:\n\t// rowIndex should be zero based.\n\t// 'startpos' (start position of the row in core pixels), 'size' (row size in core pixels).\n\t// Note: All these fields are computed by assuming zero sizes for hidden/filtered rows.\n\tpublic getRowData(rowIndex: number): DimensionPosSize {\n\t\treturn this._rows.getElementData(rowIndex);\n\t}\n\n\tpublic getColumnGroupLevels(): number {\n\t\treturn this._columns.getGroupLevels();\n\t}\n\n\tpublic getRowGroupLevels(): number {\n\t\treturn this._rows.getGroupLevels();\n\t}\n\n\tpublic getColumnGroupsDataInView(): GroupData[] {\n\t\treturn this._columns.getGroupsDataInView();\n\t}\n\n\tpublic getRowGroupsDataInView(): GroupData[] {\n\t\treturn this._rows.getGroupsDataInView();\n\t}\n\n\t// accepts a point in display twips coordinates at current zoom\n\t// and returns the equivalent point in display-twips at the given zoom.\n\tpublic getTileTwipsAtZoom(point: Point, zoomScale: number): Point {\n\t\tif (!(point instanceof L.Point)) {\n\t\t\tconsole.error('Bad argument type, expected L.Point');\n\t\t\treturn point;\n\t\t}\n\n\t\treturn new L.Point(this._columns.getTileTwipsAtZoom(point.x, zoomScale),\n\t\t\tthis._rows.getTileTwipsAtZoom(point.y, zoomScale));\n\t}\n\n\t// accepts a point in core-pixel coordinates at current zoom\n\t// and returns the equivalent point in core-pixels at the given zoomScale.\n\tpublic getCorePixelsAtZoom(point: Point, zoomScale: number): Point {\n\t\tif (!(point instanceof L.Point)) {\n\t\t\tconsole.error('Bad argument type, expected L.Point');\n\t\t\treturn point;\n\t\t}\n\n\t\treturn new L.Point(this._columns.getCorePixelsAtZoom(point.x, zoomScale),\n\t\t\tthis._rows.getCorePixelsAtZoom(point.y, zoomScale));\n\t}\n\n\t// accepts a point in core-pixel coordinates at *given* zoomScale\n\t// and returns the equivalent point in core-pixels at the current zoom.\n\tpublic getCorePixelsFromZoom(point: Point, zoomScale: number): Point {\n\t\tif (!(point instanceof L.Point)) {\n\t\t\tconsole.error('Bad argument type, expected L.Point');\n\t\t\treturn point;\n\t\t}\n\n\t\treturn new L.Point(this._columns.getCorePixelsFromZoom(point.x, zoomScale),\n\t\t\tthis._rows.getCorePixelsFromZoom(point.y, zoomScale));\n\t}\n\n\t// accepts a point in print twips coordinates and returns the equivalent point\n\t// in tile-twips.\n\tpublic getTileTwipsPointFromPrint(point: Point): Point {\n\t\tif (!(point instanceof L.Point)) {\n\t\t\tconsole.error('Bad argument type, expected L.Point');\n\t\t\treturn point;\n\t\t}\n\n\t\treturn new L.Point(this._columns.getTileTwipsPosFromPrint(point.x),\n\t\t\tthis._rows.getTileTwipsPosFromPrint(point.y));\n\t}\n\n\tpublic convertToTileTwips(simplePoint: cool.SimplePoint): void {\n\t\tsimplePoint.x = this._columns.getTileTwipsPosFromPrint(simplePoint.x);\n\t\tsimplePoint.y = this._rows.getTileTwipsPosFromPrint(simplePoint.y);\n\t}\n\n\tpublic convertRectangleToTileTwips(simpleRectangle: cool.SimpleRectangle): void {\n\t\tsimpleRectangle.x1 = this._columns.getTileTwipsPosFromPrint(simpleRectangle.x1);\n\t\tsimpleRectangle.y1 = this._rows.getTileTwipsPosFromPrint(simpleRectangle.y1);\n\t}\n\n\t// accepts a point in tile-twips coordinates and returns the equivalent point\n\t// in print-twips.\n\tpublic getPrintTwipsPointFromTile(point: Point): Point {\n\t\tif (!(point instanceof L.Point)) {\n\t\t\tconsole.warn('Bad argument type, expected L.Point');\n\t\t}\n\n\t\treturn new L.Point(this._columns.getPrintTwipsPosFromTile(point.x),\n\t\t\tthis._rows.getPrintTwipsPosFromTile(point.y));\n\t}\n\n\t// accepts a rectangle in print twips coordinates and returns the equivalent rectangle\n\t// in tile-twips aligned to the cells.\n\tpublic getTileTwipsSheetAreaFromPrint(rectangle: Bounds): Bounds {\n\t\tif (!(rectangle instanceof L.Bounds)) {\n\t\t\tconsole.error('Bad argument type, expected L.Bounds');\n\t\t\treturn rectangle;\n\t\t}\n\n\t\tvar topLeft = rectangle.getTopLeft();\n\t\tvar bottomRight = rectangle.getBottomRight();\n\n\t\tvar horizBounds = this._columns.getTileTwipsRangeFromPrint(topLeft.x, bottomRight.x);\n\t\tvar vertBounds = this._rows.getTileTwipsRangeFromPrint(topLeft.y, bottomRight.y);\n\n\t\ttopLeft = new L.Point(horizBounds.startpos, vertBounds.startpos);\n\t\tbottomRight = new L.Point(horizBounds.endpos, vertBounds.endpos);\n\n\t\treturn new L.Bounds(topLeft, bottomRight);\n\t}\n\n\t// Returns full sheet size as L.Point in the given unit.\n\t// unit must be one of 'corepixels', 'tiletwips', 'printtwips'\n\tpublic getSize(unit: GeometryUnit): Point {\n\t\treturn new L.Point(this._columns.getSize(unit),\n\t\t\tthis._rows.getSize(unit));\n\t}\n\n\t// Returns the core pixel position/size of the requested cell at a specified zoom.\n\tpublic getCellRect(columnIndex: number, rowIndex: number, zoomScale: number): Bounds {\n\t\tvar horizPosSize = this._columns.getElementData(columnIndex, zoomScale);\n\t\tvar vertPosSize = this._rows.getElementData(rowIndex, zoomScale);\n\n\t\tvar topLeft = new L.Point(horizPosSize.startpos, vertPosSize.startpos);\n\t\tvar size = new L.Point(horizPosSize.size, vertPosSize.size);\n\n\t\treturn new L.Bounds(topLeft, topLeft.add(size));\n\t}\n\n\tpublic getCellFromPos(pos: Point, unit: GeometryUnit): Point {\n\t\tconsole.assert(pos instanceof L.Point);\n\t\treturn new L.Point(\n\t\t\tthis._columns.getIndexFromPos(pos.x, unit),\n\t\t\tthis._rows.getIndexFromPos(pos.y, unit)\n\t\t);\n\t}\n\n\t// Returns the start position of the column containing posX in the specified unit.\n\t// unit must be one of 'corepixels', 'tiletwips', 'printtwips'\n\tpublic getSnapDocPosX(posX: number, unit: GeometryUnit): number {\n\t\treturn this._columns.getSnapPos(posX, unit);\n\t}\n\n\t// Returns the start position of the row containing posY in the specified unit.\n\t// unit must be one of 'corepixels', 'tiletwips', 'printtwips'\n\tpublic getSnapDocPosY(posY: number, unit: GeometryUnit): number {\n\t\treturn this._rows.getSnapPos(posY, unit);\n\t}\n\n\tprivate _testValidity(sheetGeomJSON: SheetGeometryCoreData, checkCompleteness: boolean): boolean {\n\n\t\tif (!sheetGeomJSON.commandName) {\n\t\t\tconsole.error(this._unoCommand + ' response has no property named \"commandName\".');\n\t\t\treturn false;\n\t\t}\n\n\t\tif (sheetGeomJSON.commandName !== this._unoCommand) {\n\t\t\tconsole.error('JSON response has wrong commandName: ' +\n\t\t\t\tsheetGeomJSON.commandName + ' expected: ' +\n\t\t\t\tthis._unoCommand);\n\t\t\treturn false;\n\t\t}\n\n\t\tif (typeof sheetGeomJSON.maxtiledcolumn !== 'string' ||\n\t\t\t!/^\\d+$/.test(sheetGeomJSON.maxtiledcolumn)) {\n\t\t\tconsole.error('JSON is missing/unreadable maxtiledcolumn property');\n\t\t\treturn false;\n\t\t}\n\n\t\tif (typeof sheetGeomJSON.maxtiledrow !== 'string' ||\n\t\t\t!/^\\d+$/.test(sheetGeomJSON.maxtiledrow)) {\n\t\t\tconsole.error('JSON is missing/unreadable maxtiledrow property');\n\t\t\treturn false;\n\t\t}\n\n\t\tif (checkCompleteness) {\n\n\t\t\tif (!sheetGeomJSON.rows || !sheetGeomJSON.columns) {\n\n\t\t\t\tconsole.error(this._unoCommand + ' response is incomplete.');\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (typeof sheetGeomJSON.rows !== 'object' ||\n\t\t\t\ttypeof sheetGeomJSON.columns !== 'object') {\n\n\t\t\t\tconsole.error(this._unoCommand + ' response has invalid rows/columns children.');\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tvar expectedFields = ['sizes', 'hidden', 'filtered'];\n\t\t\tfor (var idx = 0; idx < expectedFields.length; idx++) {\n\n\t\t\t\tvar fieldName = expectedFields[idx];\n\t\t\t\tvar encodingForCols = SheetGeometry.getDimensionDataField(sheetGeomJSON.columns, fieldName);\n\t\t\t\tvar encodingForRows = SheetGeometry.getDimensionDataField(sheetGeomJSON.rows, fieldName);\n\n\t\t\t\t// Don't accept empty string or any other types.\n\t\t\t\tif (typeof encodingForRows !== 'string' || !encodingForRows) {\n\t\t\t\t\tconsole.error(this._unoCommand + ' response has invalid value for rows.' +\n\t\t\t\t\t\tfieldName);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// Don't accept empty string or any other types.\n\t\t\t\tif (typeof encodingForCols !== 'string' || !encodingForCols) {\n\t\t\t\t\tconsole.error(this._unoCommand + ' response has invalid value for columns.' +\n\t\t\t\t\t\tfieldName);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate static getDimensionDataField(dimData: SheetDimensionCoreData, fieldName: string): string {\n\t\tswitch (fieldName) {\n\t\tcase 'sizes':\n\t\t\treturn dimData.sizes;\n\t\tcase 'hidden':\n\t\t\treturn dimData.hidden;\n\t\tcase 'filtered':\n\t\t\treturn dimData.filtered;\n\t\tcase 'groups':\n\t\t\treturn dimData.groups;\n\t\tdefault:\n\t\t\treturn undefined;\n\t\t}\n\t}\n}\n\nexport interface GroupData {\n\tlevel: string;\n\tindex: string;\n\tstartPos: string;\n\tendPos: string;\n\thidden: string;\n}\n\n// Used to represent/query geometry data about either rows or columns.\nexport class SheetDimension {\n\tprivate _sizes: SpanList;\n\tprivate _hidden: BoolSpanList;\n\tprivate _filtered: BoolSpanList;\n\tprivate _outlines: DimensionOutlines;\n\tprivate _visibleSizes: SpanList;\n\n\tprivate _maxIndex: number;\n\tprivate _tileSizeTwips: number;\n\tprivate _tileSizePixels: number;\n\tprivate _coreZoomFactor: number;\n\tprivate _twipsPerCorePixel: number;\n\n\tprivate _viewStartIndex: number;\n\tprivate _viewEndIndex: number;\n\n\tconstructor() {\n\n\t\tthis._sizes = new SpanList();\n\t\tthis._hidden = new BoolSpanList();\n\t\tthis._filtered = new BoolSpanList();\n\t\tthis._outlines = new DimensionOutlines();\n\n\t\t// This is used to store the span-list of sizes\n\t\t// with hidden/filtered elements set to zero size.\n\t\t// This needs to be updated whenever\n\t\t// this._sizes/this._hidden/this._filtered are modified.\n\t\tthis._visibleSizes = undefined;\n\t}\n\n\tpublic update(jsonObject: SheetDimensionCoreData): boolean {\n\n\t\tif (typeof jsonObject !== 'object') {\n\t\t\treturn false;\n\t\t}\n\n\t\tvar regenerateVisibleSizes = false;\n\t\tvar loadsOK = true;\n\t\tif (jsonObject.sizes !== undefined) {\n\t\t\tloadsOK = this._sizes.load(jsonObject.sizes);\n\t\t\tregenerateVisibleSizes = true;\n\t\t}\n\n\t\tif (jsonObject.hidden !== undefined) {\n\t\t\tvar thisLoadOK = this._hidden.load(jsonObject.hidden);\n\t\t\tloadsOK = loadsOK && thisLoadOK;\n\t\t\tregenerateVisibleSizes = true;\n\t\t}\n\n\t\tif (jsonObject.filtered !== undefined) {\n\t\t\tthisLoadOK = this._filtered.load(jsonObject.filtered);\n\t\t\tloadsOK = loadsOK && thisLoadOK;\n\t\t\tregenerateVisibleSizes = true;\n\t\t}\n\n\t\tif (jsonObject.groups !== undefined) {\n\t\t\tthisLoadOK = this._outlines.load(jsonObject.groups);\n\t\t\tloadsOK = loadsOK && thisLoadOK;\n\t\t}\n\n\t\tif (loadsOK && regenerateVisibleSizes) {\n\t\t\tthis._updateVisible();\n\t\t}\n\n\t\treturn loadsOK;\n\t}\n\n\tpublic setMaxIndex(maxIndex: number): void {\n\t\tthis._maxIndex = maxIndex;\n\t}\n\n\tpublic setTileGeometryData(tileSizeTwips: number, tileSizePixels: number, updatePositions: boolean = true): void {\n\n\t\t// Avoid position re-computations if no change in Zoom/dpiScale.\n\t\tif (this._tileSizeTwips === tileSizeTwips &&\n\t\t\tthis._tileSizePixels === tileSizePixels) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._tileSizeTwips = tileSizeTwips;\n\t\tthis._tileSizePixels = tileSizePixels;\n\n\t\t// number of core-pixels in the tile is the same as the number of device pixels used to render the tile.\n\t\tthis._coreZoomFactor = this._tileSizePixels * 15.0 / this._tileSizeTwips;\n\t\tthis._twipsPerCorePixel = this._tileSizeTwips / this._tileSizePixels;\n\n\t\tif (updatePositions) {\n\t\t\t// We need to compute positions data for every zoom change.\n\t\t\tthis._updatePositions();\n\t\t}\n\t}\n\n\tprivate _updateVisible() {\n\n\t\tvar invisibleSpanList = this._hidden.union(this._filtered); // this._hidden is not modified.\n\t\tthis._visibleSizes = this._sizes.applyZeroValues(invisibleSpanList); // this._sizes is not modified.\n\t\tthis._updatePositions();\n\t}\n\n\tprivate _updatePositions() {\n\n\t\tvar posCorePx = 0; // position in core pixels.\n\t\tvar posPrintTwips = 0;\n\t\tthis._visibleSizes.addCustomDataForEachSpan(function (\n\t\t\tindex: number,\n\t\t\tsize: number, /* size in twips of one element in the span */\n\t\t\tspanLength: number /* #elements in the span */) {\n\n\t\t\t// Important: rounding needs to be done in core pixels to match core.\n\t\t\tvar sizeCorePxOne = Math.floor(size / this._twipsPerCorePixel);\n\t\t\tposCorePx += (sizeCorePxOne * spanLength);\n\t\t\t// position in core-pixel aligned twips.\n\t\t\tvar posTileTwips = Math.floor(posCorePx * this._twipsPerCorePixel);\n\t\t\tposPrintTwips += (size * spanLength);\n\n\t\t\tvar customData = {\n\t\t\t\tsizecore: sizeCorePxOne,\n\t\t\t\tposcorepx: posCorePx,\n\t\t\t\tpostiletwips: posTileTwips,\n\t\t\t\tposprinttwips: posPrintTwips\n\t\t\t};\n\n\t\t\treturn customData;\n\t\t}.bind(this));\n\t}\n\n\t// returns the element pos/size in core pixels by default.\n\tpublic getElementData(index: number, zoomScale?: number): DimensionPosSize {\n\t\tif (zoomScale !== undefined) {\n\t\t\tvar startpos = 0;\n\t\t\tvar size = 0;\n\t\t\tthis._visibleSizes.forEachSpanInRange(0, index, function (spanData) {\n\t\t\t\tvar count = spanData.end - spanData.start + 1;\n\t\t\t\tvar sizeOneCorePx = Math.floor(spanData.size * zoomScale / 15.0);\n\t\t\t\tif (index > spanData.end) {\n\t\t\t\t\tstartpos += (sizeOneCorePx * count);\n\t\t\t\t}\n\t\t\t\telse if (index >= spanData.start && index <= spanData.end) {\n\t\t\t\t\t// final span\n\t\t\t\t\tstartpos += (sizeOneCorePx * (index - spanData.start));\n\t\t\t\t\tsize = sizeOneCorePx;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\tstartpos: startpos,\n\t\t\t\tsize: size\n\t\t\t};\n\t\t}\n\n\t\tvar span = this._visibleSizes.getSpanDataByIndex(index);\n\t\tif (span === undefined) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn this._getElementDataFromSpanByIndex(index, span);\n\t}\n\n\tpublic getElementDataAny(index: number, unitName: GeometryUnit): DimensionPosSize {\n\t\tvar span = this._visibleSizes.getSpanDataByIndex(index);\n\t\tif (span === undefined) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn this._getElementDataAnyFromSpanByIndex(index, span, unitName);\n\t}\n\n\t// returns element pos/size in core pixels by default.\n\tprivate _getElementDataFromSpanByIndex(index: number, span: any): DimensionPosSize {\n\t\treturn this._getElementDataAnyFromSpanByIndex(index, span, 'corepixels');\n\t}\n\n\t// returns element pos/size in the requested unit.\n\tprivate _getElementDataAnyFromSpanByIndex(index: number, span: any, unitName: GeometryUnit): DimensionPosSize {\n\n\t\tif (span === undefined || index < span.start || span.end < index) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (unitName !== 'corepixels' &&\n\t\t\tunitName !== 'tiletwips' && unitName !== 'printtwips') {\n\t\t\tconsole.error('unsupported unitName: ' + unitName);\n\t\t\treturn undefined;\n\t\t}\n\n\t\tvar numSizes = span.end - index + 1;\n\t\tvar inPixels = unitName === 'corepixels';\n\t\tif (inPixels) {\n\t\t\treturn {\n\t\t\t\tstartpos: (span.data.poscorepx - span.data.sizecore * numSizes),\n\t\t\t\tsize: span.data.sizecore\n\t\t\t};\n\t\t}\n\n\t\tif (unitName === 'printtwips') {\n\t\t\treturn {\n\t\t\t\tstartpos: (span.data.posprinttwips - span.size * numSizes),\n\t\t\t\tsize: span.size\n\t\t\t};\n\t\t}\n\n\t\t// unitName is 'tiletwips'\n\t\t// It is very important to calculate this from core pixel units to mirror the core calculations.\n\t\tvar twipsPerCorePixel = this._twipsPerCorePixel;\n\t\treturn {\n\t\t\tstartpos: Math.floor(\n\t\t\t\t(span.data.poscorepx - span.data.sizecore * numSizes) * twipsPerCorePixel),\n\t\t\tsize: Math.floor(span.data.sizecore * twipsPerCorePixel)\n\t\t};\n\t}\n\n\tpublic forEachInRange(start: number, end: number, callback: ((dimIndex: number, posSize: DimensionPosSize) => void)): void {\n\n\t\tthis._visibleSizes.forEachSpanInRange(start, end, function (span: SpanViewData) {\n\t\t\tvar first = Math.max(span.start, start);\n\t\t\tvar last = Math.min(span.end, end);\n\t\t\tfor (var index = first; index <= last; ++index) {\n\t\t\t\tcallback(index, this._getElementDataFromSpanByIndex(index, span));\n\t\t\t}\n\t\t}.bind(this));\n\t}\n\n\t// callback with a position and index for each grid line in this pixel range\n\tpublic forEachInCorePixelRange(startPix: number, endPix: number, callback: ((startPosCorePx: number, index: number) => void)): void {\n\t\tthis._visibleSizes.forEachSpan(function (spanData: any) {\n\t\t\t// do we overlap ?\n\t\t\tvar spanFirstCorePx = spanData.data.poscorepx -\n\t\t\t\t(spanData.data.sizecore * (spanData.end - spanData.start + 1));\n\t\t\tif (spanFirstCorePx < endPix && spanData.data.poscorepx > startPix) {\n\t\t\t\tvar firstCorePx = Math.max(\n\t\t\t\t\tspanFirstCorePx,\n\t\t\t\t\tstartPix + spanData.data.sizecore -\n\t\t\t\t\t((startPix - spanFirstCorePx) % spanData.data.sizecore));\n\t\t\t\tvar lastCorePx = Math.min(endPix, spanData.data.poscorepx);\n\n\t\t\t\tvar index = spanData.start + Math.floor((firstCorePx - spanFirstCorePx) / spanData.data.sizecore);\n\t\t\t\tfor (var pos = firstCorePx; pos <= lastCorePx; pos += spanData.data.sizecore) {\n\t\t\t\t\tcallback(pos, index);\n\t\t\t\t\tindex += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t// computes element index from tile-twips position and returns\n\t// an object with this index and the span data.\n\tprivate _getSpanAndIndexFromTileTwipsPos(pos: number): IndexAndSpan {\n\t\tvar result = {} as IndexAndSpan;\n\t\tvar span = this._visibleSizes.getSpanDataByCustomDataField(pos, 'postiletwips');\n\t\tresult.span = span;\n\t\tif (span === undefined) {\n\t\t\t// enforce limits.\n\t\t\tresult.index = (pos >= 0) ? this._maxIndex : 0;\n\t\t\tresult.span = this._visibleSizes.getSpanDataByIndex(result.index);\n\t\t\treturn result;\n\t\t}\n\t\tvar elementCount = span.end - span.start + 1;\n\t\tvar posStart = ((span.data.poscorepx - span.data.sizecore * elementCount) * this._twipsPerCorePixel);\n\t\tvar posEnd = span.data.postiletwips;\n\t\tvar sizeOne = (posEnd - posStart) / elementCount;\n\n\t\t// always round down as relativeIndex is zero-based.\n\t\tvar relativeIndex = Math.floor((pos - posStart) / sizeOne);\n\n\t\tresult.index = span.start + relativeIndex;\n\t\treturn result;\n\t}\n\n\t// computes element index from tile-twips position.\n\tprivate _getIndexFromTileTwipsPos(pos: number): number {\n\t\treturn this._getSpanAndIndexFromTileTwipsPos(pos).index;\n\t}\n\n\t// computes element index from print twips position and returns\n\t// an object with this index and the span data.\n\tprivate _getSpanAndIndexFromPrintTwipsPos(pos: number): IndexAndSpan {\n\t\tvar result = {} as IndexAndSpan;\n\t\tvar span = this._visibleSizes.getSpanDataByCustomDataField(pos, 'posprinttwips');\n\t\tresult.span = span;\n\t\tif (span === undefined) {\n\t\t\t// enforce limits.\n\t\t\tresult.index = (pos >= 0) ? this._maxIndex : 0;\n\t\t\tresult.span = this._visibleSizes.getSpanDataByIndex(result.index);\n\t\t\treturn result;\n\t\t}\n\t\tvar elementCount = span.end - span.start + 1;\n\t\tvar posStart = (span.data.posprinttwips - span.size * elementCount);\n\t\tvar sizeOne = span.size;\n\n\t\t// always round down as relativeIndex is zero-based.\n\t\tvar relativeIndex = Math.floor((pos - posStart) / sizeOne);\n\n\t\tresult.index = span.start + relativeIndex;\n\t\treturn result;\n\t}\n\n\tpublic setViewLimits(startPosTileTwips: number, endPosTileTwips: number): void {\n\n\t\tthis._viewStartIndex = Math.max(0, this._getIndexFromTileTwipsPos(startPosTileTwips));\n\t\tthis._viewEndIndex = Math.min(this._maxIndex, this._getIndexFromTileTwipsPos(endPosTileTwips));\n\t}\n\n\tpublic getViewElementRange(): DimensionRange {\n\t\treturn {\n\t\t\tstart: this._viewStartIndex,\n\t\t\tend: this._viewEndIndex\n\t\t};\n\t}\n\n\tpublic getGroupLevels(): number {\n\t\treturn this._outlines.getLevels();\n\t}\n\n\tpublic getGroupsDataInView(): GroupData[] {\n\t\tvar groupsData: GroupData[] = [];\n\t\tvar levels = this._outlines.getLevels();\n\t\tif (!levels) {\n\t\t\treturn groupsData;\n\t\t}\n\n\t\tthis._outlines.forEachGroupInRange(0, this._viewEndIndex,\n\t\t\tfunction (levelIdx: number, groupIdx: number, start: number, end: number, hidden: number) {\n\n\t\t\t\tvar startElementData = this.getElementData(start);\n\t\t\t\tvar endElementData = this.getElementData(end);\n\t\t\t\tgroupsData.push({\n\t\t\t\t\tlevel: (levelIdx + 1).toString(),\n\t\t\t\t\tindex: groupIdx.toString(),\n\t\t\t\t\tstartPos: startElementData.startpos.toString(),\n\t\t\t\t\tendPos: (endElementData.startpos + endElementData.size).toString(),\n\t\t\t\t\thidden: hidden ? '1' : '0'\n\t\t\t\t});\n\t\t\t}.bind(this));\n\n\t\treturn groupsData;\n\t}\n\n\tpublic getMaxIndex(): number {\n\t\treturn this._maxIndex;\n\t}\n\n\t// Accepts a position in display twips at current zoom and returns corresponding\n\t// display twips position at the given zoomScale.\n\tpublic getTileTwipsAtZoom(posTT: number, zoomScale: number): number {\n\t\tif (typeof posTT !== 'number' || typeof zoomScale !== 'number') {\n\t\t\tconsole.error('Wrong argument types');\n\t\t\treturn;\n\t\t}\n\n\t\tvar posPT = this.getPrintTwipsPosFromTile(posTT);\n\t\treturn this.getTileTwipsPosFromPrint(posPT, zoomScale);\n\t}\n\n\t// Accepts a position in core-pixels at current zoom and returns corresponding\n\t// core-pixels position at the given zoomScale.\n\tpublic getCorePixelsAtZoom(posCP: number, zoomScale: number): number {\n\t\tif (typeof posCP !== 'number' || typeof zoomScale !== 'number') {\n\t\t\tconsole.error('Wrong argument types');\n\t\t\treturn;\n\t\t}\n\n\t\tvar posCPZ = 0; // Position in core-pixels at zoomScale.\n\t\tvar posCPRem = posCP; // Unconverted core-pixels position at current zoom.\n\t\tthis._visibleSizes.forEachSpan(function (span) {\n\t\t\tvar elementCount = span.end - span.start + 1;\n\t\t\tvar sizeOneCP = span.data.sizecore;\n\t\t\tvar sizeOneCPZ = Math.floor(span.size / 15.0 * zoomScale);\n\t\t\tvar sizeCP = sizeOneCP * elementCount;\n\t\t\tvar sizeCPZ = sizeOneCPZ * elementCount;\n\n\t\t\tif (posCPRem < sizeOneCP) {\n\t\t\t\t// Done converting. FIXME: make this callback return false to end the forEachSpan when done.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (posCPRem >= sizeCP) {\n\t\t\t\t// Whole span can be converted.\n\t\t\t\tposCPRem -= sizeCP;\n\t\t\t\tposCPZ += sizeCPZ;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Only part of the span can be converted.\n\t\t\t// sizeOneCP <= posCPRem < sizeCP.\n\t\t\tvar elems = Math.floor(posCPRem / sizeOneCP);\n\t\t\tposCPRem -= (elems * sizeOneCP);\n\t\t\tposCPZ += (elems * sizeOneCPZ);\n\t\t});\n\n\t\treturn posCPZ + (posCPRem * zoomScale / this._coreZoomFactor);\n\t}\n\n\t// Accepts a position in core-pixels at *given* zoomScale and returns corresponding\n\t// core-pixels position at the current zoom.\n\tpublic getCorePixelsFromZoom(posCPZ: number, zoomScale: number): number {\n\t\tif (typeof posCPZ !== 'number' || typeof zoomScale !== 'number') {\n\t\t\tconsole.error('Wrong argument types');\n\t\t\treturn;\n\t\t}\n\n\t\tvar posCP = 0; // Position in core-pixels at current zoom.\n\t\tvar posCPZRem = posCPZ; // Unconverted core-pixels position at zoomScale.\n\t\tthis._visibleSizes.forEachSpan(function (span) {\n\t\t\tvar elementCount = span.end - span.start + 1;\n\t\t\tvar sizeOneCP = span.data.sizecore;\n\t\t\tvar sizeOneCPZ = Math.floor(span.size / 15.0 * zoomScale);\n\t\t\tvar sizeCP = sizeOneCP * elementCount;\n\t\t\tvar sizeCPZ = sizeOneCPZ * elementCount;\n\n\t\t\tif (posCPZRem < sizeOneCPZ) {\n\t\t\t\t// Done converting.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (posCPZRem >= sizeCPZ) {\n\t\t\t\t// Whole span can be converted.\n\t\t\t\tposCPZRem -= sizeCPZ;\n\t\t\t\tposCP += sizeCP;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Only part of the span can be converted.\n\t\t\t// sizeOneCPZ <= posCPZRem < sizeCPZ.\n\t\t\tvar elems = Math.floor(posCPZRem / sizeOneCPZ);\n\t\t\tposCPZRem -= (elems * sizeOneCPZ);\n\t\t\tposCP += (elems * sizeOneCP);\n\t\t});\n\n\t\treturn posCP + (posCPZRem * this._coreZoomFactor / zoomScale);\n\t}\n\n\t// Accepts a position in print twips and returns the corresponding position in tile twips.\n\tpublic getTileTwipsPosFromPrint(posPT: number, zoomScale?: number): number {\n\n\t\tif (typeof posPT !== 'number') {\n\t\t\tconsole.error('Wrong argument type');\n\t\t\treturn;\n\t\t}\n\n\t\tif (typeof zoomScale === 'number') {\n\t\t\tvar posTT = 0;\n\t\t\tvar posPTInc = 0;\n\t\t\tthis._visibleSizes.forEachSpan(function (spanData) {\n\t\t\t\tvar count = spanData.end - spanData.start + 1;\n\t\t\t\tvar sizeSpanPT = spanData.size * count;\n\t\t\t\tvar sizeOneCorePx = Math.floor(spanData.size * zoomScale / 15.0);\n\t\t\t\tvar sizeSpanTT = Math.floor(sizeOneCorePx * count * 15 / zoomScale);\n\n\t\t\t\tif (posPTInc >= posPT) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (posPTInc + sizeSpanPT < posPT) {\n\t\t\t\t\t// add whole span.\n\t\t\t\t\tposPTInc += sizeSpanPT;\n\t\t\t\t\tposTT += sizeSpanTT;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// final span\n\t\t\t\tvar remainingPT = posPT - posPTInc;\n\t\t\t\tvar elemCountFinalSpan = Math.floor(remainingPT / spanData.size);\n\t\t\t\tvar extra = remainingPT - (elemCountFinalSpan * spanData.size);\n\t\t\t\tposTT += (Math.floor(elemCountFinalSpan * sizeSpanTT / count) + extra);\n\t\t\t\tposPTInc = posPT;\n\t\t\t});\n\n\t\t\treturn posTT;\n\t\t}\n\n\t\tvar element = this._getSpanAndIndexFromPrintTwipsPos(posPT);\n\t\tvar elementDataTT = this._getElementDataAnyFromSpanByIndex(element.index, element.span, 'tiletwips');\n\t\tvar elementDataPT = this._getElementDataAnyFromSpanByIndex(element.index, element.span, 'printtwips');\n\n\t\tvar offset = posPT - elementDataPT.startpos;\n\t\tconsole.assert(offset >= 0, 'offset should not be negative');\n\n\t\t// Preserve any offset from the matching column/row start position.\n\t\treturn elementDataTT.startpos + offset;\n\t}\n\n\t// Accepts a position in tile twips and returns the corresponding position in print twips.\n\tpublic getPrintTwipsPosFromTile(posTT: number): number {\n\n\t\tif (typeof posTT !== 'number') {\n\t\t\tconsole.error('Wrong argument type');\n\t\t\treturn;\n\t\t}\n\n\t\tvar element = this._getSpanAndIndexFromTileTwipsPos(posTT);\n\t\tvar elementDataTT = this._getElementDataAnyFromSpanByIndex(element.index, element.span, 'tiletwips');\n\t\tvar elementDataPT = this._getElementDataAnyFromSpanByIndex(element.index, element.span, 'printtwips');\n\n\t\tvar offset = posTT - elementDataTT.startpos;\n\t\tconsole.assert(offset >= 0, 'offset should not be negative');\n\n\t\t// Preserve any offset from the matching column/row start position.\n\t\treturn elementDataPT.startpos + offset;\n\t}\n\n\t// Accepts a start and end positions in print twips, and returns the\n\t// corresponding positions in tile twips, by first computing the element range.\n\tpublic getTileTwipsRangeFromPrint(posStartPT: number, posEndPT: number): DimensionStartEndPos {\n\t\tvar startElement = this._getSpanAndIndexFromPrintTwipsPos(posStartPT);\n\t\tvar startData = this._getElementDataAnyFromSpanByIndex(startElement.index, startElement.span, 'tiletwips');\n\t\tif (posStartPT === posEndPT) {\n\t\t\t// range is hidden, send a minimal sized tile-twips range.\n\t\t\t// Set the size = twips equivalent of 1 core pixel,\n\t\t\t// to imitate what core does when it sends cursor/ranges in tile-twips coordinates.\n\t\t\tvar rangeSize = Math.floor(this._twipsPerCorePixel);\n\t\t\treturn {\n\t\t\t\tstartpos: startData.startpos,\n\t\t\t\tendpos: startData.startpos + rangeSize\n\t\t\t};\n\t\t}\n\t\tvar endElement = this._getSpanAndIndexFromPrintTwipsPos(posEndPT);\n\t\tvar endData = this._getElementDataAnyFromSpanByIndex(endElement.index, endElement.span, 'tiletwips');\n\n\t\tvar startPos = startData.startpos;\n\t\tvar endPos = endData.startpos + endData.size;\n\t\tif (endPos < startPos) {\n\t\t\tendPos = startPos;\n\t\t}\n\n\t\treturn {\n\t\t\tstartpos: startPos,\n\t\t\tendpos: endPos\n\t\t};\n\t}\n\n\tpublic getSize(unit: GeometryUnit): number {\n\t\tvar posSize = this.getElementDataAny(this._maxIndex, unit);\n\t\tif (!posSize) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn posSize.startpos + posSize.size;\n\t}\n\n\tpublic isUnitSupported(unitName: string): boolean {\n\t\treturn (\n\t\t\tunitName === 'corepixels' ||\n\t\t\tunitName === 'tiletwips' ||\n\t\t\tunitName === 'printtwips'\n\t\t);\n\t}\n\n\tpublic getSnapPos(pos: number, unit: GeometryUnit): number {\n\t\tconsole.assert(typeof pos === 'number', 'pos is not a number');\n\t\tconsole.assert(this.isUnitSupported(unit), 'unit: ' + unit + ' is not supported');\n\n\t\tvar origUnit = unit;\n\n\t\tif (unit === 'corepixels') {\n\t\t\tpos = pos * this._twipsPerCorePixel;\n\t\t\tunit = 'tiletwips';\n\t\t}\n\n\t\tconsole.assert(unit === 'tiletwips' || unit === 'printtwips', 'wrong unit assumption');\n\t\tvar result = (unit === 'tiletwips') ?\n\t\t\tthis._getSpanAndIndexFromTileTwipsPos(pos) :\n\t\t\tthis._getSpanAndIndexFromPrintTwipsPos(pos);\n\n\t\treturn this._getElementDataAnyFromSpanByIndex(result.index, result.span, origUnit).startpos;\n\t}\n\n\tpublic getIndexFromPos(pos: number, unit: GeometryUnit): number {\n\t\tconsole.assert(typeof pos === 'number', 'pos is not a number');\n\t\tconsole.assert(this.isUnitSupported(unit), 'unit: ' + unit + ' is not supported');\n\n\t\tif (unit === 'corepixels') {\n\t\t\tpos = pos * this._twipsPerCorePixel;\n\t\t\tunit = 'tiletwips';\n\t\t}\n\n\t\tconsole.assert(unit === 'tiletwips' || unit === 'printtwips', 'wrong unit assumption');\n\t\tvar result = (unit === 'tiletwips') ?\n\t\t\tthis._getSpanAndIndexFromTileTwipsPos(pos) :\n\t\t\tthis._getSpanAndIndexFromPrintTwipsPos(pos);\n\n\t\treturn result.index;\n\t}\n\n}\n\nexport interface SpanData {\n\tindex: number;\n\tvalue: number;\n\tdata?: any;\n}\n\ninterface SpanViewData extends SpanData {\n\tstart: number;\n\tend: number;\n\tsize: number;\n}\n\ninterface ParsedSpan {\n\tindex: number;\n\tvalue: number;\n}\n\ntype BoolSpanData = number;\n\ntype ParsedBoolSpan = number;\n\ninterface ParsedSpanList {\n\tspanlist: ParsedSpan[];\n}\n\ninterface ParsedBoolSpanList {\n\tspanlist: ParsedBoolSpan[];\n\tstartBit: boolean;\n}\n\nclass SpanList {\n\n\tpublic _spanlist: SpanData[];\n\n\tconstructor(encoding?: string) {\n\n\t\t// spans are objects with keys: 'index' and 'value'.\n\t\t// 'index' holds the last element of the span.\n\t\t// Optionally custom data of a span can be added\n\t\t// under the key 'data' via addCustomDataForEachSpan.\n\t\tthis._spanlist = [];\n\t\tif (typeof encoding !== 'string') {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.load(encoding);\n\t}\n\n\tpublic load(encoding: string): boolean {\n\n\t\tif (typeof encoding !== 'string') {\n\t\t\treturn false;\n\t\t}\n\n\t\tvar result = <ParsedSpanList>parseSpanListEncoding(encoding, false /* boolean value ? */);\n\t\tif (result === undefined) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis._spanlist = result.spanlist;\n\t\treturn true;\n\t}\n\n\t// Runs in O(#spans in 'this' + #spans in 'other')\n\tpublic applyZeroValues(other: BoolSpanList) {\n\n\t\tif (!(other instanceof BoolSpanList)) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Ensure both spanlists have the same total range.\n\t\tif (this._spanlist[this._spanlist.length - 1].index !== other._spanlist[other._spanlist.length - 1]) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tvar maxElement = this._spanlist[this._spanlist.length - 1].index;\n\t\tvar result = new SpanList();\n\n\t\tvar thisIdx = 0;\n\t\tvar otherIdx = 0;\n\t\tvar zeroBit = other._startBit;\n\t\tvar resultValue = zeroBit ? 0 : this._spanlist[thisIdx].value;\n\n\t\twhile (thisIdx < this._spanlist.length && otherIdx < other._spanlist.length) {\n\n\t\t\t// end elements of the current spans of 'this' and 'other'.\n\t\t\tvar thisElement = this._spanlist[thisIdx].index;\n\t\t\tvar otherElement = other._spanlist[otherIdx];\n\n\t\t\tvar lastElement = otherElement;\n\t\t\tif (thisElement < otherElement) {\n\t\t\t\tlastElement = thisElement;\n\t\t\t\t++thisIdx;\n\t\t\t}\n\t\t\telse if (otherElement < thisElement) {\n\t\t\t\tzeroBit = !zeroBit;\n\t\t\t\t++otherIdx;\n\t\t\t}\n\t\t\telse { // both elements are equal.\n\t\t\t\tzeroBit = !zeroBit;\n\t\t\t\t++thisIdx;\n\t\t\t\t++otherIdx;\n\t\t\t}\n\n\t\t\tvar nextResultValue = resultValue;\n\t\t\tif (thisIdx < this._spanlist.length) {\n\t\t\t\tnextResultValue = zeroBit ? 0 : this._spanlist[thisIdx].value;\n\t\t\t}\n\n\t\t\tif (resultValue != nextResultValue || lastElement >= maxElement) {\n\t\t\t\t// In the result spanlist a new span start from lastElement+1\n\t\t\t\t// or reached the maximum possible element.\n\t\t\t\tresult._spanlist.push({ index: lastElement, value: resultValue });\n\t\t\t\tresultValue = nextResultValue;\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic addCustomDataForEachSpan(getCustomDataCallback: (index: number, value: number, count: number) => any) {\n\n\t\tif (typeof getCustomDataCallback != 'function') {\n\t\t\treturn;\n\t\t}\n\n\t\tvar prevIndex = -1;\n\t\tthis._spanlist.forEach(function (span) {\n\t\t\tspan.data = getCustomDataCallback(\n\t\t\t\tspan.index, span.value,\n\t\t\t\tspan.index - prevIndex);\n\t\t\tprevIndex = span.index;\n\t\t});\n\t}\n\n\tpublic getSpanDataByIndex(index: number): SpanData {\n\n\t\tif (typeof index != 'number') {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tvar spanid = this._searchByIndex(index);\n\t\tif (spanid == -1) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn this._getSpanData(spanid);\n\t}\n\n\tpublic getSpanDataByCustomDataField(value: number, fieldName: string): SpanViewData {\n\n\t\tif (typeof value != 'number' || typeof fieldName != 'string' || !fieldName) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tvar spanid = this._searchByCustomDataField(value, fieldName);\n\t\tif (spanid == -1) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn this._getSpanData(spanid);\n\t}\n\n\tpublic forEachSpanInRange(start: number, end: number, callback: ((span: SpanViewData) => void)) {\n\n\t\tif (typeof start != 'number' || typeof end != 'number' ||\n\t\t\ttypeof callback != 'function' || start > end) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar id = this._searchByIndex(start);\n\t\tif (id == -1)\n\t\t\treturn;\n\t\tdo {\n\t\t\tvar span = this._getSpanData(id++);\n\t\t\tcallback(span);\n\t\t} while (id < this._spanlist.length && span.index <= end);\n\t}\n\n\tpublic forEachSpan(callback: ((span: SpanViewData) => void)) {\n\t\tfor (var id = 0; id < this._spanlist.length; ++id) {\n\t\t\tcallback(this._getSpanData(id));\n\t\t}\n\t}\n\n\tprivate _getSpanData(spanid: number): SpanViewData {\n\t\t// TODO: Check if data is changed by the callers. If not, return the pointer instead.\n\t\tvar span = this._spanlist[spanid];\n\t\tvar clone: SpanViewData = {\n\t\t\tindex: span.index,\n\t\t\tvalue: span.value,\n\t\t\tdata: span.data,\n\n\t\t\tstart: spanid > 0 ? this._spanlist[spanid - 1].index + 1: 0,\n\t\t\tend: span.index,\n\t\t\tsize: span.value\n\t\t};\n\n\t\treturn clone;\n\t}\n\n\tprivate _searchByIndex(index: number): number {\n\n\t\treturn binarySearch(this._spanlist, index,\n\t\t\tfunction directionProvider(testIndex: number, prevSpan: SpanData, curSpan: SpanData) {\n\t\t\t\tvar spanStart = prevSpan ?\n\t\t\t\t\tprevSpan.index + 1 : 0;\n\t\t\t\tvar spanEnd = curSpan.index;\n\t\t\t\treturn (testIndex < spanStart) ? -1 :\n\t\t\t\t\t(spanEnd < testIndex) ? 1 : 0;\n\t\t\t});\n\t}\n\n\tpublic _searchByCustomDataField(value: number, fieldName: string): number {\n\n\t\t// All custom searchable data values are assumed to start\n\t\t// from 0 at the start of first span and are in non-decreasing order.\n\n\t\treturn binarySearch(this._spanlist, value,\n\t\t\tfunction directionProvider(testValue: number, prevSpan: SpanData, curSpan: SpanData, nextSpan: SpanData) {\n\t\t\t\tvar valueStart = prevSpan ?\n\t\t\t\t\tprevSpan.data[fieldName] : 0;\n\t\t\t\tvar valueEnd = curSpan.data[fieldName] - (nextSpan ? 1 : 0);\n\t\t\t\tif (valueStart === undefined || valueEnd === undefined) {\n\t\t\t\t\t// fieldName not present in the 'data' property.\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\treturn (testValue < valueStart) ? -1 :\n\t\t\t\t\t(valueEnd < testValue) ? 1 : 0;\n\t\t\t}, true /* find the first match in case of duplicates */);\n\t\t// About the last argument: duplicates can happen, for instance if the\n\t\t// custom field represents positions, and there are spans with zero sizes (hidden/filtered).\n\t}\n\n\n}\n\nclass BoolSpanList {\n\n\tpublic _startBit: boolean;\n\tpublic _spanlist: BoolSpanData[];\n\n\tconstructor(encoding?: string) {\n\n\t\t// list of spans, each span represented by the end index.\n\t\tthis._spanlist = [];\n\t\tthis._startBit = false;\n\t\tif (typeof encoding !== 'string') {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.load(encoding);\n\t}\n\n\tpublic load(encoding?: string): boolean {\n\n\t\tif (typeof encoding !== 'string') {\n\t\t\treturn false;\n\t\t}\n\n\t\tvar result = <ParsedBoolSpanList>parseSpanListEncoding(encoding, true /* boolean value ? */);\n\t\tif (result === undefined) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis._spanlist = result.spanlist;\n\t\tthis._startBit = result.startBit;\n\t\treturn true;\n\t}\n\n\t// Runs in O(#spans in 'this' + #spans in 'other')\n\tpublic union(other: BoolSpanList) {\n\n\t\tif (!(other instanceof BoolSpanList)) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Ensure both spanlists have the same total range.\n\t\tif (this._spanlist[this._spanlist.length - 1] !== other._spanlist[other._spanlist.length - 1]) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tvar maxElement = this._spanlist[this._spanlist.length - 1];\n\n\t\tvar result = new BoolSpanList();\n\t\tvar thisBit = this._startBit;\n\t\tvar otherBit = other._startBit;\n\t\tvar resultBit = thisBit || otherBit;\n\t\tresult._startBit = resultBit;\n\n\t\tvar thisIdx = 0;\n\t\tvar otherIdx = 0;\n\n\t\twhile (thisIdx < this._spanlist.length && otherIdx < other._spanlist.length) {\n\n\t\t\t// end elements of the current spans of 'this' and 'other'.\n\t\t\tvar thisElement = this._spanlist[thisIdx];\n\t\t\tvar otherElement = other._spanlist[otherIdx];\n\n\t\t\tvar lastElement = otherElement;\n\t\t\tif (thisElement < otherElement) {\n\t\t\t\tlastElement = thisElement;\n\t\t\t\tthisBit = !thisBit;\n\t\t\t\t++thisIdx;\n\t\t\t}\n\t\t\telse if (otherElement < thisElement) {\n\t\t\t\totherBit = !otherBit;\n\t\t\t\t++otherIdx;\n\t\t\t}\n\t\t\telse { // both elements are equal.\n\t\t\t\tthisBit = !thisBit;\n\t\t\t\totherBit = !otherBit;\n\t\t\t\t++thisIdx;\n\t\t\t\t++otherIdx;\n\t\t\t}\n\n\t\t\tvar nextResultBit = (thisBit || otherBit);\n\t\t\tif (resultBit != nextResultBit || lastElement >= maxElement) {\n\t\t\t\t// In the result spanlist a new span start from lastElement+1\n\t\t\t\t// or reached the maximum possible element.\n\t\t\t\tresult._spanlist.push(lastElement);\n\t\t\t\tresultBit = nextResultBit;\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n}\n\nfunction parseSpanListEncoding(encoding: string, booleanValue: boolean): (ParsedSpanList | ParsedBoolSpanList) {\n\n\tvar spanlist: ParsedSpan[] = [];\n\tvar boolspanlist: BoolSpanData[] = [];\n\tvar splits = encoding.split(' ');\n\tif (splits.length < 2) {\n\t\treturn undefined;\n\t}\n\n\tvar startBitInt = 0;\n\tif (booleanValue) {\n\t\tvar parts = splits[0].split(':');\n\t\tif (parts.length != 2) {\n\t\t\treturn undefined;\n\t\t}\n\t\tstartBitInt = parseInt(parts[0]);\n\t\tvar first = parseInt(parts[1]);\n\t\tif (isNaN(startBitInt) || isNaN(first)) {\n\t\t\treturn undefined;\n\t\t}\n\t\tboolspanlist.push(first);\n\t}\n\n\tvar startBit = Boolean(startBitInt);\n\n\tfor (var idx = 0; idx < splits.length - 1; ++idx) {\n\n\t\tif (booleanValue) {\n\t\t\tif (!idx) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvar entry = parseInt(splits[idx]);\n\t\t\tif (isNaN(entry)) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tboolspanlist.push(entry);\n\t\t\tcontinue;\n\t\t}\n\n\t\tvar spanParts = splits[idx].split(':');\n\t\tif (spanParts.length != 2) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tvar span = {\n\t\t\tindex: parseInt(spanParts[1]),\n\t\t\tvalue: parseInt(spanParts[0])\n\t\t};\n\n\t\tif (isNaN(span.index) || isNaN(span.value)) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tspanlist.push(span);\n\t}\n\n\tif (booleanValue) {\n\t\treturn {\n\t\t\tspanlist: boolspanlist,\n\t\t\tstartBit: startBit\n\t\t};\n\t}\n\n\treturn { spanlist: spanlist };\n}\n\ninterface OutlineEntry {\n\tstart: number;\n\tend: number;\n\thidden: number;\n\tvisible: number;\n}\n\ntype OutlineCollection = OutlineEntry[];\n\nexport class DimensionOutlines {\n\n\tprivate _outlines: OutlineCollection[];\n\n\tconstructor(encoding?: string) {\n\n\t\tthis._outlines = [];\n\t\tif (typeof encoding !== 'string') {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.load(encoding);\n\t}\n\n\tpublic load(encoding: string): boolean {\n\n\t\tif (typeof encoding !== 'string') {\n\t\t\treturn false;\n\t\t}\n\n\t\tvar levels = encoding.split(' ');\n\t\tif (levels.length < 2) {\n\t\t\t// No outline.\n\t\t\tthis._outlines = [];\n\t\t\treturn true;\n\t\t}\n\n\t\tvar outlines: OutlineCollection[] = [];\n\n\t\tfor (var levelIdx = 0; levelIdx < levels.length - 1; ++levelIdx) {\n\t\t\tvar collectionSplits = levels[levelIdx].split(',');\n\t\t\tvar collections = [];\n\t\t\tif (collectionSplits.length < 2) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tfor (var collIdx = 0; collIdx < collectionSplits.length - 1; ++collIdx) {\n\t\t\t\tvar entrySplits = collectionSplits[collIdx].split(':');\n\t\t\t\tif (entrySplits.length < 4) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tvar olineEntry: OutlineEntry = {\n\t\t\t\t\tstart: parseInt(entrySplits[0]),\n\t\t\t\t\tend: parseInt(entrySplits[1]), // this is size.\n\t\t\t\t\thidden: parseInt(entrySplits[2]),\n\t\t\t\t\tvisible: parseInt(entrySplits[3])\n\t\t\t\t};\n\n\t\t\t\tif (isNaN(olineEntry.start) || isNaN(olineEntry.end) ||\n\t\t\t\t\tisNaN(olineEntry.hidden) || isNaN(olineEntry.visible)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// correct the 'end' attribute.\n\t\t\t\tolineEntry.end += (olineEntry.start - 1);\n\n\t\t\t\tcollections.push(olineEntry);\n\t\t\t}\n\n\t\t\toutlines.push(collections);\n\t\t}\n\n\t\tthis._outlines = outlines;\n\t\treturn true;\n\t}\n\n\tpublic getLevels(): number {\n\t\treturn this._outlines.length;\n\t}\n\n\t// Calls 'callback' for all groups in all levels that have an intersection with\n\t// the inclusive element range [start, end].\n\t// 'callback' is called with these parameters :\n\t// (levelIdx, groupIdx, groupStart, groupEnd, groupHidden).\n\tpublic forEachGroupInRange(start: number, end: number,\n\t\tcallback: ((levelIndex: number, groupIndex: number, groupStart: number, groupEnd: number, groupHidden: number) => void)): void {\n\n\t\tif (typeof start != 'number' || typeof end != 'number' || typeof callback != 'function') {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this._outlines.length || start > end) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Search direction provider for binarySearch().\n\t\t// Here we want to find the first group after or intersects elementIdx.\n\t\t// return value : 0 for match, -1 for \"try previous entries\", +1 for \"try next entries\".\n\t\tvar directionProvider = function (elementIdx: number, prevGroup: OutlineEntry, curGroup: OutlineEntry/*, nextGroup*/): SearchDirection {\n\n\t\t\tvar direction: SearchDirection = (elementIdx < curGroup.start) ? -1 :\n\t\t\t\t(curGroup.end < elementIdx) ? 1 : 0;\n\n\t\t\tif (direction >= 0) {\n\t\t\t\treturn direction;\n\t\t\t}\n\n\t\t\t// If curGroup is the first one, or elementidx is after prevGroup's end, then it is a match.\n\t\t\tif (!prevGroup || (prevGroup.end < elementIdx)) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\treturn -1;\n\t\t};\n\n\t\tfor (var levelIdx = this._outlines.length - 1; levelIdx >= 0; --levelIdx) {\n\n\t\t\tvar groupsInLevel = this._outlines[levelIdx];\n\t\t\t// Find the first group after or that intersects 'start'.\n\t\t\tvar startGroupIdx = binarySearch(groupsInLevel, start, directionProvider);\n\t\t\tif (startGroupIdx == -1) {\n\t\t\t\t// All groups at this level are before 'start'.\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvar startGroup = groupsInLevel[startGroupIdx];\n\t\t\tif (end < startGroup.start) {\n\t\t\t\t// No group at this level intersects the range [start, end].\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tfor (var groupIdx = startGroupIdx; groupIdx < groupsInLevel.length; ++groupIdx) {\n\t\t\t\tvar group = groupsInLevel[groupIdx];\n\t\t\t\tif (end < group.start) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tcallback(levelIdx, groupIdx, group.start,\n\t\t\t\t\tgroup.end, group.hidden);\n\t\t\t}\n\t\t}\n\t}\n}\n\n// Does binary search on array for key, possibly using a custom direction provider.\n// Of course, this assumes that the array is sorted (w.r.t to the semantics of\n// the directionProvider when it is provided).\n// It returns the index of the match if successful else returns -1.\n// 'firstMatch' if true, some additional work is done to ensure that the index of\n// the first match (from the 0 index of the array) is returned in case there are\n// duplicates.\n//\n// directionProvider will be provided the following parameters :\n// (key, previousArrayElement, currentArrayElement, nextArrayElement)\n// previousArrayElement and nextArrayElement can be undefined when\n// currentArrayElement is the first or the last element of the array\n// respectively. This function should return:\n//   0: for a match(to stop search),\n//   1: to try searching upper half,\n//  -1: to try searching lower half\n\ntype SearchDirection = 0 | 1 | -1;\ntype DirectionProviderType = ((key: any, previousElement: any, currentElement: any, nextElement?: any) => SearchDirection);\n\nfunction binarySearch(array: any[], key: any, directionProvider: DirectionProviderType, firstMatch: boolean = false): number {\n\n\tif (!Array.isArray(array) || !array.length) {\n\t\treturn -1;\n\t}\n\n\tif (typeof directionProvider != 'function') {\n\t\tdirectionProvider = function (key, prevvalue, testvalue) {\n\t\t\treturn (key === testvalue) ? 0 :\n\t\t\t\t(key < testvalue) ? -1 : 1;\n\t\t};\n\t}\n\n\tfirstMatch = (firstMatch === true);\n\n\tvar start = 0;\n\tvar end = array.length - 1;\n\n\t// Bound checks and early exit.\n\tvar startDir = directionProvider(key, undefined, array[0], array[1]);\n\tif (startDir <= 0) {\n\t\treturn startDir;\n\t}\n\n\tvar endDir = directionProvider(key, array[end - 1], array[end]);\n\tif (endDir >= 0) {\n\n\t\tif (endDir === 1) {\n\t\t\treturn -1;\n\t\t}\n\n\t\treturn firstMatch ? _findFirstMatch(array, key, directionProvider, end) : end;\n\t}\n\n\tvar mid = -1;\n\twhile (start <= end) {\n\t\tmid = Math.round((start + end) / 2);\n\t\tvar direction = directionProvider(key, array[mid - 1],\n\t\t\tarray[mid], array[mid + 1]);\n\n\t\tif (direction == 0) {\n\t\t\tbreak;\n\t\t}\n\n\t\tif (direction == -1) {\n\t\t\tend = mid - 1;\n\t\t}\n\t\telse {\n\t\t\tstart = mid + 1;\n\t\t}\n\t}\n\n\treturn (start > end) ? -1 :\n\t\tfirstMatch ? _findFirstMatch(array, key, directionProvider, mid) : mid;\n}\n\n// Helper function for binarySearch().\nfunction _findFirstMatch(array: any[], key: any, directionProvider: DirectionProviderType, randomMatchingIndex: number) {\n\n\tif (randomMatchingIndex === 0) {\n\t\treturn 0;\n\t}\n\n\tvar index = randomMatchingIndex - 1;\n\twhile (index >= 0 && directionProvider(key,\n\t\tarray[index - 1], array[index], array[index + 1]) == 0) {\n\t\t--index;\n\t}\n\n\treturn index + 1;\n}\n\n}\n\nL.SheetGeometry = cool.SheetGeometry;\n"]}