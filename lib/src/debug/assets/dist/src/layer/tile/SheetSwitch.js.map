{"version":3,"file":"SheetSwitch.js","sourceRoot":"","sources":["../../../../../../../../../../../TanhX/online/browser/src/layer/tile/SheetSwitch.ts"],"names":[],"mappings":"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","sourcesContent":["/* -*- js-indent-level: 8 -*- */\n\n/*\n * Copyright the Collabora Online contributors.\n *\n * SPDX-License-Identifier: MPL-2.0\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\ndeclare var L: any;\n\nnamespace cool {\n\n// SheetSwitchViewRestore is used to store the last view position of a sheet\n// before a sheet switch so that when the user switches back to previously used\n// sheets we can restore the last scroll position of that sheet.\nexport class SheetSwitchViewRestore {\n\n\tprivate map: any;\n\tprivate docLayer: any;\n\n\t// centerOfSheet maps from sheet id to center of sheet view.\n\t// Currently LatLng is used for center, but this will be\n\t// replaced by pixel coordinates.\n\tprivate centerOfSheet: Map<number, any>;\n\tprivate mayRestore: boolean;\n\tprivate restorePart: number;\n\tprivate setPartRecvd: boolean;\n\tprivate currentSheetIndexReassigned: boolean;\n\n\t// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\tconstructor (map: any) {\n\n\t\tthis.map = map;\n\t\tthis.docLayer = this.map._docLayer;\n\n\t\tthis.centerOfSheet = new Map<number, any>();\n\t\tthis.mayRestore = false;\n\t\tthis.restorePart = -1;\n\t\tthis.setPartRecvd = false;\n\t\tthis.currentSheetIndexReassigned = false;\n\n\t}\n\n\tpublic save (toPart: number): void {\n\t\tif (!this.currentSheetIndexReassigned) {\n\t\t\tthis.centerOfSheet.set(this.docLayer._selectedPart as number, this.map.getCenter());\n\t\t} else {\n\t\t\tthis.currentSheetIndexReassigned = false;\n\t\t}\n\t\tthis.mayRestore = this.centerOfSheet.has(toPart);\n\t\tthis.restorePart = this.mayRestore ? toPart : -1;\n\t\tthis.setPartRecvd = false;\n\t}\n\n\tpublic updateOnSheetMoved(oldIndex: number, newIndex: number): void {\n\t\tif (oldIndex < 0 || newIndex < 0 || oldIndex === newIndex)\n\t\t\treturn;\n\n\t\tconst movedSheetCenter = this.centerOfSheet.get(oldIndex);\n\n\t\tif (oldIndex < newIndex) {\n\t\t\tfor (let i = oldIndex; i < newIndex; ++i) {\n\t\t\t\tconst center = this.centerOfSheet.get(i + 1);\n\t\t\t\tif (center)\n\t\t\t\t\tthis.centerOfSheet.set(i, center);\n\t\t\t\telse\n\t\t\t\t\tthis.centerOfSheet.delete(i);\n\t\t\t}\n\t\t} else {\n\t\t\tfor (let i = oldIndex; i > newIndex; --i) {\n\t\t\t\tconst center = this.centerOfSheet.get(i - 1);\n\t\t\t\tif (center)\n\t\t\t\t\tthis.centerOfSheet.set(i, center);\n\t\t\t\telse\n\t\t\t\t\tthis.centerOfSheet.delete(i);\n\t\t\t}\n\t\t}\n\n\t\tif (movedSheetCenter)\n\t\t\tthis.centerOfSheet.set(newIndex, movedSheetCenter);\n\t\telse\n\t\t\tthis.centerOfSheet.delete(newIndex);\n\t}\n\n\tpublic updateOnSheetInsertion(index: number): void {\n\t\tif (index < 0)\n\t\t\treturn;\n\n\t\t// when insert a sheet\n\t\tthis.centerOfSheet.set(this.docLayer._selectedPart as number, this.map.getCenter());\n\n\t\tconst numberOfSheets: number = this.map.getNumberOfParts();\n\t\tfor (let i = numberOfSheets; i > index; --i) {\n\t\t\tconst center = this.centerOfSheet.get(i - 1);\n\t\t\tif (center)\n\t\t\t\tthis.centerOfSheet.set(i, center);\n\t\t\telse\n\t\t\t\tthis.centerOfSheet.delete(i);\n\t\t}\n\t\tthis.centerOfSheet.delete(index);\n\n\t\tconst currentSheetNumber: number = this.map.getCurrentPartNumber();\n\t\tthis.currentSheetIndexReassigned = index <= currentSheetNumber;\n\t\tif (this.currentSheetIndexReassigned) {\n\t\t\tthis.centerOfSheet.set(currentSheetNumber + 1, this.map.getCenter());\n\t\t}\n\t}\n\n\tpublic updateOnSheetDeleted(index: number): void {\n\t\tif (index < 0)\n\t\t\treturn;\n\n\t\tconst numberOfSheets: number = this.map.getNumberOfParts();\n\t\tfor (let i = index; i < numberOfSheets; ++i) {\n\t\t\tconst center = this.centerOfSheet.get(i + 1);\n\t\t\tif (center)\n\t\t\t\tthis.centerOfSheet.set(i, center);\n\t\t\telse\n\t\t\t\tthis.centerOfSheet.delete(i);\n\t\t}\n\n\t\tconst currentSheetNumber: number = this.map.getCurrentPartNumber();\n\t\tthis.currentSheetIndexReassigned = index <= currentSheetNumber;\n\t\tif (index < currentSheetNumber) {\n\t\t\tthis.centerOfSheet.set(currentSheetNumber - 1, this.map.getCenter());\n\t\t}\n\t}\n\n\tpublic gotSetPart(part: number): void {\n\n\t\tthis.setPartRecvd = (part === this.restorePart);\n\t}\n\n\t// This resets the flags but not the center map.\n\tprivate reset (): void {\n\n\t\tthis.restorePart = -1;\n\t\tthis.mayRestore = false;\n\t}\n\n\tprivate restoreView (): void {\n\n\t\tconst center = this.centerOfSheet.get(this.restorePart);\n\t\tif (center === undefined) {\n\t\t\tthis.reset();\n\t\t\treturn;\n\t\t}\n\n\t\tthis.map._resetView(center, this.map._zoom);\n\n\t\t// Keep restoring view for every cell-cursor messages until we get this\n\t\t// call after receiving cell-cursor msg after setpart incoming msg.\n\t\t// Because it is guaranteed that cell-cursor messages belong to the new part\n\t\t// after setpart(incoming) msg.\n\t\tif (this.setPartRecvd)\n\t\t\tthis.reset();\n\t}\n\n\t// This should be called to restore sheet's last scroll position if necessary and\n\t// returns whether the map should scroll to current cursor.\n\tpublic tryRestore(duplicateCursor: boolean, currentPart: number): boolean {\n\n\t\tlet shouldScrollToCursor = false;\n\t\tconst attemptRestore = (this.mayRestore && currentPart === this.restorePart);\n\n\t\tif (attemptRestore) {\n\t\t\tif (this.setPartRecvd && duplicateCursor)\n\t\t\t\tthis.reset();\n\t\t\tif (!this.setPartRecvd)\n\t\t\t\tthis.restoreView();\n\t\t}\n\n\t\tif ((!attemptRestore || this.setPartRecvd) && !duplicateCursor)\n\t\t\tshouldScrollToCursor = true;\n\n\t\treturn shouldScrollToCursor;\n\t}\n}\n\n}\n\nL.SheetSwitchViewRestore = cool.SheetSwitchViewRestore;\n\n\n"]}