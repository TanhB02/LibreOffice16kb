{"version":3,"file":"CRS.js","sourceRoot":"","sources":["../../../../../../../../../../../TanhX/online/browser/src/geo/crs/CRS.js"],"names":[],"mappings":"AAAA,gCAAgC;AAChC;;GAEG;AAEH,CAAC,CAAC,GAAG,GAAG;IACP,UAAU,EAAE,CAAC,CAAC,UAAU,CAAC,MAAM;IAC/B,cAAc,EAAE,IAAI,CAAC,CAAC,cAAc,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;IAEjD,oCAAoC;IACpC,aAAa,EAAE,UAAU,MAAM,EAAE,IAAI;QACpC,IAAI,cAAc,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,EAChD,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAE7B,OAAO,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;IAC9D,CAAC;IAED,sCAAsC;IACtC,aAAa,EAAE,UAAU,KAAK,EAAE,IAAI;QACnC,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EACxB,kBAAkB,GAAG,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QAEvE,OAAO,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAC;IACtD,CAAC;IAED,qEAAqE;IACrE,OAAO,EAAE,UAAU,MAAM;QACxB,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IACxC,CAAC;IAED,0CAA0C;IAC1C,SAAS,EAAE,UAAU,KAAK;QACzB,OAAO,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IACzC,CAAC;IAED,yCAAyC;IACzC,KAAK,EAAE,UAAU,IAAI;QACpB,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;IAC5B,CAAC;IAED,4EAA4E;IAC5E,6FAA6F;IAC7F,gFAAgF;IAChF,OAAO,EAAE,UAAU,KAAK,EAAE,OAAO,EAAE,OAAO;QACzC,OAAO,CAAC,CAAC,KAAK,CACb,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,OAAO,CAAC,EACvC,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,OAAO,CAAC,CACvC,CAAC;IACH,CAAC;IAED,QAAQ,EAAE,UAAU,OAAO,EAAE,OAAO;QACnC,IAAI,EAAE,GAAG,OAAO,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,EAC9B,EAAE,GAAG,OAAO,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC;QAEnC,OAAO,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;IACrC,CAAC;IAED,6DAA6D;IAC7D,QAAQ,EAAE,IAAI;CACd,CAAC","sourcesContent":["/* -*- js-indent-level: 8 -*- */\n/*\n * L.CRS is the base object for all defined CRS (Coordinate Reference Systems) in Leaflet.\n */\n\nL.CRS = {\n\tprojection: L.Projection.LonLat,\n\ttransformation: new L.Transformation(1, 0, -1, 0),\n\n\t// converts geo coords to pixel ones\n\tlatLngToPoint: function (latlng, zoom) {\n\t\tvar projectedPoint = this.projection.project(latlng),\n\t\t    scale = this.scale(zoom);\n\n\t\treturn this.transformation._transform(projectedPoint, scale);\n\t},\n\n\t// converts pixel coords to geo coords\n\tpointToLatLng: function (point, zoom) {\n\t\tvar scale = this.scale(zoom),\n\t\t    untransformedPoint = this.transformation.untransform(point, scale);\n\n\t\treturn this.projection.unproject(untransformedPoint);\n\t},\n\n\t// converts geo coords to projection-specific coords (e.g. in meters)\n\tproject: function (latlng) {\n\t\treturn this.projection.project(latlng);\n\t},\n\n\t// converts projected coords to geo coords\n\tunproject: function (point) {\n\t\treturn this.projection.unproject(point);\n\t},\n\n\t// defines how the world scales with zoom\n\tscale: function (zoom) {\n\t\treturn Math.pow(1.2, zoom);\n\t},\n\n\t// equivalent to doing an unproject with oldZoom then a project with newZoom\n\t// except that unproject is technically invalid (so possibly confusing) for any non-css-pixel\n\t// but this function will work with any scaling (including twips or core pixels)\n\trescale: function (point, oldZoom, newZoom) {\n\t\treturn L.point(\n\t\t\tpoint.x * this.scale(newZoom - oldZoom),\n\t\t\tpoint.y * this.scale(newZoom - oldZoom),\n\t\t);\n\t},\n\n\tdistance: function (latlng1, latlng2) {\n\t\tvar dx = latlng2.lng - latlng1.lng,\n\t\t    dy = latlng2.lat - latlng1.lat;\n\n\t\treturn Math.sqrt(dx * dx + dy * dy);\n\t},\n\n\t// coordinate space is unbounded (infinite in all directions)\n\tinfinite: true,\n};\n"]}