{"version":3,"file":"TilesMiddleware.js","sourceRoot":"","sources":["../../../../../../../../../../TanhX/online/browser/src/app/TilesMiddleware.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-strict-ignore\n/* -*- js-indent-level: 8 -*- */\n/*\n * Copyright the Collabora Online contributors.\n *\n * SPDX-License-Identifier: MPL-2.0\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\n// debugging aid.\nfunction hex2string(inData: any, length: number) {\n\tvar hexified = [];\n\tvar data = new Uint8Array(inData);\n\tfor (var i = 0; i < length; i++) {\n\t\tvar hex = data[i].toString(16);\n\t\tvar paddedHex = ('00' + hex).slice(-2);\n\t\thexified.push(paddedHex);\n\t}\n\treturn hexified.join('');\n}\n\nclass TileCoordData {\n\tx: number;\n\ty: number;\n\tz: number;\n\tpart: number;\n\tmode: number;\n\n\t/*\n\t\tNo need to calculate the scale every time. We have the current scale, reachable via app.getScale().\n\t\tWe can compare these two when we need check if a tile is in the current scale. Assigned on creation.\n\t*/\n\tscale: number;\n\n\tconstructor(\n\t\tleft: number,\n\t\ttop: number,\n\t\tzoom: number = null,\n\t\tpart: number = null,\n\t\tmode: number = null,\n\t) {\n\t\tthis.x = left;\n\t\tthis.y = top;\n\t\tthis.z = zoom !== null ? zoom : app.map.getZoom();\n\t\tthis.part = part !== null ? part : app.map._docLayer._selectedPart;\n\t\tthis.mode = mode !== undefined ? mode : 0;\n\n\t\tthis.scale = Math.pow(1.2, this.z - 10);\n\t}\n\n\tgetPos() {\n\t\treturn new L.Point(this.x, this.y);\n\t}\n\n\tkey(): string {\n\t\treturn (\n\t\t\tthis.x +\n\t\t\t':' +\n\t\t\tthis.y +\n\t\t\t':' +\n\t\t\tthis.z +\n\t\t\t':' +\n\t\t\tthis.part +\n\t\t\t':' +\n\t\t\t(this.mode !== undefined ? this.mode : 0)\n\t\t);\n\t}\n\n\ttoString(): string {\n\t\treturn (\n\t\t\t'{ left : ' +\n\t\t\tthis.x +\n\t\t\t', top : ' +\n\t\t\tthis.y +\n\t\t\t', z : ' +\n\t\t\tthis.z +\n\t\t\t', part : ' +\n\t\t\tthis.part +\n\t\t\t', mode : ' +\n\t\t\tthis.mode +\n\t\t\t' }'\n\t\t);\n\t}\n\n\tpublic static parseKey(key: string): TileCoordData {\n\t\twindow.app.console.assert(\n\t\t\ttypeof key === 'string',\n\t\t\t'key should be a string',\n\t\t);\n\t\tconst k = key.split(':');\n\t\tconst mode = k.length === 4 ? +k[4] : 0;\n\t\twindow.app.console.assert(k.length >= 5, 'invalid key format');\n\t\treturn new TileCoordData(+k[0], +k[1], +k[2], +k[3], mode);\n\t}\n\n\tpublic static keyToTileCoords(key: string): TileCoordData {\n\t\treturn TileCoordData.parseKey(key);\n\t}\n}\n\nclass PaneBorder {\n\t_border: any;\n\t_xFixed: boolean;\n\t_yFixed: boolean;\n\t_index: number;\n\n\tconstructor(paneBorder: any, paneXFixed: boolean, paneYFixed: boolean) {\n\t\tthis._border = paneBorder;\n\t\tthis._xFixed = paneXFixed;\n\t\tthis._yFixed = paneYFixed;\n\t\tthis._index = 0;\n\t}\n\n\tgetBorderIndex() {\n\t\treturn this._index;\n\t}\n\n\tincBorderIndex() {\n\t\tthis._index += 1;\n\t}\n\n\tgetBorderBounds() {\n\t\treturn this._border;\n\t}\n\n\tisXFixed() {\n\t\treturn this._xFixed;\n\t}\n\n\tisYFixed() {\n\t\treturn this._yFixed;\n\t}\n}\n\nclass RawDelta {\n\tprivate _delta: Uint8Array;\n\tprivate _id: number;\n\tprivate _isKeyframe: boolean;\n\n\tconstructor(delta: Uint8Array, id: number, isKeyframe: boolean) {\n\t\tthis._delta = delta;\n\t\tthis._id = id;\n\t\tthis._isKeyframe = isKeyframe;\n\t}\n\n\tpublic get length() {\n\t\treturn this.delta.length;\n\t}\n\n\tpublic get delta() {\n\t\treturn this._delta;\n\t}\n\n\tpublic get id() {\n\t\treturn this._id;\n\t}\n\n\tpublic get isKeyframe() {\n\t\treturn this._isKeyframe;\n\t}\n}\n\nclass Tile {\n\tcoords: TileCoordData;\n\tdistanceFromView: number = 0; // distance to the center of the nearest visible area (0 = visible)\n\timage: ImageBitmap | null = null; // ImageBitmap ready to render\n\timgDataCache: any = null; // flat byte array of image data\n\trawDeltas: RawDelta[] = []; // deltas ready to decompress\n\tdeltaCount: number = 0; // how many deltas on top of the keyframe\n\tupdateCount: number = 0; // how many updates did we have\n\tloadCount: number = 0; // how many times did we get a new keyframe\n\tgcErrors: number = 0; // count freed keyframe in JS, but kept in wsd.\n\tmissingContent: number = 0; // how many times rendered without content\n\tinvalidateCount: number = 0; // how many invalidations touched this tile\n\tviewId: number = 0; // canonical view id\n\twireId: number = 0; // monotonic timestamp for optimizing fetch\n\tinvalidFrom: number = 0; // a wireId - for avoiding races on invalidation\n\tdeltaId: number = 0; // monotonic id for delta updates\n\tlastPendingId: number = 0; // the id of the last delta requested to be decompressed\n\tdecompressedId: number = 0; // the id of the last decompressed delta chunk in imgDataCache\n\tlastRendered: number = performance.timeOrigin;\n\tprivate lastRequestTime: Date = undefined; // when did we last do a tilecombine request.\n\n\tconstructor(coords: TileCoordData) {\n\t\tthis.coords = coords;\n\t}\n\n\thasContent(): boolean {\n\t\treturn this.imgDataCache || this.hasKeyframe();\n\t}\n\n\tneedsFetch() {\n\t\treturn this.invalidFrom >= this.wireId || !this.hasContent();\n\t}\n\n\tneedsRehydration(): boolean {\n\t\tif (this.rawDeltas.length === 0) return false;\n\t\tconst lastId = this.rawDeltas[this.rawDeltas.length - 1].id;\n\t\treturn this.lastPendingId !== lastId;\n\t}\n\n\thasKeyframe(): boolean {\n\t\treturn !!this.rawDeltas.length;\n\t}\n\n\tisReady(): boolean {\n\t\treturn this.decompressedId === this.lastPendingId;\n\t}\n\n\t/// Demand a whole tile back to the keyframe from coolwsd.\n\tforceKeyframe(wireId: number = 0) {\n\t\tthis.wireId = wireId;\n\t\tthis.invalidFrom = wireId;\n\t\tthis.allowFastRequest();\n\t}\n\n\t/// Avoid continually re-requesting tiles for eg. preloading\n\trequestingTooFast(now: Date): boolean {\n\t\tconst tooFast: boolean =\n\t\t\tthis.lastRequestTime &&\n\t\t\tnow.getTime() - this.lastRequestTime.getTime() < 5000; /* ms */\n\t\treturn tooFast;\n\t}\n\n\tupdateLastRequest(now: Date) {\n\t\tthis.lastRequestTime = now;\n\t}\n\n\t/// Allow faster requests\n\tallowFastRequest() {\n\t\tthis.updateLastRequest(undefined);\n\t}\n\n\tisReadyToDraw(): boolean {\n\t\treturn !!this.image;\n\t}\n}\n\ntype AfterFirstTileTask = () => void;\n\nclass TileManager {\n\tprivate static _docLayer: any;\n\tprivate static _zoom: number;\n\tprivate static _preFetchPart: number;\n\tprivate static _preFetchMode: number;\n\tprivate static _hasEditPerm: boolean;\n\tprivate static _pixelBounds: any;\n\tprivate static _splitPos: any;\n\tprivate static _borders: any;\n\tprivate static _cumTileCount: number;\n\tprivate static _preFetchIdle: any;\n\tprivate static _tilesPreFetcher: any;\n\tprivate static _partTilePreFetcher: any;\n\tprivate static _adjacentTilePreFetcher: any;\n\tprivate static inTransaction: number = 0;\n\tprivate static pendingTransactions: any = [[]];\n\tprivate static pendingDeltas: any = [];\n\tprivate static worker: any;\n\tprivate static nullDeltaUpdate = 0;\n\tprivate static queuedProcessed: any = [];\n\tprivate static fetchKeyframeQueue: any = []; // Queue of tiles which were GC'd earlier than coolwsd expected\n\tprivate static emptyTilesCount: number = 0;\n\tprivate static debugDeltas: boolean = false;\n\tprivate static debugDeltasDetail: boolean = false;\n\tprivate static tiles: Map<string, Tile> = new Map(); // stores all tiles, keyed by coordinates, and cached, compressed deltas\n\tprivate static tileBitmapList: Tile[] = []; // stores all tiles with bitmaps, sorted by distance from view(s)\n\tpublic static tileSize: number = 256;\n\n\t// The tile distance around the visible tile area that will be requested when updating\n\tprivate static visibleTileExpansion: number = 1;\n\t// The tile expansion ratio that the visible tile area will be expanded towards when\n\t// updating during scrolling\n\tprivate static directionalTileExpansion: number = 2;\n\tprivate static pausedForDehydration: boolean = false;\n\tprivate static shrinkCurrentId: any = null;\n\n\t//private static _debugTime: any = {}; Reserved for future.\n\n\t// Did we ever get a reply for a tilecombine request?\n\tprivate static receivedFirstTile: boolean = false;\n\n\t// Tasks to be executed after we got our first tile.\n\tprivate static afterFirstTileTasks: Array<AfterFirstTileTask> = [];\n\n\tpublic static initialize() {\n\t\tif (window.Worker && !(window as any).ThisIsAMobileApp) {\n\t\t\twindow.app.console.info('Creating CanvasTileWorker');\n\t\t\tthis.worker = new Worker(\n\t\t\t\tapp.LOUtil.getURL('/src/layer/tile/TileWorker.js'),\n\t\t\t);\n\t\t\tthis.worker.addEventListener('message', (e: any) =>\n\t\t\t\tthis.onWorkerMessage(e),\n\t\t\t);\n\t\t\tthis.worker.addEventListener('error', (e: any) => this.disableWorker(e));\n\t\t}\n\t}\n\n\tpublic static isReceivedFirstTile(): boolean {\n\t\treturn this.receivedFirstTile;\n\t}\n\n\tpublic static appendAfterFirstTileTask(task: AfterFirstTileTask): void {\n\t\tthis.afterFirstTileTasks.push(task);\n\t}\n\n\t/// Called before frame rendering to update details\n\tpublic static updateOverlayMessages() {\n\t\tif (!app.map._debug.tileDataOn) return;\n\n\t\tvar totalSize = 0;\n\t\tvar n_bitmaps = 0;\n\t\tvar n_current = 0;\n\t\tfor (const tile of this.tiles.values()) {\n\t\t\tif (tile.image) ++n_bitmaps;\n\t\t\tif (tile.distanceFromView === 0) ++n_current;\n\t\t\ttotalSize += tile.rawDeltas.reduce((a, c) => a + c.length, 0);\n\t\t}\n\t\tlet mismatch = '';\n\t\tif (n_bitmaps != this.tileBitmapList.length)\n\t\t\tmismatch = '\\nmismatch! ' + n_bitmaps + ' vs. ' + this.tileBitmapList;\n\n\t\tapp.map._debug.setOverlayMessage(\n\t\t\t'top-tileMem',\n\t\t\t'Tiles: ' +\n\t\t\t\tString(this.tiles.size).padStart(4, ' ') +\n\t\t\t\t', bitmaps: ' +\n\t\t\t\tString(n_bitmaps).padStart(3, ' ') +\n\t\t\t\t' current ' +\n\t\t\t\tString(n_current).padStart(3, ' ') +\n\t\t\t\t', Delta size ' +\n\t\t\t\tMath.ceil(totalSize / 1024) +\n\t\t\t\t'(KB)' +\n\t\t\t\t', Bitmap size: ' +\n\t\t\t\tMath.ceil(n_bitmaps / 2) +\n\t\t\t\t'(MB)' +\n\t\t\t\tmismatch,\n\t\t);\n\t}\n\n\tprivate static sortTileKeysByDistance() {\n\t\treturn Array.from(this.tiles.keys()).sort((a: any, b: any) => {\n\t\t\treturn (\n\t\t\t\tthis.tiles.get(b).distanceFromView - this.tiles.get(a).distanceFromView\n\t\t\t);\n\t\t});\n\t}\n\n\t// Set a high and low watermark of how many bitmaps we want\n\t// and expire old ones\n\tprivate static garbageCollect(discardAll = false) {\n\t\t// real RAM sizes for keyframes + delta cache in memory.\n\t\tlet highDeltaMemory = 120 * 1024 * 1024; // 120Mb\n\t\tlet lowDeltaMemory = 100 * 1024 * 1024; // 100Mb\n\t\t// number of tiles\n\t\tlet highTileCount = 2048;\n\t\tlet lowTileCount = highTileCount - 128;\n\n\t\tif (discardAll) {\n\t\t\thighDeltaMemory = 0;\n\t\t\tlowDeltaMemory = 0;\n\t\t\thighTileCount = 0;\n\t\t\tlowTileCount = 0;\n\t\t}\n\n\t\t/* uncomment to exercise me harder. */\n\t\t/* highDeltaMemory = 1024*1024; lowDeltaMemory = 1024*128;\n\t\t   highTileCount = 100; lowTileCount = 50; */\n\n\t\t// FIXME: could maintain this as we go rather than re-accounting it regularly.\n\t\tvar totalSize = 0;\n\t\tvar tileCount = 0;\n\t\tfor (const tile of this.tiles.values()) {\n\t\t\t// Don't count size of tiles that are visible. We don't have\n\t\t\t// a mechanism to immediately rehydrate tiles, so GC'ing visible tiles would\n\t\t\t// cause flickering.\n\t\t\tif (tile.distanceFromView !== 0) {\n\t\t\t\ttotalSize += tile.rawDeltas.reduce((a, c) => a + c.length, 0);\n\t\t\t\ttileCount++;\n\t\t\t}\n\t\t}\n\n\t\t// FIXME: We should consider also sorting keys by wireId -\n\t\t// which is monotonic server rendering ~time.\n\n\t\t// Try to re-use sorting whenever we can - it's expensive\n\t\tlet sortedKeys: string[] = [];\n\n\t\t// Trim memory down to size.\n\t\tif (totalSize > highDeltaMemory) {\n\t\t\tconst keys = this.sortTileKeysByDistance();\n\t\t\tsortedKeys = keys;\n\n\t\t\tfor (var i = 0; i < keys.length && totalSize > lowDeltaMemory; ++i) {\n\t\t\t\tconst key = keys[i];\n\t\t\t\tconst tile: Tile = this.tiles.get(key);\n\t\t\t\tif (tile.rawDeltas.length && tile.distanceFromView !== 0) {\n\t\t\t\t\tconst rawDeltaSize = tile.rawDeltas.reduce((a, c) => a + c.length, 0);\n\t\t\t\t\ttotalSize -= rawDeltaSize;\n\t\t\t\t\tif (this.debugDeltas)\n\t\t\t\t\t\twindow.app.console.log(\n\t\t\t\t\t\t\t'Reclaim delta ' + key + ' memory: ' + rawDeltaSize + ' bytes',\n\t\t\t\t\t\t);\n\t\t\t\t\tthis.reclaimTileBitmapMemory(tile);\n\t\t\t\t\ttile.rawDeltas = [];\n\t\t\t\t\ttile.forceKeyframe();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Trim the number of tiles down too ...\n\t\tif (tileCount > highTileCount) {\n\t\t\tvar keys = sortedKeys;\n\t\t\tif (!keys.length) keys = this.sortTileKeysByDistance();\n\n\t\t\tfor (var i = 0; i < keys.length - lowTileCount; ++i) {\n\t\t\t\tconst key = keys[i];\n\t\t\t\tconst tile: Tile = this.tiles.get(key);\n\t\t\t\tif (tile.distanceFromView !== 0) this.removeTile(keys[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\t// When a new bitmap is set on a tile we should see if we need to expire an old tile\n\tprivate static setBitmapOnTile(tile: Tile, bitmap: ImageBitmap) {\n\t\t// 4k screen -> 8Mpixel, each tile is 64kpixel uncompressed\n\t\tconst highNumBitmaps = 250; // ~60Mb.\n\n\t\tconst assertChecks = false;\n\n\t\tif (tile.image) {\n\t\t\t// fast case - no impact on count of tiles or bitmap list:\n\t\t\tif (assertChecks)\n\t\t\t\twindow.app.console.assert(!!this.tileBitmapList.find((i) => i == tile));\n\t\t\ttile.image.close();\n\t\t\ttile.image = bitmap;\n\t\t\treturn;\n\t\t}\n\n\t\tif (assertChecks)\n\t\t\twindow.app.console.assert(!this.tileBitmapList.find((i) => i == tile));\n\n\t\t// free the last tile if we need to\n\t\tif (this.tileBitmapList.length > highNumBitmaps)\n\t\t\tthis.reclaimTileBitmapMemory(\n\t\t\t\tthis.tileBitmapList[this.tileBitmapList.length - 1],\n\t\t\t);\n\n\t\t// current tiles are first:\n\t\tif (tile.distanceFromView === 0) this.tileBitmapList.unshift(tile);\n\t\telse {\n\t\t\tlet low = 0;\n\t\t\tlet high = this.tileBitmapList.length;\n\t\t\tconst distance = tile.distanceFromView;\n\n\t\t\t// sort on insertion\n\t\t\twhile (low < high) {\n\t\t\t\tconst mid = Math.floor((low + high) / 2);\n\t\t\t\tif (this.tileBitmapList[mid].distanceFromView < distance) low = mid + 1;\n\t\t\t\telse high = mid;\n\t\t\t}\n\t\t\tthis.tileBitmapList.splice(low, 0, tile);\n\t\t}\n\n\t\ttile.image = bitmap;\n\t}\n\n\tprivate static sortTileBitmapList() {\n\t\t// furthest away at the end\n\t\tthis.tileBitmapList.sort((a, b) => a.distanceFromView - b.distanceFromView);\n\t}\n\n\t// returns negative for not present, and otherwise proportion, low is low expiry.\n\tpublic static getExpiryFactor(tile: Tile) {\n\t\treturn (\n\t\t\tthis.tileBitmapList.indexOf(tile) /\n\t\t\tMath.max(this.tileBitmapList.length, 1)\n\t\t);\n\t}\n\n\tprivate static endTransactionHandleBitmaps(\n\t\tdeltas: any[],\n\t\tbitmaps: ImageBitmap[],\n\t) {\n\t\tconst visibleRanges = this.getVisibleRanges();\n\t\twhile (deltas.length) {\n\t\t\tconst delta = deltas.shift();\n\t\t\tconst bitmap = bitmaps.shift();\n\n\t\t\tconst tile = this.tiles.get(delta.key);\n\t\t\tif (!tile) continue;\n\n\t\t\tthis.setBitmapOnTile(tile, bitmap);\n\n\t\t\tif (tile.isReady()) this.tileReady(tile.coords, visibleRanges);\n\t\t}\n\n\t\tif (this.pendingTransactions.length === 0)\n\t\t\twindow.app.console.warn('Unexpectedly received decompressed deltas');\n\t\telse {\n\t\t\tconst callbacks = this.pendingTransactions.shift();\n\t\t\twhile (callbacks.length) callbacks.pop()();\n\t\t}\n\n\t\tif (this.pausedForDehydration) {\n\t\t\t// Check if all current tiles are accounted for and resume drawing if so.\n\t\t\tlet shouldUnpause = true;\n\t\t\tfor (const tile of this.tiles.values()) {\n\t\t\t\tif (tile.distanceFromView === 0 && !tile.isReady()) {\n\t\t\t\t\tshouldUnpause = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (shouldUnpause) {\n\t\t\t\tapp.sectionContainer.resumeDrawing();\n\t\t\t\tthis.pausedForDehydration = false;\n\t\t\t}\n\t\t}\n\n\t\tthis.garbageCollect();\n\t}\n\n\tprivate static createTileBitmap(\n\t\ttile: Tile,\n\t\tdelta: any,\n\t\tdeltas: any[],\n\t\tbitmaps: Promise<ImageBitmap>[],\n\t) {\n\t\tif (tile.imgDataCache) {\n\t\t\tbitmaps.push(\n\t\t\t\tcreateImageBitmap(tile.imgDataCache, {\n\t\t\t\t\tpremultiplyAlpha: 'none',\n\t\t\t\t}),\n\t\t\t);\n\t\t\tdeltas.push(delta);\n\t\t} else {\n\t\t\twindow.app.console.warn(\n\t\t\t\t'Unusual: Tried to create a tile bitmap with no image data',\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate static decompressPendingDeltas(message: string) {\n\t\tif (this.worker) {\n\t\t\tthis.worker.postMessage(\n\t\t\t\t{\n\t\t\t\t\tmessage: message,\n\t\t\t\t\tdeltas: this.pendingDeltas,\n\t\t\t\t\ttileSize: this.tileSize,\n\t\t\t\t\tcurrent: Array.from(this.tiles.keys()).filter(\n\t\t\t\t\t\t(key) => this.tiles.get(key).distanceFromView === 0,\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t\tthis.pendingDeltas.map((x: any) => x.rawDelta.buffer),\n\t\t\t);\n\t\t} else {\n\t\t\t// Synchronous path\n\t\t\tthis.onWorkerMessage({\n\t\t\t\tdata: {\n\t\t\t\t\tmessage: 'endTransaction',\n\t\t\t\t\tdeltas: this.pendingDeltas,\n\t\t\t\t\ttileSize: this.tileSize,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t\tthis.pendingDeltas.length = 0;\n\t}\n\n\tprivate static applyCompressedDelta(\n\t\ttile: Tile,\n\t\trawDeltas: RawDelta[],\n\t\tisKeyframe: any,\n\t\twireMessage: any,\n\t\tids: number[],\n\t) {\n\t\tif (this.inTransaction === 0)\n\t\t\twindow.app.console.warn(\n\t\t\t\t'applyCompressedDelta called outside of transaction',\n\t\t\t);\n\n\t\t// Concatenate the raw deltas for decompression. This also has the benefit of copying\n\t\t// them, which allows us to transfer full ownership of the memory to a worker.\n\t\tconst rawDelta = new Uint8Array(\n\t\t\trawDeltas.reduce((a, c) => a + c.length, 0),\n\t\t);\n\t\trawDeltas.reduce((a, c) => {\n\t\t\trawDelta.set(c.delta, a);\n\t\t\treturn a + c.length;\n\t\t}, 0);\n\n\t\tvar e = {\n\t\t\tkey: tile.coords.key(),\n\t\t\trawDelta: rawDelta,\n\t\t\tisKeyframe: isKeyframe,\n\t\t\twireMessage: wireMessage,\n\t\t\tids: ids,\n\t\t};\n\t\ttile.lastPendingId = ids[1];\n\n\t\tthis.pendingDeltas.push(e);\n\t}\n\n\tprivate static applyDeltaChunk(\n\t\timgData: any,\n\t\tdelta: any,\n\t\toldData: any,\n\t\twidth: any,\n\t\theight: any,\n\t) {\n\t\tvar pixSize = width * height * 4;\n\t\tif (this.debugDeltas)\n\t\t\twindow.app.console.log(\n\t\t\t\t'Applying a delta of length ' +\n\t\t\t\t\tdelta.length +\n\t\t\t\t\t' image size: ' +\n\t\t\t\t\tpixSize,\n\t\t\t);\n\t\t// + ' hex: ' + hex2string(delta, delta.length));\n\n\t\tvar offset = 0;\n\n\t\t// Green-tinge the old-Data ...\n\t\tif (0) {\n\t\t\tfor (var i = 0; i < pixSize; ++i) oldData[i * 4 + 1] = 128;\n\t\t}\n\n\t\t// wipe to grey.\n\t\tif (0) {\n\t\t\tfor (var i = 0; i < pixSize * 4; ++i) imgData.data[i] = 128;\n\t\t}\n\n\t\t// Apply delta.\n\t\tvar stop = false;\n\t\tfor (var i = 0; i < delta.length && !stop; ) {\n\t\t\tswitch (delta[i]) {\n\t\t\t\tcase 99: // 'c': // copy row\n\t\t\t\t\tvar count = delta[i + 1];\n\t\t\t\t\tvar srcRow = delta[i + 2];\n\t\t\t\t\tvar destRow = delta[i + 3];\n\t\t\t\t\tif (this.debugDeltasDetail)\n\t\t\t\t\t\twindow.app.console.log(\n\t\t\t\t\t\t\t'[' +\n\t\t\t\t\t\t\t\ti +\n\t\t\t\t\t\t\t\t']: copy ' +\n\t\t\t\t\t\t\t\tcount +\n\t\t\t\t\t\t\t\t' row(s) ' +\n\t\t\t\t\t\t\t\tsrcRow +\n\t\t\t\t\t\t\t\t' to ' +\n\t\t\t\t\t\t\t\tdestRow,\n\t\t\t\t\t\t);\n\t\t\t\t\ti += 4;\n\t\t\t\t\tfor (var cnt = 0; cnt < count; ++cnt) {\n\t\t\t\t\t\tvar src = (srcRow + cnt) * width * 4;\n\t\t\t\t\t\tvar dest = (destRow + cnt) * width * 4;\n\t\t\t\t\t\tfor (var j = 0; j < width * 4; ++j) {\n\t\t\t\t\t\t\timgData.data[dest + j] = oldData[src + j];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 100: // 'd': // new run\n\t\t\t\t\tdestRow = delta[i + 1];\n\t\t\t\t\tvar destCol = delta[i + 2];\n\t\t\t\t\tvar span = delta[i + 3];\n\t\t\t\t\toffset = destRow * width * 4 + destCol * 4;\n\t\t\t\t\tif (this.debugDeltasDetail)\n\t\t\t\t\t\twindow.app.console.log(\n\t\t\t\t\t\t\t'[' +\n\t\t\t\t\t\t\t\ti +\n\t\t\t\t\t\t\t\t']: apply new span of size ' +\n\t\t\t\t\t\t\t\tspan +\n\t\t\t\t\t\t\t\t' at pos ' +\n\t\t\t\t\t\t\t\tdestCol +\n\t\t\t\t\t\t\t\t', ' +\n\t\t\t\t\t\t\t\tdestRow +\n\t\t\t\t\t\t\t\t' into delta at byte: ' +\n\t\t\t\t\t\t\t\toffset,\n\t\t\t\t\t\t);\n\t\t\t\t\ti += 4;\n\t\t\t\t\tspan *= 4;\n\t\t\t\t\tfor (var j = 0; j < span; ++j) imgData.data[offset++] = delta[i + j];\n\t\t\t\t\ti += span;\n\t\t\t\t\t// imgData.data[offset - 2] = 256; // debug - blue terminator\n\t\t\t\t\tbreak;\n\t\t\t\tcase 116: // 't': // terminate delta new one next\n\t\t\t\t\tstop = true;\n\t\t\t\t\ti++;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.log('[' + i + ']: ERROR: Unknown delta code ' + delta[i]);\n\t\t\t\t\ti = delta.length;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn i;\n\t}\n\n\tprivate static checkTileMsgObject(msgObj: any) {\n\t\tif (\n\t\t\ttypeof msgObj !== 'object' ||\n\t\t\ttypeof msgObj.x !== 'number' ||\n\t\t\ttypeof msgObj.y !== 'number' ||\n\t\t\ttypeof msgObj.tileWidth !== 'number' ||\n\t\t\ttypeof msgObj.tileHeight !== 'number' ||\n\t\t\ttypeof msgObj.part !== 'number' ||\n\t\t\t(typeof msgObj.mode !== 'number' && typeof msgObj.mode !== 'undefined')\n\t\t) {\n\t\t\twindow.app.console.error(\n\t\t\t\t'Unexpected content in the parsed tile message.',\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate static checkDocLayer() {\n\t\tif (this._docLayer) return true;\n\t\telse if (!this._docLayer && app.map._docLayer) {\n\t\t\tthis._docLayer = app.map._docLayer;\n\t\t\treturn true;\n\t\t} else return false;\n\t}\n\n\tprivate static getMaxTileCountToPrefetch(tileSize: number): number {\n\t\tconst viewTileWidth = Math.floor(\n\t\t\t(this._pixelBounds.getSize().x + tileSize - 1) / tileSize,\n\t\t);\n\n\t\tconst viewTileHeight = Math.floor(\n\t\t\t(this._pixelBounds.getSize().y + tileSize - 1) / tileSize,\n\t\t);\n\n\t\t// Read-only views can much more agressively pre-load\n\t\treturn (\n\t\t\tMath.ceil((viewTileWidth * viewTileHeight) / 4) *\n\t\t\t(!this._hasEditPerm ? 4 : 1)\n\t\t);\n\t}\n\n\tprivate static updateProperties() {\n\t\tlet updated: boolean = false;\n\n\t\tconst zoom = app.map.getZoom();\n\t\tif (this._zoom !== zoom) {\n\t\t\tthis._zoom = zoom;\n\t\t\tupdated = true;\n\t\t}\n\n\t\tconst part = this._docLayer._selectedPart;\n\t\tif (this._preFetchPart !== part) {\n\t\t\tthis._preFetchPart = part;\n\t\t\tupdated = true;\n\t\t}\n\n\t\tconst mode = this._docLayer._selectedMode;\n\t\tif (this._preFetchMode !== mode) {\n\t\t\tthis._preFetchMode = mode;\n\t\t\tupdated = true;\n\t\t}\n\n\t\tconst hasEditPerm = app.map.isEditMode();\n\t\tif (this._hasEditPerm !== hasEditPerm) {\n\t\t\tthis._hasEditPerm = hasEditPerm;\n\t\t\tupdated = true;\n\t\t}\n\n\t\tconst center = app.map.getCenter();\n\t\tconst pixelBounds = app.map.getPixelBoundsCore(center, this._zoom);\n\t\tif (!this._pixelBounds || !pixelBounds.equals(this._pixelBounds)) {\n\t\t\tthis._pixelBounds = pixelBounds;\n\t\t\tupdated = true;\n\t\t}\n\n\t\tconst splitPanesContext = this._docLayer.getSplitPanesContext();\n\t\tconst splitPos = splitPanesContext\n\t\t\t? splitPanesContext.getSplitPos()\n\t\t\t: new L.Point(0, 0);\n\t\tif (!this._splitPos || !splitPos.equals(this._splitPos)) {\n\t\t\tthis._splitPos = splitPos;\n\t\t\tupdated = true;\n\t\t}\n\n\t\treturn updated;\n\t}\n\n\tprivate static computeBorders() {\n\t\t// Need to compute borders afresh and fetch tiles for them.\n\t\tthis._borders = []; // Stores borders for each split-pane.\n\t\tconst tileRanges = this.pxBoundsToTileRanges(this._pixelBounds);\n\n\t\tconst splitPanesContext = this._docLayer.getSplitPanesContext();\n\t\tconst paneStatusList = splitPanesContext\n\t\t\t? splitPanesContext.getPanesProperties()\n\t\t\t: [{ xFixed: false, yFixed: false }];\n\n\t\twindow.app.console.assert(\n\t\t\ttileRanges.length === paneStatusList.length,\n\t\t\t'tileRanges and paneStatusList should agree on the number of split-panes',\n\t\t);\n\n\t\tfor (let paneIdx = 0; paneIdx < tileRanges.length; ++paneIdx) {\n\t\t\tif (paneStatusList[paneIdx].xFixed && paneStatusList[paneIdx].yFixed) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst tileRange = tileRanges[paneIdx];\n\t\t\tconst paneBorder = new L.Bounds(\n\t\t\t\ttileRange.min.add(new L.Point(-1, -1)),\n\t\t\t\ttileRange.max.add(new L.Point(1, 1)),\n\t\t\t);\n\n\t\t\tthis._borders.push(\n\t\t\t\tnew PaneBorder(\n\t\t\t\t\tpaneBorder,\n\t\t\t\t\tpaneStatusList[paneIdx].xFixed,\n\t\t\t\t\tpaneStatusList[paneIdx].yFixed,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate static clearTilesPreFetcher() {\n\t\tif (this._tilesPreFetcher !== undefined) {\n\t\t\tclearInterval(this._tilesPreFetcher);\n\t\t\tthis._tilesPreFetcher = undefined;\n\t\t}\n\t}\n\n\tprivate static preFetchPartTiles(part: number, mode: number): void {\n\t\tthis.updateProperties();\n\n\t\tconst tileRange = this.pxBoundsToTileRange(this._pixelBounds);\n\t\tconst tileCombineQueue = [];\n\n\t\tfor (let j = tileRange.min.y; j <= tileRange.max.y; j++) {\n\t\t\tfor (let i = tileRange.min.x; i <= tileRange.max.x; i++) {\n\t\t\t\tconst coords = new TileCoordData(\n\t\t\t\t\ti * this.tileSize,\n\t\t\t\t\tj * this.tileSize,\n\t\t\t\t\tthis._zoom,\n\t\t\t\t\tpart,\n\t\t\t\t\tmode,\n\t\t\t\t);\n\n\t\t\t\tif (!this.isValidTile(coords)) continue;\n\n\t\t\t\tconst key = coords.key();\n\t\t\t\tif (!this.tileNeedsFetch(key)) continue;\n\n\t\t\t\ttileCombineQueue.push(coords);\n\t\t\t}\n\t\t}\n\n\t\tthis.sendTileCombineRequest(tileCombineQueue);\n\t}\n\n\tprivate static queueAcknowledgement(tileMsgObj: any) {\n\t\t// Queue acknowledgment, that the tile message arrived\n\t\tthis.queuedProcessed.push(+tileMsgObj.wireId);\n\t}\n\n\tprivate static twipsToCoords(twips: any) {\n\t\treturn new TileCoordData(\n\t\t\tMath.round(twips.x / twips.tileWidth) * this.tileSize,\n\t\t\tMath.round(twips.y / twips.tileHeight) * this.tileSize,\n\t\t);\n\t}\n\n\tprivate static tileMsgToCoords(tileMsg: any) {\n\t\tvar coords = this.twipsToCoords(tileMsg);\n\t\tcoords.z = tileMsg.zoom;\n\t\tcoords.part = tileMsg.part;\n\t\tcoords.mode = tileMsg.mode !== undefined ? tileMsg.mode : 0;\n\t\treturn coords;\n\t}\n\n\tprivate static checkPointers() {\n\t\tif (app.map && app.map._docLayer) return true;\n\t\telse return false;\n\t}\n\n\tprivate static hasPendingTransactions() {\n\t\treturn this.inTransaction > 0 || this.pendingTransactions.length;\n\t}\n\n\tprivate static beginTransaction() {\n\t\t++this.inTransaction;\n\t}\n\n\tprivate static getVisibleRanges(): Array<cool.Bounds> {\n\t\tvar zoom = Math.round(app.map.getZoom());\n\t\tvar pixelBounds = app.map.getPixelBoundsCore(app.map.getCenter(), zoom);\n\t\treturn app.map._docLayer._splitPanesContext\n\t\t\t? app.map._docLayer._splitPanesContext.getPxBoundList(pixelBounds)\n\t\t\t: [pixelBounds];\n\t}\n\n\tprivate static tileZoomIsCurrent(coords: TileCoordData) {\n\t\tconst scale = Math.pow(1.2, app.map.getZoom() - 10);\n\t\treturn Math.round(coords.scale * 1000) === Math.round(scale * 1000);\n\t}\n\n\tprivate static tileReady(\n\t\tcoords: TileCoordData,\n\t\tvisibleRanges: Array<cool.Bounds>,\n\t) {\n\t\tvar key = coords.key();\n\n\t\tconst tile: Tile = this.tiles.get(key);\n\t\tif (!tile) return;\n\n\t\t// Discard old raw deltas\n\t\tfor (let i = tile.rawDeltas.length - 1; i > 0; --i) {\n\t\t\tif (tile.rawDeltas[i].isKeyframe) {\n\t\t\t\ttile.rawDeltas = tile.rawDeltas.splice(i);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tvar emptyTilesCountChanged = false;\n\t\tif (this.emptyTilesCount > 0) {\n\t\t\tthis.emptyTilesCount -= 1;\n\t\t\temptyTilesCountChanged = true;\n\t\t}\n\n\t\tif (app.map && emptyTilesCountChanged && this.emptyTilesCount === 0) {\n\t\t\tapp.map.fire('statusindicator', { statusType: 'alltilesloaded' });\n\t\t}\n\n\t\t// Request a redraw if the tile is visible\n\t\tconst tileBounds = new L.Bounds(\n\t\t\t[tile.coords.x, tile.coords.y],\n\t\t\t[tile.coords.x + this.tileSize, tile.coords.y + this.tileSize],\n\t\t);\n\t\tif (tileBounds.intersectsAny(visibleRanges))\n\t\t\tapp.sectionContainer.requestReDraw();\n\t}\n\n\tprivate static createTile(coords: TileCoordData, key: string) {\n\t\tif (this.tiles.has(key)) {\n\t\t\tif (this.debugDeltas)\n\t\t\t\twindow.app.console.debug('Already created tile ' + key);\n\t\t\treturn this.tiles.get(key);\n\t\t}\n\t\tconst tile = new Tile(coords);\n\n\t\tthis.tiles.set(key, tile);\n\n\t\treturn tile;\n\t}\n\n\t// Make the given tile current and rehydrates if necessary. Returns true if the tile\n\t// has pending updates.\n\tprivate static makeTileCurrent(tile: Tile): boolean {\n\t\ttile.distanceFromView = 0;\n\t\ttile.allowFastRequest();\n\t\tthis.rehydrateTile(tile, false);\n\n\t\treturn !tile.isReady();\n\t}\n\n\tprivate static rehydrateTile(tile: Tile, wireMessage: boolean) {\n\t\tif (tile.needsRehydration()) {\n\t\t\t// Re-hydrate tile from cached raw deltas.\n\t\t\tif (this.debugDeltas)\n\t\t\t\twindow.app.console.log(\n\t\t\t\t\t'Restoring a tile from cached delta at ' + tile.coords.key(),\n\t\t\t\t);\n\n\t\t\t// Get the index of the last stored keyframe\n\t\t\t// FIXME: EcmaScript 2023 has Array.findLastIndex\n\t\t\tlet firstDelta = 0;\n\t\t\tfor (let i = tile.rawDeltas.length - 1; i > 0; --i) {\n\t\t\t\tif (tile.rawDeltas[i].isKeyframe) {\n\t\t\t\t\tfirstDelta = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Check if we have already decompressed data we can work from\n\t\t\tif (tile.lastPendingId > tile.rawDeltas[firstDelta].id) {\n\t\t\t\tconst continuedIdIndex = tile.rawDeltas.findIndex(\n\t\t\t\t\t(d) => d.id === tile.lastPendingId,\n\t\t\t\t);\n\t\t\t\tif (continuedIdIndex !== -1) firstDelta = continuedIdIndex + 1;\n\t\t\t}\n\t\t\tconst rawDeltas = tile.rawDeltas.slice(firstDelta);\n\t\t\tconst lastId = tile.rawDeltas[tile.rawDeltas.length - 1].id;\n\n\t\t\tthis.applyCompressedDelta(\n\t\t\t\ttile,\n\t\t\t\trawDeltas,\n\t\t\t\ttile.rawDeltas[firstDelta].isKeyframe,\n\t\t\t\twireMessage,\n\t\t\t\t[tile.rawDeltas[firstDelta].id, lastId],\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate static endTransaction(callback: any = null) {\n\t\tif (this.inTransaction === 0) {\n\t\t\twindow.app.console.error('Mismatched endTransaction');\n\t\t\treturn;\n\t\t}\n\n\t\t--this.inTransaction;\n\t\tif (callback)\n\t\t\tthis.pendingTransactions[this.pendingTransactions.length - 1].push(\n\t\t\t\tcallback,\n\t\t\t);\n\n\t\tif (this.inTransaction !== 0) return;\n\n\t\t// Short-circuit if there's nothing to decompress\n\t\tif (!this.pendingDeltas.length) {\n\t\t\tconst callbacks =\n\t\t\t\tthis.pendingTransactions[this.pendingTransactions.length - 1];\n\t\t\twhile (callbacks.length) callbacks.pop()();\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tthis.pendingTransactions.push([]);\n\t\t\tthis.decompressPendingDeltas('endTransaction');\n\t\t} catch (e) {\n\t\t\twindow.app.console.error('Failed to decompress pending deltas');\n\t\t\tthis.inTransaction = 0;\n\t\t\tthis.disableWorker(e);\n\t\t\tif (callback) callback();\n\t\t\treturn;\n\t\t}\n\t}\n\n\tprivate static disableWorker(e: any = null) {\n\t\tif (e) window.app.console.error('Worker-related error encountered', e);\n\t\tif (!this.worker) return;\n\n\t\twindow.app.console.warn('Disabling worker thread');\n\t\ttry {\n\t\t\tthis.worker.terminate();\n\t\t} catch (e) {\n\t\t\twindow.app.console.error('Error terminating worker thread', e);\n\t\t}\n\n\t\tthis.pendingDeltas.length = 0;\n\t\tthis.worker = null;\n\t\twhile (this.pendingTransactions.length) {\n\t\t\tconst callbacks = this.pendingTransactions.shift();\n\t\t\twhile (callbacks.length) callbacks.pop()();\n\t\t}\n\t\tthis.pendingTransactions.push([]);\n\t\tthis.redraw();\n\t}\n\n\tprivate static applyDelta(\n\t\ttile: Tile,\n\t\trawDeltas: any[],\n\t\tdeltas: any,\n\t\tkeyframeDeltaSize: any,\n\t\tkeyframeImage: any,\n\t\twireMessage: any,\n\t) {\n\t\tconst rawDeltaSize = tile.rawDeltas.reduce((a, c) => a + c.length, 0);\n\n\t\tif (this.debugDeltas) {\n\t\t\tconst hexStrings = [];\n\t\t\tfor (const rawDelta of rawDeltas)\n\t\t\t\thexStrings.push(hex2string(rawDelta, rawDelta.length));\n\t\t\tconst hexString = hexStrings.join('');\n\n\t\t\twindow.app.console.log(\n\t\t\t\t'Applying a raw ' +\n\t\t\t\t\t(keyframeDeltaSize ? 'keyframe' : 'delta') +\n\t\t\t\t\t' of length ' +\n\t\t\t\t\trawDeltaSize +\n\t\t\t\t\t(this.debugDeltasDetail ? ' hex: ' + hexString : ''),\n\t\t\t);\n\t\t}\n\n\t\t// if re-creating ImageData from rawDeltas, don't update counts\n\t\tif (wireMessage) {\n\t\t\tif (keyframeDeltaSize) {\n\t\t\t\ttile.loadCount++;\n\t\t\t\ttile.deltaCount = 0;\n\t\t\t\ttile.updateCount = 0;\n\t\t\t\tif (app.map._debug.tileDataOn) {\n\t\t\t\t\tapp.map._debug.tileDataAddLoad();\n\t\t\t\t}\n\t\t\t} else if (rawDeltas.length === 0) {\n\t\t\t\ttile.updateCount++;\n\t\t\t\tthis.nullDeltaUpdate++;\n\t\t\t\tif (app.map._docLayer._emptyDeltaDiv) {\n\t\t\t\t\tapp.map._docLayer._emptyDeltaDiv.innerText = this.nullDeltaUpdate;\n\t\t\t\t}\n\t\t\t\tif (app.map._debug.tileDataOn) {\n\t\t\t\t\tapp.map._debug.tileDataAddUpdate();\n\t\t\t\t}\n\t\t\t\treturn; // that was easy\n\t\t\t} else {\n\t\t\t\ttile.deltaCount++;\n\t\t\t\tif (app.map._debug.tileDataOn) {\n\t\t\t\t\tapp.map._debug.tileDataAddDelta();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// else - re-constituting from tile.rawData\n\n\t\tvar traceEvent = app.socket.createCompleteTraceEvent(\n\t\t\t'L.CanvasTileLayer.applyDelta',\n\t\t\t{ keyFrame: !!keyframeDeltaSize, length: rawDeltaSize },\n\t\t);\n\n\t\t// apply potentially several deltas in turn.\n\t\tvar i = 0;\n\n\t\t// If it's a new keyframe, use the given image and offset\n\t\tvar imgData = keyframeImage;\n\t\tvar offset = keyframeDeltaSize;\n\n\t\twhile (offset < deltas.length) {\n\t\t\tif (this.debugDeltas)\n\t\t\t\twindow.app.console.log(\n\t\t\t\t\t'Next delta at ' + offset + ' length ' + (deltas.length - offset),\n\t\t\t\t);\n\n\t\t\tvar delta = !offset ? deltas : deltas.subarray(offset);\n\n\t\t\t// Debugging paranoia: if we get this wrong bad things happen.\n\t\t\tif (delta.length >= this.tileSize * this.tileSize * 4) {\n\t\t\t\twindow.app.console.warn(\n\t\t\t\t\t'Unusual delta possibly mis-tagged, suspicious size vs. type ' +\n\t\t\t\t\t\tdelta.length +\n\t\t\t\t\t\t' vs. ' +\n\t\t\t\t\t\tthis.tileSize * this.tileSize * 4,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (!imgData)\n\t\t\t\t// no keyframe\n\t\t\t\timgData = tile.imgDataCache;\n\t\t\tif (!imgData) {\n\t\t\t\twindow.app.console.error(\n\t\t\t\t\t'Trying to apply delta with no ImageData cache',\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// copy old data to work from:\n\t\t\tvar oldData = new Uint8ClampedArray(imgData.data);\n\n\t\t\tvar len = this.applyDeltaChunk(\n\t\t\t\timgData,\n\t\t\t\tdelta,\n\t\t\t\toldData,\n\t\t\t\tthis.tileSize,\n\t\t\t\tthis.tileSize,\n\t\t\t);\n\t\t\tif (this.debugDeltas)\n\t\t\t\twindow.app.console.log(\n\t\t\t\t\t'Applied chunk ' +\n\t\t\t\t\t\ti++ +\n\t\t\t\t\t\t' of total size ' +\n\t\t\t\t\t\tdelta.length +\n\t\t\t\t\t\t' at stream offset ' +\n\t\t\t\t\t\toffset +\n\t\t\t\t\t\t' size ' +\n\t\t\t\t\t\tlen,\n\t\t\t\t);\n\n\t\t\toffset += len;\n\t\t}\n\n\t\t// hold onto the original imgData for reuse in the no keyframe case\n\t\ttile.imgDataCache = imgData;\n\n\t\tif (traceEvent) traceEvent.finish();\n\t}\n\n\tprivate static removeTile(key: string) {\n\t\tconst tile = this.tiles.get(key);\n\t\tif (!tile) return;\n\n\t\tif (!tile.hasContent() && this.emptyTilesCount > 0)\n\t\t\tthis.emptyTilesCount -= 1;\n\n\t\tthis.reclaimTileBitmapMemory(tile);\n\t\tthis.tiles.delete(key);\n\t}\n\n\tprivate static removeAllTiles() {\n\t\tthis.tileBitmapList = [];\n\t\tfor (const key of Array.from(this.tiles.keys())) {\n\t\t\tthis.removeTile(key);\n\t\t}\n\t}\n\n\tprivate static sortFileBasedQueue(queue: any) {\n\t\tfor (var i = 0; i < queue.length - 1; i++) {\n\t\t\tfor (var j = i + 1; j < queue.length; j++) {\n\t\t\t\tvar a = queue[i];\n\t\t\t\tvar b = queue[j];\n\t\t\t\tvar switchTiles = false;\n\n\t\t\t\tif (a.part === b.part) {\n\t\t\t\t\tif (a.y > b.y) {\n\t\t\t\t\t\tswitchTiles = true;\n\t\t\t\t\t} else if (a.y === b.y) {\n\t\t\t\t\t\tswitchTiles = a.x > b.x;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tswitchTiles = false;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tswitchTiles = a.part > b.part;\n\t\t\t\t}\n\n\t\t\t\tif (switchTiles) {\n\t\t\t\t\tvar temp = a;\n\t\t\t\t\tqueue[i] = b;\n\t\t\t\t\tqueue[j] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate static reclaimTileBitmapMemory(tile: Tile) {\n\t\tif (tile.image) {\n\t\t\ttile.image.close();\n\t\t\ttile.image = null;\n\t\t\ttile.imgDataCache = null;\n\n\t\t\ttile.decompressedId = 0;\n\t\t\ttile.lastPendingId = 0;\n\n\t\t\tconst n = this.tileBitmapList.findIndex((it) => it == tile);\n\t\t\tif (n !== -1) this.tileBitmapList.splice(n, 1);\n\t\t}\n\t}\n\n\tprivate static initPreFetchPartTiles() {\n\t\tif (!this.checkDocLayer()) return;\n\n\t\tconst targetPart = this._docLayer._selectedPart + app.map._partsDirection;\n\n\t\tif (targetPart < 0 || targetPart >= this._docLayer._parts) return;\n\n\t\t// check existing timeout and clear it before the new one\n\t\tif (this._partTilePreFetcher) clearTimeout(this._partTilePreFetcher);\n\n\t\tthis._partTilePreFetcher = setTimeout(() => {\n\t\t\tthis.preFetchPartTiles(targetPart, this._docLayer._selectedMode);\n\t\t}, 100);\n\t}\n\n\tprivate static initPreFetchAdjacentTiles() {\n\t\tif (!this.checkDocLayer()) return;\n\n\t\tthis.updateProperties();\n\n\t\tif (this._adjacentTilePreFetcher)\n\t\t\tclearTimeout(this._adjacentTilePreFetcher);\n\n\t\tthis._adjacentTilePreFetcher = setTimeout(\n\t\t\tfunction () {\n\t\t\t\t// Extend what we request to include enough to populate a full\n\t\t\t\t// scroll in the direction we were going after or before\n\t\t\t\t// the current viewport\n\t\t\t\t//\n\t\t\t\t// request separately from the current viewPort to get\n\t\t\t\t// those tiles first.\n\n\t\t\t\tconst direction = app.sectionContainer.getLastPanDirection();\n\n\t\t\t\t// Conservatively enlarge the area to round to more tiles:\n\t\t\t\tconst pixelTopLeft = this._pixelBounds.getTopLeft();\n\t\t\t\tpixelTopLeft.y =\n\t\t\t\t\tMath.floor(pixelTopLeft.y / this.tileSize) * this.tileSize;\n\t\t\t\tpixelTopLeft.y -= 1;\n\n\t\t\t\tconst pixelBottomRight = this._pixelBounds.getBottomRight();\n\t\t\t\tpixelBottomRight.y =\n\t\t\t\t\tMath.ceil(pixelBottomRight.y / this.tileSize) * this.tileSize;\n\t\t\t\tpixelBottomRight.y += 1;\n\n\t\t\t\tthis._pixelBounds = new L.Bounds(pixelTopLeft, pixelBottomRight);\n\n\t\t\t\t// Translate the area in the direction we're going.\n\t\t\t\tthis._pixelBounds.translate(\n\t\t\t\t\tthis._pixelBounds.getSize().x * direction[0],\n\t\t\t\t\tthis._pixelBounds.getSize().y * direction[1],\n\t\t\t\t);\n\n\t\t\t\tvar queue = this.getMissingTiles(this._pixelBounds, this._zoom);\n\n\t\t\t\tif (this._docLayer.isCalc() || queue.length === 0) {\n\t\t\t\t\t// pre-load more aggressively\n\t\t\t\t\tthis._pixelBounds.translate(\n\t\t\t\t\t\t(this._pixelBounds.getSize().x * direction[0]) / 2,\n\t\t\t\t\t\t(this._pixelBounds.getSize().y * direction[1]) / 2,\n\t\t\t\t\t);\n\t\t\t\t\tqueue = queue.concat(\n\t\t\t\t\t\tthis.getMissingTiles(this._pixelBounds, this._zoom),\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (queue.length !== 0) this.addTiles(queue);\n\t\t\t}.bind(this),\n\t\t\t50 /*ms*/,\n\t\t);\n\t}\n\n\tprivate static sendTileCombineRequest(\n\t\ttileCombineQueue: Array<TileCoordData>,\n\t) {\n\t\tif (tileCombineQueue.length <= 0) return;\n\n\t\t// Sort into buckets of consistent part & mode.\n\t\tconst partMode: any = {};\n\t\tfor (var i = 0; i < tileCombineQueue.length; ++i) {\n\t\t\tconst coords = tileCombineQueue[i];\n\t\t\t// mode is a small number - give it 8 bits\n\t\t\tconst pmKey = (coords.part << 8) + coords.mode;\n\t\t\tif (partMode[pmKey] === undefined) partMode[pmKey] = [];\n\t\t\tpartMode[pmKey].push(coords);\n\t\t}\n\n\t\tvar now = new Date();\n\n\t\tfor (var pmKey in partMode) {\n\t\t\t// no keys method\n\t\t\tvar partTileQueue = partMode[pmKey];\n\t\t\tvar part = partTileQueue[0].part;\n\t\t\tvar mode = partTileQueue[0].mode;\n\n\t\t\tvar tilePositionsX = [];\n\t\t\tvar tilePositionsY = [];\n\t\t\tvar tileWids = [];\n\n\t\t\tvar added: any = {}; // uniqify\n\t\t\tvar hasTiles = false;\n\t\t\tfor (var i = 0; i < partTileQueue.length; ++i) {\n\t\t\t\tvar coords = partTileQueue[i];\n\t\t\t\tvar key = coords.key();\n\t\t\t\tconst tile = this.tiles.get(key);\n\n\t\t\t\t// don't send lots of duplicate, fast tilecombines\n\t\t\t\tif (tile && tile.requestingTooFast(now)) continue;\n\n\t\t\t\t// request each tile just once in these tilecombines\n\t\t\t\tif (added[key]) continue;\n\t\t\t\tadded[key] = true;\n\t\t\t\thasTiles = true;\n\n\t\t\t\t// build parameters\n\t\t\t\ttileWids.push(tile && tile.wireId !== undefined ? tile.wireId : 0);\n\n\t\t\t\tconst twips = new L.Point(\n\t\t\t\t\tMath.floor(coords.x / this.tileSize) * app.tile.size.x,\n\t\t\t\t\tMath.floor(coords.y / this.tileSize) * app.tile.size.y,\n\t\t\t\t);\n\n\t\t\t\ttilePositionsX.push(twips.x);\n\t\t\t\ttilePositionsY.push(twips.y);\n\n\t\t\t\tif (tile) tile.updateLastRequest(now);\n\t\t\t}\n\n\t\t\tvar msg =\n\t\t\t\t'tilecombine ' +\n\t\t\t\t'nviewid=0 ' +\n\t\t\t\t'part=' +\n\t\t\t\tpart +\n\t\t\t\t' ' +\n\t\t\t\t(mode !== 0 ? 'mode=' + mode + ' ' : '') +\n\t\t\t\t'width=' +\n\t\t\t\tthis.tileSize +\n\t\t\t\t' ' +\n\t\t\t\t'height=' +\n\t\t\t\tthis.tileSize +\n\t\t\t\t' ' +\n\t\t\t\t'tileposx=' +\n\t\t\t\ttilePositionsX.join(',') +\n\t\t\t\t' ' +\n\t\t\t\t'tileposy=' +\n\t\t\t\ttilePositionsY.join(',') +\n\t\t\t\t' ' +\n\t\t\t\t'oldwid=' +\n\t\t\t\ttileWids.join(',') +\n\t\t\t\t' ' +\n\t\t\t\t'tilewidth=' +\n\t\t\t\tapp.tile.size.x +\n\t\t\t\t' ' +\n\t\t\t\t'tileheight=' +\n\t\t\t\tapp.tile.size.y;\n\t\t\tif (hasTiles) app.socket.sendMessage(msg, '');\n\t\t\telse window.app.console.log('Skipped empty (too fast) tilecombine');\n\t\t}\n\t}\n\n\tprivate static tileNeedsFetch(key: string) {\n\t\tconst tile: Tile = this.tiles.get(key);\n\t\treturn !tile || tile.needsFetch();\n\t}\n\n\tprivate static pxBoundsToTileRanges(bounds: any) {\n\t\tif (!this.checkPointers()) return null;\n\n\t\tif (!app.map._docLayer._splitPanesContext) {\n\t\t\treturn [this.pxBoundsToTileRange(bounds)];\n\t\t}\n\n\t\tvar boundList = app.map._docLayer._splitPanesContext.getPxBoundList(bounds);\n\t\treturn boundList.map((x: any) => this.pxBoundsToTileRange(x));\n\t}\n\n\tprivate static updateTileDistance(\n\t\ttile: Tile,\n\t\tzoom: number,\n\t\tvisibleRanges: any | null = null,\n\t) {\n\t\tif (\n\t\t\ttile.coords.z !== zoom ||\n\t\t\ttile.coords.part !== app.map._docLayer._selectedPart ||\n\t\t\ttile.coords.mode !== app.map._docLayer._selectedMode\n\t\t) {\n\t\t\ttile.distanceFromView = Number.MAX_SAFE_INTEGER;\n\t\t\treturn;\n\t\t}\n\t\tif (!visibleRanges) visibleRanges = this.getVisibleRanges();\n\t\tconst tileBounds = new L.Bounds(\n\t\t\t[tile.coords.x, tile.coords.y],\n\t\t\t[tile.coords.x + this.tileSize, tile.coords.y + this.tileSize],\n\t\t);\n\t\ttile.distanceFromView = tileBounds.distanceTo(visibleRanges[0]);\n\t\tfor (let i = 1; i < visibleRanges.length; ++i) {\n\t\t\tconst distance = tileBounds.distanceTo(visibleRanges[i]);\n\t\t\tif (distance < tile.distanceFromView) tile.distanceFromView = distance;\n\t\t}\n\t}\n\n\tprivate static getMissingTiles(\n\t\tpixelBounds: any,\n\t\tzoom: number,\n\t\tisCurrent: boolean = false,\n\t) {\n\t\tvar tileRanges = this.pxBoundsToTileRanges(pixelBounds);\n\t\tvar queue = [];\n\n\t\t// If we're looking for tiles for the current (visible) area, update tile distance.\n\t\tif (isCurrent) {\n\t\t\tconst currentBounds = app.map._docLayer._splitPanesContext\n\t\t\t\t? app.map._docLayer._splitPanesContext.getPxBoundList(pixelBounds)\n\t\t\t\t: [pixelBounds];\n\t\t\tfor (const tile of this.tiles.values()) {\n\t\t\t\tthis.updateTileDistance(tile, zoom, currentBounds);\n\t\t\t}\n\t\t\tthis.sortTileBitmapList();\n\t\t}\n\n\t\t// create a queue of coordinates to load tiles from. Rehydrate tiles if we're dealing\n\t\t// with the currently visible area.\n\t\tthis.beginTransaction();\n\t\tlet dehydratedVisible = false;\n\t\tfor (var rangeIdx = 0; rangeIdx < tileRanges.length; ++rangeIdx) {\n\t\t\t// Expand the 'current' area to add a small buffer around the visible area that\n\t\t\t// helps us avoid visible tile updates.\n\t\t\tconst tileRange =\n\t\t\t\tisCurrent && !this.shrinkCurrentId\n\t\t\t\t\t? this.expandTileRange(tileRanges[rangeIdx])\n\t\t\t\t\t: tileRanges[rangeIdx];\n\n\t\t\tfor (var j = tileRange.min.y; j <= tileRange.max.y; ++j) {\n\t\t\t\tfor (var i = tileRange.min.x; i <= tileRange.max.x; ++i) {\n\t\t\t\t\tvar coords = new TileCoordData(\n\t\t\t\t\t\ti * this.tileSize,\n\t\t\t\t\t\tj * this.tileSize,\n\t\t\t\t\t\tzoom,\n\t\t\t\t\t\tapp.map._docLayer._selectedPart,\n\t\t\t\t\t\tapp.map._docLayer._selectedMode,\n\t\t\t\t\t);\n\n\t\t\t\t\tif (!this.isValidTile(coords)) continue;\n\n\t\t\t\t\tvar key = coords.key();\n\t\t\t\t\tconst tile = this.tiles.get(key);\n\n\t\t\t\t\tif (!tile || tile.needsFetch()) queue.push(coords);\n\t\t\t\t\telse if (isCurrent && this.makeTileCurrent(tile)) {\n\t\t\t\t\t\tconst tileIsVisible =\n\t\t\t\t\t\t\tj >= tileRanges[rangeIdx].min.y &&\n\t\t\t\t\t\t\tj <= tileRanges[rangeIdx].max.y &&\n\t\t\t\t\t\t\ti >= tileRanges[rangeIdx].min.x &&\n\t\t\t\t\t\t\ti <= tileRanges[rangeIdx].max.x;\n\t\t\t\t\t\tif (tileIsVisible) dehydratedVisible = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// If we dehydrated a visible tile, wait for it to be ready before drawing\n\t\tif (dehydratedVisible && !this.pausedForDehydration) {\n\t\t\tapp.sectionContainer.pauseDrawing();\n\t\t\tthis.pausedForDehydration = true;\n\t\t}\n\t\tthis.endTransaction(null);\n\n\t\treturn queue;\n\t}\n\n\tprivate static removeIrrelevantsFromCoordsQueue(\n\t\tcoordsQueue: Array<TileCoordData>,\n\t) {\n\t\tconst part: number = app.map._docLayer._selectedPart;\n\t\tconst mode: number = app.map._docLayer._selectedMode;\n\n\t\tfor (let i = coordsQueue.length - 1; i > 0; i--) {\n\t\t\tif (\n\t\t\t\tcoordsQueue[i].part !== part ||\n\t\t\t\tcoordsQueue[i].mode !== mode ||\n\t\t\t\t!this.tileNeedsFetch(coordsQueue[i].key())\n\t\t\t) {\n\t\t\t\tcoordsQueue.splice(i, 1);\n\t\t\t} else if (app.map._docLayer._moveInProgress) {\n\t\t\t\t// While we are actively scrolling, filter out duplicate\n\t\t\t\t// (still) missing tiles requests during the scroll.\n\t\t\t\tif (app.map._docLayer._moveTileRequests.includes(coordsQueue[i].key()))\n\t\t\t\t\tcoordsQueue.splice(i, 1);\n\t\t\t\telse app.map._docLayer._moveTileRequests.push(coordsQueue[i].key());\n\t\t\t}\n\t\t}\n\t}\n\n\t// create tiles if needed for queued coordinates, and build a\n\t// tilecombined request for any tiles we need to fetch.\n\tprivate static addTiles(\n\t\tcoordsQueue: Array<TileCoordData>,\n\t\tisCurrent: boolean = false,\n\t) {\n\t\t// Remove irrelevant tiles from the queue earlier.\n\t\tthis.removeIrrelevantsFromCoordsQueue(coordsQueue);\n\n\t\t// If these aren't current tiles, calculate the visible ranges to update tile distance.\n\t\tconst visibleRanges = isCurrent ? null : this.getVisibleRanges();\n\t\tconst zoom = Math.round(app.map.getZoom());\n\n\t\t// Ensure tiles exist for requested coordinates\n\t\tfor (let i = 0; i < coordsQueue.length; i++) {\n\t\t\tconst key = coordsQueue[i].key();\n\t\t\tlet tile: Tile = this.tiles.get(key);\n\n\t\t\tif (!tile) {\n\t\t\t\ttile = this.createTile(coordsQueue[i], key);\n\n\t\t\t\t// Newly created tiles have a distance of zero, which means they're current.\n\t\t\t\tif (!isCurrent) this.updateTileDistance(tile, zoom, visibleRanges);\n\t\t\t}\n\t\t}\n\n\t\t// sort the tiles by the rows\n\t\tcoordsQueue.sort(function (a, b) {\n\t\t\tif (a.y !== b.y) return a.y - b.y;\n\t\t\telse return a.x - b.x;\n\t\t});\n\n\t\t// try group the tiles into rectangular areas\n\t\tconst rectangles = [];\n\t\twhile (coordsQueue.length > 0) {\n\t\t\tconst coords: TileCoordData = coordsQueue[0];\n\n\t\t\tconst rectQueue: Array<TileCoordData> = [coords];\n\t\t\tconst bound = coords.getPos(); // L.Point\n\n\t\t\t// remove it\n\t\t\tcoordsQueue.splice(0, 1);\n\n\t\t\t// find the close ones\n\t\t\tlet rowLocked = false;\n\t\t\tlet hasHole = false;\n\t\t\tlet i = 0;\n\t\t\twhile (i < coordsQueue.length) {\n\t\t\t\tconst current: TileCoordData = coordsQueue[i];\n\n\t\t\t\t// extend the bound vertically if possible (so far it was continuous)\n\t\t\t\tif (!hasHole && current.y === bound.y + this.tileSize) {\n\t\t\t\t\trowLocked = true;\n\t\t\t\t\tbound.y += this.tileSize;\n\t\t\t\t}\n\n\t\t\t\tif (current.y > bound.y) break;\n\n\t\t\t\tif (!rowLocked) {\n\t\t\t\t\tif (current.y === bound.y && current.x === bound.x + this.tileSize) {\n\t\t\t\t\t\t// extend the bound horizontally\n\t\t\t\t\t\tbound.x += this.tileSize;\n\t\t\t\t\t\trectQueue.push(current);\n\t\t\t\t\t\tcoordsQueue.splice(i, 1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// ignore the rest of the row\n\t\t\t\t\t\trowLocked = true;\n\t\t\t\t\t\t++i;\n\t\t\t\t\t}\n\t\t\t\t} else if (current.x <= bound.x && current.y <= bound.y) {\n\t\t\t\t\t// we are inside the bound\n\t\t\t\t\trectQueue.push(current);\n\t\t\t\t\tcoordsQueue.splice(i, 1);\n\t\t\t\t} else {\n\t\t\t\t\t// ignore this one, but there still may be other tiles\n\t\t\t\t\thasHole = true;\n\t\t\t\t\t++i;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\trectangles.push(rectQueue);\n\t\t}\n\n\t\tfor (let r = 0; r < rectangles.length; ++r)\n\t\t\tthis.sendTileCombineRequest(rectangles[r]);\n\n\t\tif (\n\t\t\tapp.map._docLayer._docType === 'presentation' ||\n\t\t\tapp.map._docLayer._docType === 'drawing'\n\t\t)\n\t\t\tthis.initPreFetchPartTiles();\n\t}\n\n\tpublic static refreshTilesInBackground() {\n\t\tfor (const tile of this.tiles.values()) {\n\t\t\ttile.forceKeyframe();\n\t\t}\n\t}\n\n\tpublic static setDebugDeltas(state: boolean) {\n\t\tthis.debugDeltas = state;\n\t\tthis.debugDeltasDetail = state;\n\t}\n\n\tpublic static get(key: string): Tile {\n\t\treturn this.tiles.get(key);\n\t}\n\n\tprivate static pixelCoordsToTwipTileBounds(coords: TileCoordData): number[] {\n\t\t// We need to calculate pixelsToTwips for the scale of this tile. 15 is the ratio between pixels and twips when the scale is 1.\n\t\tconst pixelsToTwipsForTile = 15 / app.dpiScale / coords.scale;\n\t\tconst x = coords.x * pixelsToTwipsForTile;\n\t\tconst y = coords.y * pixelsToTwipsForTile;\n\t\tconst width = app.tile.size.pX * pixelsToTwipsForTile;\n\t\tconst height = app.tile.size.pY * pixelsToTwipsForTile;\n\n\t\treturn [x, y, width, height];\n\t}\n\n\tpublic static overlapInvalidatedRectangleWithView(\n\t\tpart: number,\n\t\tmode: number,\n\t\twireId: number,\n\t\tinvalidatedRectangle: cool.SimpleRectangle,\n\t\ttextMsg: string,\n\t) {\n\t\tlet needsNewTiles = false;\n\t\tconst calc = app.map._docLayer.isCalc();\n\n\t\tthis.tiles.forEach((tile, key) => {\n\t\t\tconst coords: TileCoordData = tile.coords;\n\t\t\tconst tileRectangle = this.pixelCoordsToTwipTileBounds(coords);\n\n\t\t\tif (\n\t\t\t\tcoords.part === part &&\n\t\t\t\tcoords.mode === mode &&\n\t\t\t\t(invalidatedRectangle.intersectsRectangle(tileRectangle) ||\n\t\t\t\t\t(calc && !this.tileZoomIsCurrent(coords))) // In calc, we invalidate all tiles with different zoom levels.\n\t\t\t) {\n\t\t\t\tif (tile.distanceFromView === 0) needsNewTiles = true;\n\n\t\t\t\tthis.invalidateTile(key, wireId);\n\t\t\t}\n\t\t});\n\n\t\tif (\n\t\t\tapp.map._docLayer._debug.tileInvalidationsOn &&\n\t\t\tpart === app.map._docLayer._selectedPart\n\t\t) {\n\t\t\tapp.map._docLayer._debug.addTileInvalidationRectangle(\n\t\t\t\tinvalidatedRectangle.toArray(),\n\t\t\t\ttextMsg,\n\t\t\t);\n\n\t\t\tif (needsNewTiles && mode === app.map._docLayer._selectedMode)\n\t\t\t\tapp.map._docLayer._debug.addTileInvalidationMessage(textMsg);\n\t\t}\n\t}\n\n\tpublic static resetPreFetching(resetBorder: boolean) {\n\t\tif (!this.checkDocLayer()) return;\n\n\t\tthis.clearPreFetch();\n\n\t\tif (resetBorder) this._borders = undefined;\n\n\t\tvar interval = 250;\n\t\tvar idleTime = 750;\n\t\tthis._preFetchPart = this._docLayer._selectedPart;\n\t\tthis._preFetchMode = this._docLayer._selectedMode;\n\t\tthis._preFetchIdle = setTimeout(\n\t\t\tL.bind(function () {\n\t\t\t\tthis._tilesPreFetcher = setInterval(\n\t\t\t\t\tL.bind(this.preFetchTiles, this),\n\t\t\t\t\tinterval,\n\t\t\t\t);\n\t\t\t\tthis._preFetchIdle = undefined;\n\t\t\t\tthis._cumTileCount = 0;\n\t\t\t}, this),\n\t\t\tidleTime,\n\t\t);\n\t}\n\n\tpublic static clearPreFetch() {\n\t\tif (!this.checkDocLayer()) return;\n\n\t\tthis.clearTilesPreFetcher();\n\t\tif (this._preFetchIdle !== undefined) {\n\t\t\tclearTimeout(this._preFetchIdle);\n\t\t\tthis._preFetchIdle = undefined;\n\t\t}\n\t}\n\n\tpublic static preFetchTiles(forceBorderCalc: boolean) {\n\t\tif (!this.checkDocLayer()) return;\n\n\t\tif (app.file.fileBasedView && this._docLayer) this.updateFileBasedView();\n\n\t\tif (\n\t\t\t!this._docLayer ||\n\t\t\tthis.emptyTilesCount > 0 ||\n\t\t\t!this._docLayer._canonicalIdInitialized\n\t\t)\n\t\t\treturn;\n\n\t\tconst propertiesUpdated = this.updateProperties();\n\t\tconst tileSize = this.tileSize;\n\t\tconst maxTilesToFetch = this.getMaxTileCountToPrefetch(tileSize);\n\t\tconst maxBorderWidth = !this._hasEditPerm ? 40 : 10;\n\n\t\t// FIXME: when we are actually editing we should pre-load much less until we stop\n\t\t/*\t\tif (isActiveEditing()) {\n\t\t\tmaxTilesToFetch = 5;\n\t\t\tmaxBorderWidth = 2;\n\t\t} */\n\n\t\tif (\n\t\t\tpropertiesUpdated ||\n\t\t\tforceBorderCalc ||\n\t\t\t!this._borders ||\n\t\t\tthis._borders.length === 0\n\t\t)\n\t\t\tthis.computeBorders();\n\n\t\tvar finalQueue = [];\n\t\tconst visitedTiles: any = {};\n\n\t\tvar validTileRange = new L.Bounds(\n\t\t\tnew L.Point(0, 0),\n\t\t\tnew L.Point(\n\t\t\t\tMath.floor((app.file.size.x - 1) / app.tile.size.x),\n\t\t\t\tMath.floor((app.file.size.y - 1) / app.tile.size.y),\n\t\t\t),\n\t\t);\n\n\t\tvar tilesToFetch = maxTilesToFetch; // total tile limit per call of preFetchTiles()\n\t\tvar doneAllPanes = true;\n\n\t\tfor (let paneIdx = 0; paneIdx < this._borders.length; ++paneIdx) {\n\t\t\tconst queue = [];\n\t\t\tconst paneBorder = this._borders[paneIdx];\n\t\t\tconst borderBounds = paneBorder.getBorderBounds();\n\t\t\tconst paneXFixed = paneBorder.isXFixed();\n\t\t\tconst paneYFixed = paneBorder.isYFixed();\n\n\t\t\twhile (tilesToFetch > 0 && paneBorder.getBorderIndex() < maxBorderWidth) {\n\t\t\t\tconst clampedBorder = validTileRange.clamp(borderBounds);\n\t\t\t\tconst fetchTopBorder =\n\t\t\t\t\t!paneYFixed && borderBounds.min.y === clampedBorder.min.y;\n\t\t\t\tconst fetchBottomBorder =\n\t\t\t\t\t!paneYFixed && borderBounds.max.y === clampedBorder.max.y;\n\t\t\t\tconst fetchLeftBorder =\n\t\t\t\t\t!paneXFixed && borderBounds.min.x === clampedBorder.min.x;\n\t\t\t\tconst fetchRightBorder =\n\t\t\t\t\t!paneXFixed && borderBounds.max.x === clampedBorder.max.x;\n\n\t\t\t\tif (\n\t\t\t\t\t!fetchLeftBorder &&\n\t\t\t\t\t!fetchRightBorder &&\n\t\t\t\t\t!fetchTopBorder &&\n\t\t\t\t\t!fetchBottomBorder\n\t\t\t\t) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (fetchBottomBorder) {\n\t\t\t\t\tfor (var i = clampedBorder.min.x; i <= clampedBorder.max.x; i++) {\n\t\t\t\t\t\t// tiles below the visible area\n\t\t\t\t\t\tqueue.push(\n\t\t\t\t\t\t\tnew TileCoordData(\n\t\t\t\t\t\t\t\ti * tileSize,\n\t\t\t\t\t\t\t\tborderBounds.max.y * tileSize,\n\t\t\t\t\t\t\t\tthis._zoom,\n\t\t\t\t\t\t\t\tthis._preFetchPart,\n\t\t\t\t\t\t\t\tthis._preFetchMode,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (fetchTopBorder) {\n\t\t\t\t\tfor (i = clampedBorder.min.x; i <= clampedBorder.max.x; i++) {\n\t\t\t\t\t\t// tiles above the visible area\n\t\t\t\t\t\tqueue.push(\n\t\t\t\t\t\t\tnew TileCoordData(\n\t\t\t\t\t\t\t\ti * tileSize,\n\t\t\t\t\t\t\t\tborderBounds.min.y * tileSize,\n\t\t\t\t\t\t\t\tthis._zoom,\n\t\t\t\t\t\t\t\tthis._preFetchPart,\n\t\t\t\t\t\t\t\tthis._preFetchMode,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (fetchRightBorder) {\n\t\t\t\t\tfor (i = clampedBorder.min.y; i <= clampedBorder.max.y; i++) {\n\t\t\t\t\t\t// tiles to the right of the visible area\n\t\t\t\t\t\tqueue.push(\n\t\t\t\t\t\t\tnew TileCoordData(\n\t\t\t\t\t\t\t\tborderBounds.max.x * tileSize,\n\t\t\t\t\t\t\t\ti * tileSize,\n\t\t\t\t\t\t\t\tthis._zoom,\n\t\t\t\t\t\t\t\tthis._preFetchPart,\n\t\t\t\t\t\t\t\tthis._preFetchMode,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (fetchLeftBorder) {\n\t\t\t\t\tfor (i = clampedBorder.min.y; i <= clampedBorder.max.y; i++) {\n\t\t\t\t\t\t// tiles to the left of the visible area\n\t\t\t\t\t\tqueue.push(\n\t\t\t\t\t\t\tnew TileCoordData(\n\t\t\t\t\t\t\t\tborderBounds.min.x * tileSize,\n\t\t\t\t\t\t\t\ti * tileSize,\n\t\t\t\t\t\t\t\tthis._zoom,\n\t\t\t\t\t\t\t\tthis._preFetchPart,\n\t\t\t\t\t\t\t\tthis._preFetchMode,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar tilesPending = false;\n\t\t\t\tfor (i = 0; i < queue.length; i++) {\n\t\t\t\t\tconst coords = queue[i];\n\t\t\t\t\tconst key: string = coords.key();\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tvisitedTiles[key] ||\n\t\t\t\t\t\t!this.isValidTile(coords) ||\n\t\t\t\t\t\t!this.tileNeedsFetch(key)\n\t\t\t\t\t)\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\tif (tilesToFetch > 0) {\n\t\t\t\t\t\tvisitedTiles[key] = true;\n\t\t\t\t\t\tfinalQueue.push(coords);\n\t\t\t\t\t\ttilesToFetch -= 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttilesPending = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (tilesPending) {\n\t\t\t\t\t// don't update the border as there are still\n\t\t\t\t\t// some tiles to be fetched\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (!paneXFixed) {\n\t\t\t\t\tif (borderBounds.min.x > 0) {\n\t\t\t\t\t\tborderBounds.min.x -= 1;\n\t\t\t\t\t}\n\t\t\t\t\tif (borderBounds.max.x < validTileRange.max.x) {\n\t\t\t\t\t\tborderBounds.max.x += 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!paneYFixed) {\n\t\t\t\t\tif (borderBounds.min.y > 0) {\n\t\t\t\t\t\tborderBounds.min.y -= 1;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (borderBounds.max.y < validTileRange.max.y) {\n\t\t\t\t\t\tborderBounds.max.y += 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tpaneBorder.incBorderIndex();\n\t\t\t} // border width loop end\n\n\t\t\tif (paneBorder.getBorderIndex() < maxBorderWidth) {\n\t\t\t\tdoneAllPanes = false;\n\t\t\t}\n\t\t} // pane loop end\n\n\t\twindow.app.console.assert(\n\t\t\tfinalQueue.length <= maxTilesToFetch,\n\t\t\t'finalQueue length(' +\n\t\t\t\tfinalQueue.length +\n\t\t\t\t') exceeded maxTilesToFetch(' +\n\t\t\t\tmaxTilesToFetch +\n\t\t\t\t')',\n\t\t);\n\n\t\tvar tilesRequested = false;\n\n\t\tif (finalQueue.length > 0) {\n\t\t\tthis._cumTileCount += finalQueue.length;\n\t\t\tthis.addTiles(finalQueue);\n\t\t\ttilesRequested = true;\n\t\t}\n\n\t\tif (!tilesRequested || doneAllPanes) {\n\t\t\tthis.clearTilesPreFetcher();\n\t\t\tthis._borders = undefined;\n\t\t}\n\t}\n\n\tpublic static sendProcessedResponse() {\n\t\tvar toSend = this.queuedProcessed;\n\t\tthis.queuedProcessed = [];\n\t\tif (toSend.length > 0)\n\t\t\tapp.socket.sendMessage('tileprocessed wids=' + toSend.join(','));\n\t\tif (this.fetchKeyframeQueue.length > 0) {\n\t\t\twindow.app.console.warn('re-fetching prematurely GCd keyframes');\n\t\t\tthis.sendTileCombineRequest(this.fetchKeyframeQueue);\n\t\t\tthis.fetchKeyframeQueue = [];\n\t\t}\n\t}\n\n\tpublic static onTileMsg(textMsg: string, img: any) {\n\t\tvar tileMsgObj: any = app.socket.parseServerCmd(textMsg);\n\t\tthis.checkTileMsgObject(tileMsgObj);\n\n\t\tif (app.map._debug.tileDataOn) {\n\t\t\tapp.map._debug.tileDataAddMessage();\n\t\t}\n\n\t\t// a rather different code-path with a png; should have its own msg perhaps.\n\t\tif (tileMsgObj.id !== undefined) {\n\t\t\tapp.map.fire('tilepreview', {\n\t\t\t\ttile: img,\n\t\t\t\tid: tileMsgObj.id,\n\t\t\t\twidth: tileMsgObj.width,\n\t\t\t\theight: tileMsgObj.height,\n\t\t\t\tpart: tileMsgObj.part,\n\t\t\t\tmode: tileMsgObj.mode !== undefined ? tileMsgObj.mode : 0,\n\t\t\t\tdocType: app.map._docLayer._docType,\n\t\t\t});\n\t\t\tthis.queueAcknowledgement(tileMsgObj);\n\t\t\treturn;\n\t\t}\n\n\t\tvar coords = this.tileMsgToCoords(tileMsgObj);\n\t\tvar key = coords.key();\n\t\tlet tile = this.tiles.get(key);\n\n\t\tif (!tile) {\n\t\t\ttile = this.createTile(coords, key);\n\t\t\tthis.updateTileDistance(tile, Math.round(app.map.getZoom()));\n\t\t}\n\n\t\ttile.viewId = tileMsgObj.nviewid;\n\t\t// update monotonic timestamp\n\t\ttile.wireId = +tileMsgObj.wireId;\n\t\tif (tile.invalidFrom == tile.wireId)\n\t\t\twindow.app.console.debug('Nasty - updated wireId matches old one');\n\n\t\tvar hasContent = img != null && img.rawData.length > 0;\n\n\t\t// obscure case: we could have garbage collected the\n\t\t// keyframe content in JS but coolwsd still thinks we have\n\t\t// it and now we just have a delta with nothing to apply\n\t\t// it to; if so, mark it bad to re-fetch.\n\t\tif (img && !img.isKeyframe && !tile.hasKeyframe()) {\n\t\t\twindow.app.console.debug(\n\t\t\t\t'Unusual: Delta sent - but we have no keyframe for ' + key,\n\t\t\t);\n\t\t\t// force keyframe\n\t\t\ttile.forceKeyframe();\n\t\t\ttile.gcErrors++;\n\n\t\t\t// queue a later fetch of this and any other\n\t\t\t// rogue tiles in this state\n\t\t\tthis.fetchKeyframeQueue.push(coords);\n\n\t\t\thasContent = false;\n\t\t}\n\n\t\t// updates don't need more chattiness with a tileprocessed\n\t\tif (hasContent) {\n\t\t\t// Store the compressed tile data for later decompression and\n\t\t\t// display. This lets us store many more tiles than if we were\n\t\t\t// to only store the decompressed tile data.\n\t\t\tconst rawDelta = new RawDelta(\n\t\t\t\timg.rawData,\n\t\t\t\t++tile.deltaId,\n\t\t\t\timg.isKeyframe,\n\t\t\t);\n\t\t\tif (img.isKeyframe || tile.hasKeyframe()) {\n\t\t\t\ttile.rawDeltas.push(rawDelta);\n\t\t\t} else {\n\t\t\t\twindow.app.console.warn(\n\t\t\t\t\t'Unusual: attempt to append a delta when we have no keyframe.',\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// Only decompress deltas for tiles that are current. This stops\n\t\t// prefetching from blowing past GC limits.\n\t\tif (tile.distanceFromView === 0) this.rehydrateTile(tile, true);\n\n\t\tthis.queueAcknowledgement(tileMsgObj);\n\n\t\tif (!this.receivedFirstTile) {\n\t\t\t// This was the first tile, exec the queued tasks.\n\t\t\tthis.receivedFirstTile = true;\n\t\t\twhile (this.afterFirstTileTasks.length > 0) {\n\t\t\t\tconst task = this.afterFirstTileTasks.shift();\n\t\t\t\ttask();\n\t\t\t}\n\t\t}\n\t}\n\n\t// Returns a guess of how many tiles are yet to arrive\n\tpublic static predictTilesToSlurp() {\n\t\tif (!this.checkPointers()) return 0;\n\n\t\tvar size = app.map.getSize();\n\n\t\tif (size.x === 0 || size.y === 0) return 0;\n\n\t\tvar zoom = Math.round(app.map.getZoom());\n\t\tvar pixelBounds = app.map.getPixelBoundsCore(app.map.getCenter(), zoom);\n\n\t\tvar queue = this.getMissingTiles(pixelBounds, zoom);\n\n\t\treturn queue.length;\n\t}\n\n\tpublic static pruneTiles() {\n\t\t// update tile.distanceFromView for the view\n\t\tif (app.file.fileBasedView) this.updateFileBasedView(true);\n\n\t\tthis.garbageCollect();\n\t}\n\n\tpublic static discardAllCache() {\n\t\t// update tile.distanceFromView for the view\n\t\tif (app.file.fileBasedView) this.updateFileBasedView(true);\n\n\t\tthis.garbageCollect(true);\n\t}\n\n\tpublic static isValidTile(coords: TileCoordData) {\n\t\tif (coords.x < 0 || coords.y < 0) {\n\t\t\treturn false;\n\t\t} else if (\n\t\t\tcoords.x * app.pixelsToTwips > app.file.size.x ||\n\t\t\tcoords.y * app.pixelsToTwips > app.file.size.y\n\t\t) {\n\t\t\treturn false;\n\t\t} else return true;\n\t}\n\n\tpublic static redraw() {\n\t\tif (app.map) {\n\t\t\tthis.removeAllTiles();\n\t\t\tthis.update();\n\t\t}\n\t\treturn this;\n\t}\n\n\tpublic static update(center: any = null, zoom: number = null) {\n\t\tif (app.file.writer.multiPageView) return;\n\n\t\tconst map: any = app.map;\n\n\t\tif (\n\t\t\t!map ||\n\t\t\tapp.map._docLayer._documentInfo === '' ||\n\t\t\t!app.map._docLayer._canonicalIdInitialized\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Calc: do not set view area too early after load and before we get the cursor position.\n\t\tif (app.map._docLayer.isCalc() && !app.map._docLayer._gotFirstCellCursor)\n\t\t\treturn;\n\n\t\t// be sure canvas is initialized already and has the correct size.\n\t\tconst size: any = map.getSize();\n\t\tif (size.x === 0 || size.y === 0) {\n\t\t\tsetTimeout(\n\t\t\t\tfunction () {\n\t\t\t\t\tthis.update();\n\t\t\t\t}.bind(this),\n\t\t\t\t1,\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\t// If an update occurs while we're paused for dehydration, we haven't been able to\n\t\t// keep up with scrolling. In this case, we should stop expanding the current area\n\t\t// so that it takes less time to dehydrate it.\n\t\tif (this.pausedForDehydration) {\n\t\t\tif (this.shrinkCurrentId) clearTimeout(this.shrinkCurrentId);\n\t\t\tthis.shrinkCurrentId = setTimeout(() => {\n\t\t\t\tthis.shrinkCurrentId = null;\n\t\t\t}, 100);\n\t\t}\n\n\t\tif (app.file.fileBasedView) {\n\t\t\tthis.updateFileBasedView();\n\t\t\treturn;\n\t\t}\n\n\t\tif (!center) {\n\t\t\tcenter = map.getCenter();\n\t\t}\n\t\tif (!zoom) {\n\t\t\tzoom = Math.round(map.getZoom());\n\t\t}\n\n\t\tvar pixelBounds = map.getPixelBoundsCore(center, zoom);\n\t\tvar queue = this.getMissingTiles(pixelBounds, zoom, true);\n\n\t\tapp.map._docLayer._sendClientZoom();\n\t\tapp.map._docLayer._sendClientVisibleArea();\n\n\t\tif (queue.length !== 0) this.addTiles(queue, true);\n\n\t\tif (app.map._docLayer.isCalc() || app.map._docLayer.isWriter())\n\t\t\tthis.initPreFetchAdjacentTiles();\n\t}\n\n\tpublic static onWorkerMessage(e: any) {\n\t\tconst bitmaps: Promise<ImageBitmap>[] = [];\n\t\tconst pendingDeltas: any[] = [];\n\t\tswitch (e.data.message) {\n\t\t\tcase 'endTransaction':\n\t\t\t\tfor (const x of e.data.deltas) {\n\t\t\t\t\tconst tile = this.tiles.get(x.key);\n\n\t\t\t\t\tif (!tile) {\n\t\t\t\t\t\tif (this.debugDeltas)\n\t\t\t\t\t\t\twindow.app.console.warn(\n\t\t\t\t\t\t\t\t'Tile deleted during rawDelta decompression.',\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!x.deltas) {\n\t\t\t\t\t\t// This path is taken when this is called on the DOM thread (i.e. the worker\n\t\t\t\t\t\t// hasn't decompressed the raw delta)\n\t\t\t\t\t\tx.deltas = (window as any).fzstd.decompress(x.rawDelta);\n\t\t\t\t\t\tif (x.isKeyframe) {\n\t\t\t\t\t\t\tx.keyframeBuffer = new Uint8ClampedArray(\n\t\t\t\t\t\t\t\te.data.tileSize * e.data.tileSize * 4,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tx.keyframeDeltaSize = L.CanvasTileUtils.unrle(\n\t\t\t\t\t\t\t\tx.deltas,\n\t\t\t\t\t\t\t\te.data.tileSize,\n\t\t\t\t\t\t\t\te.data.tileSize,\n\t\t\t\t\t\t\t\tx.keyframeBuffer,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else x.keyframeDeltaSize = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet rawDeltas: any[] = [];\n\t\t\t\t\tconst firstDelta = tile.rawDeltas.findIndex((d) => d.id === x.ids[0]);\n\t\t\t\t\tconst lastDelta = tile.rawDeltas.findIndex((d) => d.id === x.ids[1]);\n\t\t\t\t\tif (firstDelta !== -1 && lastDelta !== -1)\n\t\t\t\t\t\trawDeltas = tile.rawDeltas.slice(firstDelta, lastDelta + 1);\n\t\t\t\t\telse\n\t\t\t\t\t\twindow.app.console.warn(\n\t\t\t\t\t\t\t'Unusual: Received unknown decompressed keyframe delta(s)',\n\t\t\t\t\t\t);\n\n\t\t\t\t\tlet keyframeImage = null;\n\t\t\t\t\tif (x.isKeyframe) {\n\t\t\t\t\t\tkeyframeImage = new ImageData(\n\t\t\t\t\t\t\tx.keyframeBuffer,\n\t\t\t\t\t\t\te.data.tileSize,\n\t\t\t\t\t\t\te.data.tileSize,\n\t\t\t\t\t\t);\n\t\t\t\t\t} else if (tile.decompressedId !== 0) {\n\t\t\t\t\t\tif (x.ids[0] !== tile.decompressedId + 1) {\n\t\t\t\t\t\t\twindow.app.console.warn(\n\t\t\t\t\t\t\t\t'Unusual: Received discontiguous decompressed delta',\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (this.debugDeltas)\n\t\t\t\t\t\t\twindow.app.console.warn(\n\t\t\t\t\t\t\t\t\"Decompressed delta received on GC'd tile\",\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.applyDelta(\n\t\t\t\t\t\ttile,\n\t\t\t\t\t\trawDeltas,\n\t\t\t\t\t\tx.deltas,\n\t\t\t\t\t\tx.keyframeDeltaSize,\n\t\t\t\t\t\tkeyframeImage,\n\t\t\t\t\t\tx.wireMessage,\n\t\t\t\t\t);\n\n\t\t\t\t\tthis.createTileBitmap(tile, x, pendingDeltas, bitmaps);\n\t\t\t\t\ttile.decompressedId = x.ids[1];\n\t\t\t\t}\n\n\t\t\t\tPromise.all(bitmaps).then((bitmaps) => {\n\t\t\t\t\tthis.endTransactionHandleBitmaps(pendingDeltas, bitmaps);\n\t\t\t\t});\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\twindow.app.console.error('Unrecognised message from worker');\n\t\t\t\tthis.disableWorker();\n\t\t}\n\t}\n\n\tpublic static updateOnChangePart() {\n\t\tif (!this.checkPointers() || app.map._docLayer._documentInfo === '') {\n\t\t\treturn;\n\t\t}\n\t\tvar key, coords;\n\t\tvar center = app.map.getCenter();\n\t\tvar zoom = Math.round(app.map.getZoom());\n\n\t\tvar pixelBounds = app.map.getPixelBoundsCore(center, zoom);\n\n\t\t// create a queue of coordinates to load tiles from\n\t\tconst queue = this.getMissingTiles(pixelBounds, zoom, true);\n\n\t\tif (queue.length !== 0) {\n\t\t\tfor (let i = 0; i < queue.length; i++) {\n\t\t\t\tcoords = queue[i];\n\t\t\t\tkey = coords.key();\n\t\t\t\tif (!this.tiles.has(key)) this.createTile(coords, key);\n\t\t\t}\n\n\t\t\tthis.sendTileCombineRequest(queue);\n\t\t}\n\t\tif (\n\t\t\tapp.map._docLayer._docType === 'presentation' ||\n\t\t\tapp.map._docLayer._docType === 'drawing'\n\t\t)\n\t\t\tthis.initPreFetchPartTiles();\n\t}\n\n\tpublic static expandTileRange(range: cool.Bounds): cool.Bounds {\n\t\tconst grow = this.visibleTileExpansion;\n\t\tconst direction = app.sectionContainer.getLastPanDirection();\n\t\tconst minOffset = new L.Point(\n\t\t\tgrow - grow * this.directionalTileExpansion * Math.min(0, direction[0]),\n\t\t\tgrow - grow * this.directionalTileExpansion * Math.min(0, direction[1]),\n\t\t);\n\t\tconst maxOffset = new L.Point(\n\t\t\tgrow + grow * this.directionalTileExpansion * Math.max(0, direction[0]),\n\t\t\tgrow + grow * this.directionalTileExpansion * Math.max(0, direction[1]),\n\t\t);\n\t\treturn new L.Bounds(\n\t\t\trange.min.subtract(minOffset),\n\t\t\trange.max.add(maxOffset),\n\t\t);\n\t}\n\n\tpublic static pxBoundsToTileRange(bounds: any) {\n\t\treturn new L.Bounds(\n\t\t\tbounds.min.divideBy(this.tileSize)._floor(),\n\t\t\tbounds.max.divideBy(this.tileSize)._floor(),\n\t\t);\n\t}\n\n\t/*\n\t\tChecks the visible tiles in current zoom level.\n\t\tMarks the visible ones as current.\n\t*/\n\tpublic static updateLayoutView(bounds: any): any {\n\t\tconst queue = this.getMissingTiles(\n\t\t\tbounds,\n\t\t\tMath.round(app.map.getZoom()),\n\t\t\ttrue,\n\t\t);\n\n\t\tif (queue.length > 0) this.addTiles(queue, true);\n\t}\n\n\tpublic static getVisibleCoordList(\n\t\trectangle: cool.SimpleRectangle = app.file.viewedRectangle,\n\t) {\n\t\tconst coordList = Array<TileCoordData>();\n\t\tconst zoom = app.map.getZoom();\n\n\t\tfor (const tile of this.tiles.values()) {\n\t\t\tconst coords = tile.coords;\n\t\t\tif (\n\t\t\t\tcoords.z === zoom &&\n\t\t\t\trectangle.intersectsRectangle([\n\t\t\t\t\tcoords.x * app.pixelsToTwips,\n\t\t\t\t\tcoords.y * app.pixelsToTwips,\n\t\t\t\t\tthis.tileSize * app.pixelsToTwips,\n\t\t\t\t\tthis.tileSize * app.pixelsToTwips,\n\t\t\t\t])\n\t\t\t)\n\t\t\t\tcoordList.push(coords);\n\t\t}\n\n\t\treturn coordList;\n\t}\n\n\tpublic static updateFileBasedView(\n\t\tcheckOnly: boolean = false,\n\t\tzoomFrameBounds: any = null,\n\t\tforZoom: any = null,\n\t) {\n\t\tif (app.map._docLayer._partHeightTwips === 0)\n\t\t\t// This is true before status message is handled.\n\t\t\treturn [];\n\t\tif (app.map._docLayer._isZooming) return [];\n\n\t\tif (!checkOnly) {\n\t\t\t// zoomFrameBounds and forZoom params were introduced to work only in checkOnly mode.\n\t\t\twindow.app.console.assert(\n\t\t\t\tzoomFrameBounds === null,\n\t\t\t\t'zoomFrameBounds must only be supplied when checkOnly is true',\n\t\t\t);\n\t\t\twindow.app.console.assert(\n\t\t\t\tforZoom === null,\n\t\t\t\t'forZoom must only be supplied when checkOnly is true',\n\t\t\t);\n\t\t}\n\n\t\tif (forZoom !== null) {\n\t\t\twindow.app.console.assert(\n\t\t\t\tzoomFrameBounds,\n\t\t\t\t'zoomFrameBounds must be valid when forZoom is specified',\n\t\t\t);\n\t\t}\n\n\t\tvar zoom = forZoom || Math.round(app.map.getZoom());\n\t\tvar currZoom = Math.round(app.map.getZoom());\n\t\tvar relScale = currZoom == zoom ? 1 : app.map.getZoomScale(zoom, currZoom);\n\n\t\tvar ratio = (this.tileSize * relScale) / app.tile.size.y;\n\t\tvar partHeightPixels = Math.round(\n\t\t\t(app.map._docLayer._partHeightTwips +\n\t\t\t\tapp.map._docLayer._spaceBetweenParts) *\n\t\t\t\tratio,\n\t\t);\n\t\tvar partWidthPixels = Math.round(app.map._docLayer._partWidthTwips * ratio);\n\t\tvar mode = 0; // mode is different only in Impress MasterPage mode so far\n\n\t\tvar intersectionAreaRectangle = app.LOUtil._getIntersectionRectangle(\n\t\t\tapp.file.viewedRectangle.pToArray(),\n\t\t\t[0, 0, partWidthPixels, partHeightPixels * app.map._docLayer._parts],\n\t\t);\n\n\t\tvar queue = [];\n\n\t\tif (intersectionAreaRectangle) {\n\t\t\tvar minLocalX =\n\t\t\t\tMath.floor(intersectionAreaRectangle[0] / app.tile.size.pX) *\n\t\t\t\tapp.tile.size.pX;\n\t\t\tvar maxLocalX =\n\t\t\t\tMath.floor(\n\t\t\t\t\t(intersectionAreaRectangle[0] + intersectionAreaRectangle[2]) /\n\t\t\t\t\t\tapp.tile.size.pX,\n\t\t\t\t) * app.tile.size.pX;\n\n\t\t\tvar startPart = Math.floor(\n\t\t\t\tintersectionAreaRectangle[1] / partHeightPixels,\n\t\t\t);\n\t\t\tvar startY = app.file.viewedRectangle.pY1 - startPart * partHeightPixels;\n\t\t\tstartY = Math.floor(startY / app.tile.size.pY) * app.tile.size.pY;\n\n\t\t\tvar endPart = Math.ceil(\n\t\t\t\t(intersectionAreaRectangle[1] + intersectionAreaRectangle[3]) /\n\t\t\t\t\tpartHeightPixels,\n\t\t\t);\n\t\t\tvar endY =\n\t\t\t\tapp.file.viewedRectangle.pY1 +\n\t\t\t\tapp.file.viewedRectangle.pY2 -\n\t\t\t\tendPart * partHeightPixels;\n\t\t\tendY = Math.floor(endY / app.tile.size.pY) * app.tile.size.pY;\n\n\t\t\tvar vTileCountPerPart = Math.ceil(partHeightPixels / app.tile.size.pY);\n\n\t\t\tfor (var i = startPart; i < endPart; i++) {\n\t\t\t\tfor (var j = minLocalX; j <= maxLocalX; j += app.tile.size.pX) {\n\t\t\t\t\tfor (\n\t\t\t\t\t\tvar k = 0;\n\t\t\t\t\t\tk <= vTileCountPerPart * app.tile.size.pX;\n\t\t\t\t\t\tk += app.tile.size.pY\n\t\t\t\t\t)\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(i !== startPart || k >= startY) &&\n\t\t\t\t\t\t\t(i !== endPart || k <= endY)\n\t\t\t\t\t\t)\n\t\t\t\t\t\t\tqueue.push(new TileCoordData(j, k, zoom, i, mode));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.sortFileBasedQueue(queue);\n\n\t\t\tfor (const tile of this.tiles.values()) {\n\t\t\t\t// Visible tiles' distance property will be set zero below by makeTileCurrent.\n\t\t\t\ttile.distanceFromView = Number.MAX_SAFE_INTEGER;\n\t\t\t}\n\n\t\t\tthis.beginTransaction();\n\t\t\tfor (i = 0; i < queue.length; i++) {\n\t\t\t\tconst tempTile = this.tiles.get(queue[i].key());\n\n\t\t\t\tif (tempTile) this.makeTileCurrent(tempTile);\n\t\t\t}\n\t\t\tthis.endTransaction(null);\n\t\t}\n\n\t\tif (checkOnly) {\n\t\t\treturn queue;\n\t\t} else {\n\t\t\tapp.map._docLayer._sendClientVisibleArea();\n\t\t\tapp.map._docLayer._sendClientZoom();\n\n\t\t\tvar tileCombineQueue = [];\n\t\t\tfor (var i = 0; i < queue.length; i++) {\n\t\t\t\tvar key = queue[i].key();\n\t\t\t\tlet tile = this.tiles.get(key);\n\t\t\t\tif (!tile) tile = this.createTile(queue[i], key);\n\t\t\t\tif (tile.needsFetch()) tileCombineQueue.push(queue[i]);\n\t\t\t}\n\t\t\tthis.sendTileCombineRequest(tileCombineQueue);\n\t\t}\n\t}\n\n\t// We keep tile content around, but it will need\n\t// refreshing if we show it again - and we need to\n\t// know what monotonic time the invalidate came from\n\t// so we match this to a new incoming tile to unset\n\t// the invalid state later.\n\tpublic static invalidateTile(key: any, wireId: number) {\n\t\tconst tile: Tile = this.tiles.get(key);\n\t\tif (!tile) return;\n\n\t\ttile.invalidateCount++;\n\n\t\tif (app.map._debug.tileDataOn) {\n\t\t\tapp.map._debug.tileDataAddInvalidate();\n\t\t}\n\n\t\tif (!tile.hasContent()) this.removeTile(key);\n\t\telse {\n\t\t\tif (this.debugDeltas)\n\t\t\t\twindow.app.console.debug(\n\t\t\t\t\t'invalidate tile ' + key + ' with wireId ' + wireId,\n\t\t\t\t);\n\t\t\ttile.forceKeyframe(wireId ? wireId : tile.wireId);\n\t\t}\n\t}\n\n\t// Indicate that we're about to render this image.\n\tpublic static touchImage(tile: Tile) {\n\t\tif (!tile) return;\n\t\ttile.lastRendered = performance.now();\n\t\tif (!tile.image) tile.missingContent++;\n\t}\n}\n"]}