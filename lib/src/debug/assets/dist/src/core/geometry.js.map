{"version":3,"file":"geometry.js","sourceRoot":"","sources":["../../../../../../../../../../TanhX/online/browser/src/core/geometry.ts"],"names":[],"mappings":"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","sourcesContent":["/* -*- js-indent-level: 8 -*- */\n/*\n * Copyright the Collabora Online contributors.\n *\n * SPDX-License-Identifier: MPL-2.0\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\n/*\n    Notes about the design:\n        * Because there are more then one definitions of rectangle and point, we need a prefix. The prefix is \"Simple\".\n        * This file is meant to be the base for geometry classes.\n        * Needs to keep things simple and maintainable:\n            * Interoperability between classes is important. These classes don't get other classes as inputs.\n            * There shouldn't be something like \"rectangle.testSomething(otherRectangle)\", instead \"rectangle.testSometghing(otherRectangle.toArray())\"\n            * We need this approach to keep things maintainable. These classes are not base for others for now. We shouldn't force types.\n            * Function inputs are primitives, like number, array of numbers, array of arrays of numbers, ..\n        * We have 3 types of coordinate units in Collabora Online.\n            * CSS pixels.\n            * Core pixels.\n            * twips.\n        * Core pixels are indeed equal to Canvas pixels. So:\n            * Core pixels = Canvas pixels.\n        * We are using term \"core pixels\" in many places.\n        * Why are there a CSS pixels and core / canvas pixels?\n            * Because now many devices have extreme pixel densities.\n            * If you render a page with traditional pixel density using CSS: the buttons, UI, whatever is on the page will be rendered very small. Because pixels or too small.\n            * Browsers are solving this issue with \"devicePixelRatio\" variable. They are rendering the page using this variable. The result is called CSS pixels.\n            * This variable is equal to: \"device's pixel density\" / \"traditional pixel density\"\n            * If devicePixelRatio is different than \"1\", the device has a bigger pixel density than traditional devices.\n            * Canvas HTML elements are using device's pixel density. So we can use high definiton images on our canvas.\n\t\t\t* app.dpiScale is a *divider* for converting core pixels into CSS pixels. CSS pixels conversion probably will always be used for positioning etc. of HTML elements.\n            * Search \"devicePixelRatio\" for more info.\n        * We need to convert these 3 types where we need.\n        * Every class is initiated with \"twips\" units. twips is the base unit. Every other type is calculated.\n\t\t* One can use \"app.twipsToPixels\", \"app.pixelsToTwips\" and \"app.dpiScale\" for initiating new classes with non-base units.\n\t\t* We use below terminology:\n\t\t\t* x => to get and set x.\n\t\t\t* pX => to get and set x using core / canvas units. Internally, it is converted into twips.\n\t\t\t* cX => to get and set x using CSS units. Internally, it is converted into twips.\n\t\t* Every type has its own sub functions:\n\t\t\t* toArray (native-twips), cToArray (CSS), pToArray (core / canvas), containsPoint (takes number array as input), pContainsPoint, cContainsPoint and the like.\n\t\t* twips is an integer unit. We also prefer integer types here, since other types are pixels.\n\t\t* If one needs hairlines in drawing, they can always add 0.5 or something to result.\n\t\t* Our canvas uses special positioning and sizing, it doesn't / shouldn't use these classes for resizing. Sections can use these safely. See CanvasSectionContainer::onResize if curious.\n\t\t* Rounding errors:\n\t\t\t* Converting between units is never lossless. But once a variable is set, variable's unit should be consistent. For this:\n\t\t\t\t* We are using calculated variables inside the unit. For example, when pX2 is queried:\n\t\t\t\t\t* We use \"return pX1 + pWidth\"\n\t\t\t\t\t* If we used \"(_x1 + _width) * app.twipsToPixels\", we would have raised the possibility of inconsistency. Then below 2 may or may not be equal:\n\t\t\t\t\t\t* object.pX1 + object.pWidth !== object.pX2 => We want these to be equal so we don't use \"(_x1 + _width) * app.twipsToPixels\".\n\t\t\t\t* This ensures the consistency once the variables are set, but the compound error increases (if one modifies the non-base values again and again, and again).\n*/\n\nnamespace cool {\n\n// Simple point, for simple purposes.\nexport class SimplePoint {\n\tprivate _x: number;\n\tprivate _y: number;\n\n\t// Constructor uses twips.\n\tconstructor(x: number, y: number) {\n\t\tthis._x = Math.round(x);\n\t\tthis._y = Math.round(y);\n\t}\n\n\t// twips.\n\tpublic get x(): number { return this._x; }\n\tpublic set x(x: number) { this._x = Math.round(x); }\n\n\tpublic get y(): number { return this._y; }\n\tpublic set y(y: number) { this._y = Math.round(y); }\n\n\tpublic equals(point: Array<number>): boolean { return this._x === Math.round(point[0]) && this._y === Math.round(point[1]); }\n\tpublic toArray(): number[] { return [this._x, this._y]; }\n\tpublic distanceTo(point: number[]): number { return Math.sqrt(Math.pow(this._x - point[0], 2) + Math.pow(this._y - point[1], 2)); }\n\n\t// Core / canvas pixel.\n\tpublic get pX(): number { return Math.round(this._x * app.twipsToPixels); }\n\tpublic set pX(x: number) { this._x = Math.round(x * app.pixelsToTwips); }\n\n\tpublic get pY(): number { return Math.round(this._y * app.twipsToPixels); }\n\tpublic set pY(y: number) { this._y = Math.round(y * app.pixelsToTwips); }\n\n\tpublic pEquals(point: Array<number>): boolean { return this.pX === Math.round(point[0]) && this.pY === Math.round(point[1]); }\n\tpublic pToArray(): number[] { return [this.pX, this.pY]; }\n\tpublic pDistanceTo(point: number[]): number { return Math.sqrt(Math.pow(this.pX - point[0], 2) + Math.pow(this.pY - point[1], 2)); }\n\n\t// CSS pixel.\n\tpublic get cX(): number { return Math.round(this._x * app.twipsToPixels / app.dpiScale); }\n\tpublic set cX(x: number) { this._x = Math.round(x * app.dpiScale * app.pixelsToTwips); }\n\n\tpublic get cY(): number { return Math.round(this._y * app.twipsToPixels / app.dpiScale); }\n\tpublic set cY(y: number) { this._y = Math.round(y * app.dpiScale * app.pixelsToTwips); }\n\n\tpublic cEquals(point: Array<number>): boolean { return this.cX === Math.round(point[0]) && this.cY === Math.round(point[1]); }\n\tpublic cToArray(): number[] { return [this.cX, this.cY]; }\n\tpublic cDistanceTo(point: number[]): number { return Math.sqrt(Math.pow(this.cX - point[0], 2) + Math.pow(this.cY - point[1], 2)); }\n\n\tpublic clone(): SimplePoint { return new SimplePoint(this._x, this._y); }\n}\n\n/**\n * Represents a rectangle object which works with core pixels.\n * x1 and y1 should always <= x2 and y2. In other words width >= 0 && height >= 0 is a precondition.\n * This class doesn't check for above conditions.\n */\nexport class SimpleRectangle {\n\tprivate _x1: number;\n\tprivate _y1: number;\n\tprivate _width: number;\n\tprivate _height: number;\n\n\t// Constructor uses twips.\n\tconstructor (x: number, y: number, width: number, height: number) {\n\t\tthis._x1 = Math.round(x);\n\t\tthis._y1 = Math.round(y);\n\t\tthis._width = Math.round(width);\n\t\tthis._height = Math.round(height);\n\t}\n\n\t// twips.\n\tpublic get x1(): number { return this._x1; }\n\tpublic set x1 (x1: number) { this._x1 = Math.round(x1); }\n\n\tpublic get y1(): number { return this._y1; }\n\tpublic set y1 (y1: number) { this._y1 = Math.round(y1); }\n\n\tpublic get x2(): number { return (this._x1 + this._width); }\n\tpublic set x2 (x2: number) { this._width = Math.round(x2) - this._x1; }\n\n\tpublic get y2(): number { return (this._y1 + this._height); }\n\tpublic set y2 (y2: number) { this._height = Math.round(y2) - this._y1; }\n\n\tpublic get width(): number { return this._width; }\n\tpublic set width (width: number) { this._width = Math.round(width); }\n\n\tpublic get height(): number { return this._height; }\n\tpublic set height (height: number) { this._height = Math.round(height); }\n\n\tpublic get area(): number { return (this._width * this._height); }\n\tpublic get center(): number[] { return [(this.x1 + this.x2) / 2, (this.y1 + this.y2) / 2]; }\n\n\tpublic toArray(): number[] { return [this._x1, this._y1, this._width, this._height]; }\n\n\t// twips checkers for coordinate match.\n\tpublic containsPoint (point: number[]): boolean { return (Math.round(point[0]) >= this.x1 && Math.round(point[0]) <= this.x2 && Math.round(point[1]) >= this.y1 && Math.round(point[1]) <= this.y2); }\n\tpublic containsX (x: number): boolean { return (Math.round(x) >= this.x1 && Math.round(x) <= this.x2); }\n\tpublic containsY (y: number): boolean { return (Math.round(y) >= this.y1 && Math.round(y) <= this.y2); }\n\tpublic containsRectangle(rectangle: number[]): boolean { return this.containsPoint([rectangle[0], rectangle[1]]) && this.containsPoint([rectangle[0] + rectangle[2], rectangle[1] + rectangle[3]]); }\n\tpublic intersectsRectangle(rectangle: number[]): boolean {\n\t\treturn app.LOUtil._doRectanglesIntersect(this.toArray(), rectangle);\n\t}\n\tpublic equals(rectangle: Array<number>): boolean { return this.x1 === Math.round(rectangle[0]) && this.y1 === Math.round(rectangle[1]) && this.width === Math.round(rectangle[2]) && this.height === Math.round(rectangle[3]); }\n\n\tpublic moveTo (point: number[]): void { this._x1 = Math.round(point[0]); this._y1 = Math.round(point[1]); }\n\tpublic moveBy (point: number[]): void { this._x1 += Math.round(point[0]); this._y1 += Math.round(point[1]); }\n\n\t// Pixel.\n\tpublic get pX1(): number { return Math.round(this._x1 * app.twipsToPixels); }\n\tpublic set pX1 (x1: number) { this._x1 = Math.round(x1 * app.pixelsToTwips); }\n\n\tpublic get pY1(): number { return Math.round(this._y1 * app.twipsToPixels); }\n\tpublic set pY1 (y1: number) { this._y1 = Math.round(y1 * app.pixelsToTwips); }\n\n\tpublic get pX2(): number { return this.pX1 + this.pWidth; }\n\tpublic set pX2 (x2: number) { this._width = Math.round(x2 * app.pixelsToTwips) - this._x1; }\n\n\tpublic get pY2(): number { return this.pY1 + this.pHeight; }\n\tpublic set pY2 (y2: number) { this._height = Math.round(y2 * app.pixelsToTwips) - this._y1; }\n\n\tpublic get pWidth(): number { return Math.round(this._width * app.twipsToPixels); }\n\tpublic set pWidth (width: number) { this._width = Math.round(width * app.pixelsToTwips); }\n\n\tpublic get pHeight(): number { return Math.round(this._height * app.twipsToPixels); }\n\tpublic set pHeight (height: number) { this._height = Math.round(height * app.pixelsToTwips); }\n\n\tpublic get pArea(): number { return this.pWidth * this.pHeight; }\n\tpublic get pCenter(): number[] { return [(this.pX1 + this.pX2) / 2, (this.pY1 + this.pY2) / 2]; }\n\n\tpublic pToArray(): number[] { return [this.pX1, this.pY1, this.pWidth, this.pHeight]; }\n\n\t// Pixel checkers for coordinate match.\n\tpublic pContainsPoint (point: number[]): boolean { return (Math.round(point[0]) >= this.pX1 && Math.round(point[0]) <= this.pX2 && Math.round(point[1]) >= this.pY1 && Math.round(point[1]) <= this.pY2); }\n\tpublic pContainsX (x: number): boolean { return (Math.round(x) >= this.pX1 && Math.round(x) <= this.pX2); }\n\tpublic pContainsY (y: number): boolean { return (Math.round(y) >= this.pY1 && Math.round(y) <= this.pY2); }\n\tpublic pContainsRectangle(rectangle: number[]): boolean { return this.pContainsPoint([rectangle[0], rectangle[1]]) && this.pContainsPoint([rectangle[0] + rectangle[2], rectangle[1] + rectangle[3]]); }\n\tpublic pIntersectsRectangle(rectangle: number[]): boolean {\n\t\treturn app.LOUtil._doRectanglesIntersect(this.pToArray(), rectangle);\n\t}\n\tpublic pEquals(rectangle: Array<number>): boolean { return this.pX1 === Math.round(rectangle[0]) && this.pY1 === Math.round(rectangle[1]) && this.pWidth === Math.round(rectangle[2]) && this.pHeight === Math.round(rectangle[3]); }\n\n\tpublic pMoveTo (point: number[]): void { this._x1 = Math.round(point[0] * app.pixelsToTwips); this._y1 = Math.round(point[1] * app.pixelsToTwips); }\n\tpublic pMoveBy (point: number[]): void { this._x1 += Math.round(point[0] * app.pixelsToTwips); this._y1 += Math.round(point[1] * app.pixelsToTwips); }\n\n\t// CSS pixel.\n\tpublic get cX1(): number { return Math.round(this._x1 * app.twipsToPixels / app.dpiScale); }\n\tpublic set cX1 (x1: number) { this._x1 = Math.round(x1 * app.dpiScale * app.pixelsToTwips); }\n\n\tpublic get cY1(): number { return Math.round(this._y1 * app.twipsToPixels / app.dpiScale); }\n\tpublic set cY1 (y1: number) { this._y1 = Math.round(y1 * app.dpiScale * app.pixelsToTwips); }\n\n\tpublic get cX2(): number { return this.cX1 + this.cWidth; }\n\tpublic set cX2 (x2: number) { this._width = Math.round(x2 * app.dpiScale * app.pixelsToTwips); }\n\n\tpublic get cY2(): number { return this.cY1 + this.cHeight; }\n\tpublic set cY2 (y2: number) { this._height = Math.round(y2 * app.dpiScale * app.pixelsToTwips); }\n\n\tpublic get cWidth(): number { return Math.round(this._width * app.twipsToPixels / app.dpiScale); }\n\tpublic set cWidth (width: number) { this._width = Math.round(width * app.dpiScale * app.pixelsToTwips); }\n\n\tpublic get cHeight(): number { return Math.round(this._height * app.twipsToPixels / app.dpiScale); }\n\tpublic set cHeight (height: number) { this._height = Math.round(height * app.dpiScale * app.pixelsToTwips); }\n\n\tpublic get cArea(): number { return this.cWidth * this.cHeight; }\n\tpublic get cCenter(): number[] { return [(this.cX1 + this.cX2) / 2, (this.cY1 + this.cY2) / 2]; }\n\n\tpublic cToArray(): number[] { return [this.cX1, this.cY1, this.cWidth, this.cHeight]; }\n\n\t// CSS pixel checkers for coordinate match.\n\tpublic cContainsPoint (point: number[]): boolean { return (Math.round(point[0]) >= this.cX1 && Math.round(point[0]) <= this.cX2 && Math.round(point[1]) >= this.cY1 && Math.round(point[1]) <= this.cY2); }\n\tpublic cContainsX (x: number): boolean { return (Math.round(x) >= this.cX1 && Math.round(x) <= this.cX2); }\n\tpublic cContainsY (y: number): boolean { return (Math.round(y) >= this.cY1 && Math.round(y) <= this.cY2); }\n\tpublic cContainsRectangle(rectangle: number[]): boolean { return this.cContainsPoint([rectangle[0], rectangle[1]]) && this.cContainsPoint([rectangle[0] + rectangle[2], rectangle[1] + rectangle[3]]); }\n\tpublic cIntersectsRectangle(rectangle: number[]): boolean {\n\t\treturn app.LOUtil._doRectanglesIntersect(this.cToArray(), rectangle);\n\t}\n\tpublic cEquals(rectangle: Array<number>): boolean { return this.cX1 === Math.round(rectangle[0]) && this.cY1 === Math.round(rectangle[this.y1]) && this.cWidth === Math.round(rectangle[2]) && this.cHeight === Math.round(rectangle[3]); }\n\n\tpublic cMoveTo (point: number[]): void { this._x1 = Math.round(point[0] * app.dpiScale * app.pixelsToTwips); this._y1 = Math.round(point[1] * app.dpiScale * app.pixelsToTwips); }\n\tpublic cMoveBy (point: number[]): void { this._x1 += Math.round(point[0] * app.dpiScale * app.pixelsToTwips); this._y1 += Math.round(point[1] * app.dpiScale * app.pixelsToTwips); }\n\n\tpublic clone(): SimpleRectangle { return new SimpleRectangle(this.x1, this.y1, this.width, this.height); }\n}\n\n/*\n\tWe have rectangle arrays in some places. We mostly combine these arrays in order to shape the border of a selection.\n\tThe merged result is a polygon. See ASCII art below for an example.\n\n\tRectangles (2):\n\t___________________\n\t|_________________|______\n\t|________________________|\n\n\t^ Combined result of above rectangles is (a polygon):\n\t________________\n\t|              |_______\n\t|_____________________|\n\n\tGive rectangles as array of rectangle arrays (x, y, width, height).\n\tConverter constant is used to convert the result into CSS pixels/ Core pixels or twips.\n\tTolerance is used to determine if the rectangles are in the same row.\n*/\nexport function rectanglesToPolygon(rectangles: Array<number[]>, converterConstant: number = 1, tolerance: number = 5): number[] {\n\t/*\n\t\tHere we can create a geometric function that handles all the edge cases.\n\t\tBut we don't need to.\n\t\tConditions:\n\t\t\t* If the rectangles are in the same row:\n\t\t\t\t* They should have same height.\n\t\t\t\t* They can't have spaces between them.\n\t\t\t* This code doesn't take holes in the polygon into account.\n\t\tThese conditions will ease our work.\n\t\tIn the future, we can expand our approach if we need to.\n\t*/\n\n\t/*\n\t\tFirst, determine the rows.\n\t\tArray of array of rectangles.\n\t*/\n\tconst rowArray: Array<Array<number[]>> = [];\n\tfor (let i = 0; i < rectangles.length; i++) {\n\t\tconst rectangle = rectangles[i];\n\t\tlet found = false;\n\t\tfor (let j = 0; j < rowArray.length; j++) {\n\t\t\tconst row = rowArray[j];\n\t\t\tif (Math.abs(row[0][1] - rectangle[1]) <= tolerance) {\n\t\t\t\trow.push(rectangle);\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!found) {\n\t\t\trowArray.push([rectangle]);\n\t\t}\n\t}\n\n\tconst finalRows: Array<number[]> = [];\n\t// Now we have rows. We will find the leftmost and rightmost points of each row and push them as rectangles.\n\tfor (let i = 0; i < rowArray.length; i++) {\n\t\tlet leftmost: number = rowArray[i][0][0];\n\t\tlet rightmost: number = rowArray[i][0][0] + rowArray[i][0][2];\n\n\t\tfor (let j = 1; j < rowArray[i].length; j++) {\n\t\t\tconst rectangle = rowArray[i][j];\n\t\t\tif (rectangle[0] < leftmost) {\n\t\t\t\tleftmost = rectangle[0];\n\t\t\t}\n\n\t\t\tif (rectangle[0] + rectangle[2] > rightmost) {\n\t\t\t\trightmost = rectangle[0] + rectangle[2];\n\t\t\t}\n\t\t}\n\n\t\tfinalRows.push([leftmost, rowArray[i][0][1], rightmost - leftmost, rowArray[i][0][3]]);\n\t}\n\n\t// Now we need to sort the rows by y.\n\tfor (let i = 0; i < finalRows.length; i++) {\n\t\tfor (let j = i + 1; j < finalRows.length; j++) {\n\t\t\tif (finalRows[i][1] > finalRows[j][1]) {\n\t\t\t\tconst temp = finalRows[i];\n\t\t\t\tfinalRows[i] = finalRows[j];\n\t\t\t\tfinalRows[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Now we need to merge the rows (the polygon).\n\tconst polygon: number[] = [];\n\tfor (let i = 0; i < finalRows.length; i++) { // From leftmost to bottom.\n\t\tif (i === 0) {\n\t\t\t// Draw top line, then continue from left to bottom.\n\t\t\tpolygon.push(finalRows[i][0] + finalRows[i][2]);\n\t\t\tpolygon.push(finalRows[i][1]);\n\n\t\t\tpolygon.push(finalRows[i][0]);\n\t\t\tpolygon.push(finalRows[i][1]);\n\n\t\t\tpolygon.push(finalRows[i][0]);\n\t\t\tpolygon.push(finalRows[i][1] + finalRows[i][3]);\n\t\t}\n\t\telse {\n\t\t\tif (finalRows[i][0] !== polygon[polygon.length - 2] || finalRows[i][1] !== polygon[polygon.length - 1]) {\n\t\t\t\tpolygon.push(finalRows[i][0]);\n\t\t\t\tpolygon.push(finalRows[i][1]);\n\t\t\t}\n\n\t\t\tpolygon.push(finalRows[i][0]);\n\t\t\tpolygon.push(finalRows[i][1] + finalRows[i][3]);\n\t\t}\n\n\t\tif (i === finalRows.length - 1) {\n\t\t\t// Draw bottom line.\n\t\t\tpolygon.push(finalRows[i][0] + finalRows[i][2]);\n\t\t\tpolygon.push(finalRows[i][1] + finalRows[i][3]);\n\t\t}\n\t}\n\n\t// Now we will draw from rightmost bottom to top.\n\tfor (let i = finalRows.length - 1; i >= 0; i--) {\n\t\tif (finalRows[i][0] + finalRows[i][2] !== polygon[polygon.length - 2] || finalRows[i][1] + finalRows[i][3] !== polygon[polygon.length - 1]) {\n\t\t\tpolygon.push(finalRows[i][0] + finalRows[i][2]);\n\t\t\tpolygon.push(finalRows[i][1] + finalRows[i][3]);\n\t\t}\n\n\t\tpolygon.push(finalRows[i][0] + finalRows[i][2]);\n\t\tpolygon.push(finalRows[i][1]);\n\t}\n\n\t// That's it. We should have drawn the polygon.\n\n\tif (converterConstant !== 1) {\n\t\tfor (let i = 0; i < polygon.length; i++) {\n\t\t\tpolygon[i] = Math.round(converterConstant * polygon[i]);\n\t\t}\n\t}\n\n\t//return [100, 100, 200, 100, 200, 200, 100, 200]; // Test polygon (to see if caller function draws it correctly).;\n\n\treturn polygon;\n}\n\n}\n\napp.definitions.simpleRectangle = cool.SimpleRectangle;\napp.definitions.simplePoint = cool.SimplePoint;\n"]}