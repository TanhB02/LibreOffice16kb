{"version":3,"file":"PolyUtil.js","sourceRoot":"","sources":["../../../../../../../../../../TanhX/online/browser/src/geometry/PolyUtil.js"],"names":[],"mappings":"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","sourcesContent":["/* -*- js-indent-level: 8 -*- */\n/*\n * L.PolyUtil contains utility functions for polygons (clipping, etc.).\n */\n\nL.PolyUtil = {};\n\n/*\n * Sutherland-Hodgeman polygon clipping algorithm.\n * Used to avoid rendering parts of a polygon that are not currently visible.\n */\nL.PolyUtil.clipPolygon = function (points, bounds, round) {\n\tvar clippedPoints,\n\t    edges = [1, 4, 2, 8],\n\t    i, j, k,\n\t    a, b,\n\t    len, edge, p,\n\t    lu = L.LineUtil;\n\n\tfor (i = 0, len = points.length; i < len; i++) {\n\t\tpoints[i]._code = lu._getBitCode(points[i], bounds);\n\t}\n\n\t// for each edge (left, bottom, right, top)\n\tfor (k = 0; k < 4; k++) {\n\t\tedge = edges[k];\n\t\tclippedPoints = [];\n\n\t\tfor (i = 0, len = points.length, j = len - 1; i < len; j = i++) {\n\t\t\ta = points[i];\n\t\t\tb = points[j];\n\n\t\t\t// if a is inside the clip window\n\t\t\tif (!(a._code & edge)) {\n\t\t\t\t// if b is outside the clip window (a->b goes out of screen)\n\t\t\t\tif (b._code & edge) {\n\t\t\t\t\tp = lu._getEdgeIntersection(b, a, edge, bounds, round);\n\t\t\t\t\tp._code = lu._getBitCode(p, bounds);\n\t\t\t\t\tclippedPoints.push(p);\n\t\t\t\t}\n\t\t\t\tclippedPoints.push(a);\n\n\t\t\t// else if b is inside the clip window (a->b enters the screen)\n\t\t\t} else if (!(b._code & edge)) {\n\t\t\t\tp = lu._getEdgeIntersection(b, a, edge, bounds, round);\n\t\t\t\tp._code = lu._getBitCode(p, bounds);\n\t\t\t\tclippedPoints.push(p);\n\t\t\t}\n\t\t}\n\t\tpoints = clippedPoints;\n\t}\n\n\treturn points;\n};\n\nL.PolyUtil.rectanglesToPolygons = function (rectangles, docLayer, dontConvert) {\n\t// algorithm found here http://stackoverflow.com/questions/13746284/merging-multiple-adjacent-rectangles-into-one-polygon\n\tvar eps = 20;\n\t// Glue rectangles if the space between them is less then eps\n\tfor (var i = 0; i < rectangles.length - 1; i++) {\n\t\tfor (var j = i + 1; j < rectangles.length; j++) {\n\t\t\tfor (var k = 0; k < rectangles[i].length; k++) {\n\t\t\t\tfor (var l = 0; l < rectangles[j].length; l++) {\n\t\t\t\t\tif (Math.abs(rectangles[i][k].x - rectangles[j][l].x) < eps) {\n\t\t\t\t\t\trectangles[j][l].x = rectangles[i][k].x;\n\t\t\t\t\t}\n\t\t\t\t\tif (Math.abs(rectangles[i][k].y - rectangles[j][l].y) < eps) {\n\t\t\t\t\t\trectangles[j][l].y = rectangles[i][k].y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tvar points = {};\n\tfor (i = 0; i < rectangles.length; i++) {\n\t\tfor (j = 0; j < rectangles[i].length; j++) {\n\t\t\tif (points[rectangles[i][j]]) {\n\t\t\t\tdelete points[rectangles[i][j]];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tpoints[rectangles[i][j]] = rectangles[i][j];\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction getKeys(points) {\n\t\tvar keys = [];\n\t\tfor (var key in points) {\n\t\t\tif (Object.prototype.hasOwnProperty.call(points, key)) {\n\t\t\t\tkeys.push(key);\n\t\t\t}\n\t\t}\n\t\treturn keys;\n\t}\n\n\tfunction xThenY(aStr, bStr) {\n\t\tvar a = aStr.match(/\\d+/g);\n\t\ta[0] = parseInt(a[0]);\n\t\ta[1] = parseInt(a[1]);\n\t\tvar b = bStr.match(/\\d+/g);\n\t\tb[0] = parseInt(b[0]);\n\t\tb[1] = parseInt(b[1]);\n\n\t\tif (a[0] < b[0] || (a[0] === b[0] && a[1] < b[1])) {\n\t\t\treturn -1;\n\t\t}\n\t\telse if (a[0] === b[0] && a[1] === b[1]) {\n\t\t\treturn 0;\n\t\t}\n\t\telse {\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\tfunction yThenX(aStr, bStr) {\n\t\tvar a = aStr.match(/\\d+/g);\n\t\ta[0] = parseInt(a[0]);\n\t\ta[1] = parseInt(a[1]);\n\t\tvar b = bStr.match(/\\d+/g);\n\t\tb[0] = parseInt(b[0]);\n\t\tb[1] = parseInt(b[1]);\n\n\t\tif (a[1] < b[1] || (a[1] === b[1] && a[0] < b[0])) {\n\t\t\treturn -1;\n\t\t}\n\t\telse if (a[0] === b[0] && a[1] === b[1]) {\n\t\t\treturn 0;\n\t\t}\n\t\telse {\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\tvar sortX = getKeys(points).sort(xThenY);\n\tvar sortY = getKeys(points).sort(yThenX);\n\n\tvar edgesH = {};\n\tvar edgesV = {};\n\n\tvar len = getKeys(points).length;\n\ti = 0;\n\twhile (i < len) {\n\t\tvar currY = points[sortY[i]].y;\n\t\twhile (i < len && points[sortY[i]].y === currY) {\n\t\t\tedgesH[sortY[i]] = sortY[i + 1];\n\t\t\tedgesH[sortY[i + 1]] = sortY[i];\n\t\t\ti += 2;\n\t\t}\n\t}\n\n\ti = 0;\n\twhile (i < len) {\n\t\tvar currX = points[sortX[i]].x;\n\t\twhile (i < len && points[sortX[i]].x === currX) {\n\t\t\tedgesV[sortX[i]] = sortX[i + 1];\n\t\t\tedgesV[sortX[i + 1]] = sortX[i];\n\t\t\ti += 2;\n\t\t}\n\t}\n\n\tvar polygons = [];\n\tvar edgesHKeys = getKeys(edgesH);\n\twhile (edgesHKeys.length > 0) {\n\t\tvar p = [[edgesHKeys[0], 0]];\n\t\twhile (true) {\n\t\t\tvar curr = p[p.length - 1][0];\n\t\t\tvar e = p[p.length - 1][1];\n\t\t\tif (e === 0) {\n\t\t\t\tvar nextVertex = edgesV[curr];\n\t\t\t\tdelete edgesV[curr];\n\t\t\t\tp.push([nextVertex, 1]);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tnextVertex = edgesH[curr];\n\t\t\t\tdelete edgesH[curr];\n\t\t\t\tp.push([nextVertex, 0]);\n\t\t\t}\n\t\t\tif (p[p.length - 1][0] === p[0][0] && p[p.length - 1][1] === p[0][1]) {\n\t\t\t\tp.pop();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar polygon = [];\n\t\tfor (i = 0; i < p.length; i++) {\n\t\t\tif (!dontConvert)\n\t\t\t\tpolygon.push(docLayer._twipsToLatLng(points[p[i][0]]));\n\t\t\telse\n\t\t\t\tpolygon.push(points[p[i][0]]);\n\t\t\tdelete edgesH[p[i][0]];\n\t\t\tdelete edgesV[p[i][0]];\n\t\t}\n\n\t\tif (!dontConvert)\n\t\t\tpolygon.push(docLayer._twipsToLatLng(points[p[0][0]]));\n\t\telse\n\t\t\tpolygon.push(points[p[0][0]]);\n\n\t\tedgesHKeys = getKeys(edgesH);\n\t\tpolygons.push(polygon);\n\t}\n\treturn polygons;\n};\n"]}