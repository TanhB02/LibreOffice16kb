{"version":3,"file":"Transformation.js","sourceRoot":"","sources":["../../../../../../../../../../TanhX/online/browser/src/geometry/Transformation.ts"],"names":[],"mappings":"AAAA,gCAAgC;AAIhC,IAAU,IAAI,CAuCb;AAvCD,WAAU,IAAI;IAEd;;OAEG;IACH;QAOC,wBAAY,CAAS,EAAE,CAAS,EAAE,CAAS,EAAE,CAAS;YACrD,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;YACX,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;YACX,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;YACX,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;QACZ,CAAC;QAEM,kCAAS,GAAhB,UAAiB,KAAY,EAAE,KAAa;YAC3C,OAAO,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE,KAAK,CAAC,CAAC;QAC9C,CAAC;QAED,iCAAiC;QAC1B,mCAAU,GAAjB,UAAkB,KAAY,EAAE,KAAa;YAC5C,KAAK,GAAG,KAAK,IAAI,CAAC,CAAC;YACnB,KAAK,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;YAC9C,KAAK,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;YAC9C,OAAO,KAAK,CAAC;QACd,CAAC;QAEM,oCAAW,GAAlB,UAAmB,KAAY,EAAE,KAAa;YAC7C,KAAK,GAAG,KAAK,IAAI,CAAC,CAAC;YACnB,OAAO,IAAI,KAAA,KAAK,CACf,CAAC,KAAK,CAAC,CAAC,GAAG,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,EACnC,CAAC,KAAK,CAAC,CAAC,GAAG,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QACvC,CAAC;QACF,qBAAC;IAAD,CAAC,AAhCD,IAgCC;IAhCY,mBAAc,iBAgC1B,CAAA;AAED,CAAC,EAvCS,IAAI,KAAJ,IAAI,QAuCb;AAED,CAAC,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC","sourcesContent":["/* -*- js-indent-level: 8 -*- */\n\ndeclare var L: any;\n\nnamespace cool {\n\n/**\n * Transformation is an utility class to perform simple point transformations through a 2d-matrix.\n */\nexport class Transformation {\n\n\tprivate a: number;\n\tprivate b: number;\n\tprivate c: number;\n\tprivate d: number;\n\n\tconstructor(a: number, b: number, c: number, d: number) {\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t\tthis.c = c;\n\t\tthis.d = d;\n\t}\n\n\tpublic transform(point: Point, scale: number): Point {\n\t\treturn this._transform(point.clone(), scale);\n\t}\n\n\t// destructive transform (faster)\n\tpublic _transform(point: Point, scale: number): Point {\n\t\tscale = scale || 1;\n\t\tpoint.x = scale * (this.a * point.x + this.b);\n\t\tpoint.y = scale * (this.c * point.y + this.d);\n\t\treturn point;\n\t}\n\n\tpublic untransform(point: Point, scale: number): Point {\n\t\tscale = scale || 1;\n\t\treturn new Point(\n\t\t\t(point.x / scale - this.b) / this.a,\n\t\t\t(point.y / scale - this.d) / this.c);\n\t}\n}\n\n}\n\nL.Transformation = cool.Transformation;\n"]}