{"version":3,"file":"Bounds.js","sourceRoot":"","sources":["../../../../../../../../../../TanhX/online/browser/src/geometry/Bounds.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-strict-ignore\n/* -*- js-indent-level: 8 -*- */\n\ndeclare var L: any;\n\nnamespace cool {\n\nfunction PointConstruct(x: number, y: number, round?: boolean): Point {\n\treturn new L.Point(x, y, round);\n}\n\nfunction toPoint(x: PointConvertable | number, y?: number, round?: boolean): Point {\n\treturn L.point(x, y, round);\n}\n\n/// Bounds represents a rectangular area on the screen.\nexport class Bounds {\n\n\tpublic min: Point;\n\tpublic max: Point;\n\n\tconstructor(a: PointConvertable[] | PointConvertable, b?: PointConvertable) {\n\t\tif (!a)\n\t\t\treturn;\n\n\t\t// Bounds construction is called very often so it's important to avoid object construction\n\t\t// when possible. This is the reason for the amount of convolution here (that and ES6's lack\n\t\t// of multiple constructors...)\n\t\tif (b) {\n\t\t\tthis.min = a instanceof Point ? a.clone() : toPoint(<PointConvertable>a);\n\t\t\tconst maybeMax = b instanceof Point ? b.clone() : toPoint(b);\n\t\t\tif (maybeMax.x >= this.min.x && maybeMax.y >= this.min.y)\n\t\t\t\tthis.max = maybeMax;\n\t\t\telse {\n\t\t\t\tthis.max = this.min.clone();\n\t\t\t\tthis.extend(maybeMax);\n\t\t\t}\n\t\t} else\n\t\t\tfor (const point of <PointConvertable[]>a)\n\t\t\t\tthis.extend(point);\n\t}\n\n\tpublic static parse(rectString: string): Bounds {\n\n\t\tif (typeof rectString !== 'string') {\n\t\t\tconsole.error('invalid input type, expected string');\n\t\t\treturn undefined;\n\t\t}\n\n\t\tvar rectParts = rectString.match(/\\d+/g);\n\t\tif (rectParts === null || rectParts.length < 4) {\n\t\t\tconsole.error('incomplete rectangle');\n\t\t\treturn undefined;\n\t\t}\n\n\t\tvar refPoint1 = PointConstruct(parseInt(rectParts[0]), parseInt(rectParts[1]));\n\t\tvar offset = PointConstruct(parseInt(rectParts[2]), parseInt(rectParts[3]));\n\t\tvar refPoint2 = refPoint1.add(offset);\n\n\t\treturn new Bounds(refPoint1, refPoint2);\n\t}\n\n\tpublic static parseArray(rectListString: string): Bounds[] {\n\n\t\tif (typeof rectListString !== 'string') {\n\t\t\tconsole.error('invalid input type, expected string');\n\t\t\treturn undefined;\n\t\t}\n\n\t\tvar parts = rectListString.match(/\\d+/g);\n\t\tif (parts === null || parts.length < 4) {\n\t\t\treturn [];\n\t\t}\n\n\t\tvar rectangles: Bounds[] = [];\n\t\tfor (var i = 0; (i + 3) < parts.length; i += 4) {\n\t\t\tvar refPoint1 = PointConstruct(parseInt(parts[i]), parseInt(parts[i + 1]));\n\t\t\tvar offset = PointConstruct(parseInt(parts[i + 2]), parseInt(parts[i + 3]));\n\t\t\tvar refPoint2 = refPoint1.add(offset);\n\t\t\trectangles.push(new Bounds(refPoint1, refPoint2));\n\t\t}\n\n\t\treturn rectangles;\n\t}\n\n\t// extend the bounds to contain the given point\n\tpublic extend(pointSrc: Point | Array<number> | PointLike): Bounds {\n\t\tvar point = toPoint(pointSrc);\n\n\t\tif (!this.min && !this.max) {\n\t\t\tthis.min = point.clone();\n\t\t\tthis.max = point.clone();\n\t\t} else {\n\t\t\tthis.min.x = Math.min(point.x, this.min.x);\n\t\t\tthis.max.x = Math.max(point.x, this.max.x);\n\t\t\tthis.min.y = Math.min(point.y, this.min.y);\n\t\t\tthis.max.y = Math.max(point.y, this.max.y);\n\t\t}\n\t\treturn this;\n\t}\n\n\tpublic clone(): Bounds {\n\t\treturn new Bounds(this.min, this.max);\n\t}\n\n\tpublic getCenter(round?: boolean): Point {\n\t\treturn PointConstruct(\n\t\t\t(this.min.x + this.max.x) / 2,\n\t\t\t(this.min.y + this.max.y) / 2, round);\n\t}\n\n\tpublic round(): void {\n\t\tthis.min.x = Math.round(this.min.x);\n\t\tthis.min.y = Math.round(this.min.y);\n\t\tthis.max.x = Math.round(this.max.x);\n\t\tthis.max.y = Math.round(this.max.y);\n\t}\n\n\tpublic translate(x: number, y: number): void {\n\t\tthis.min.x += x;\n\t\tthis.min.y += y;\n\t\tthis.max.x += x;\n\t\tthis.max.y += y;\n\t}\n\n\tpublic getBottomLeft(): Point {\n\t\treturn PointConstruct(this.min.x, this.max.y);\n\t}\n\n\tpublic getTopRight(): Point {\n\t\treturn PointConstruct(this.max.x, this.min.y);\n\t}\n\n\tpublic getTopLeft(): Point {\n\t\treturn PointConstruct(this.min.x, this.min.y);\n\t}\n\n\tpublic getBottomRight(): Point {\n\t\treturn PointConstruct(this.max.x, this.max.y);\n\t}\n\n\tpublic getSize(): Point {\n\t\treturn this.max.subtract(this.min);\n\t}\n\n\tpublic contains(obj: Bounds | PointConvertable): boolean {\n\t\tvar min, max;\n\n\t\tvar bounds: Bounds;\n\t\tvar point: Point;\n\t\tif (Array.isArray(obj) || obj instanceof L.Point || obj instanceof SimplePoint) {\n\t\t\tpoint = toPoint(<PointConvertable>obj);\n\t\t} else {\n\t\t\tbounds = Bounds.toBounds(obj);\n\t\t}\n\n\t\tif (bounds) {\n\t\t\tmin = bounds.min;\n\t\t\tmax = bounds.max;\n\t\t} else {\n\t\t\tmin = max = point;\n\t\t}\n\n\t\treturn (min.x >= this.min.x) &&\n\t\t\t(max.x <= this.max.x) &&\n\t\t\t(min.y >= this.min.y) &&\n\t\t\t(max.y <= this.max.y);\n\t}\n\n\tpublic intersects(boundsSrc: Bounds | PointConvertable[]): boolean {\n\t\tvar bounds = Bounds.toBounds(boundsSrc);\n\n\t\tvar min = this.min;\n\t\tvar max = this.max;\n\t\tvar min2 = bounds.min;\n\t\tvar max2 = bounds.max;\n\t\tvar xIntersects = (max2.x >= min.x) && (min2.x <= max.x);\n\t\tvar yIntersects = (max2.y >= min.y) && (min2.y <= max.y);\n\n\t\treturn xIntersects && yIntersects;\n\t}\n\n\tpublic distanceTo(bounds: Bounds): number {\n\t\tvar min = this.min;\n\t\tvar max = this.max;\n\t\tvar min2 = bounds.min;\n\t\tvar max2 = bounds.max;\n\t\tvar xIntersects = (max2.x >= min.x) && (min2.x <= max.x);\n\t\tvar yIntersects = (max2.y >= min.y) && (min2.y <= max.y);\n\t\t\n\t\tif (xIntersects) {\n\t\t\tif (yIntersects) return 0;\n\t\t\tif (max2.y < min.y) return min.y - max2.y;\n\t\t\treturn min2.y - max.y;\n\t\t}\n\n\t\tif (yIntersects) {\n\t\t\tif (max2.x < min.x) return min.x - max2.x;\n\t\t\treturn min2.x - max.x;\n\t\t}\n\n\t\tvar xdist = (min.x > max2.x) ? (min.x - max2.x) : (min2.x - max.x);\n\t\tvar ydist = (min.y > max2.y) ? (min.y - max2.y) : (min2.y - max.y);\n\n\t\treturn Math.sqrt(xdist * xdist + ydist * ydist);\n\t}\n\n\t// non-destructive, returns a new Bounds\n\tpublic add(point: Point): Bounds {\n\t\treturn this.clone()._add(point);\n\t}\n\n\t// destructive, used directly for performance in situations where it's safe to modify existing Bounds\n\tpublic _add(point: Point): Bounds {\n\t\tthis.min._add(point);\n\t\tthis.max._add(point);\n\t\treturn this;\n\t}\n\n\tpublic getPointArray(): Point[] {\n\t\treturn [\n\t\t\tthis.getBottomLeft(), this.getBottomRight(),\n\t\t\tthis.getTopLeft(), this.getTopRight()\n\t\t];\n\t}\n\n\tpublic toString(): string {\n\t\treturn '[' +\n\t\t\tthis.min.toString() + ', ' +\n\t\t\tthis.max.toString() + ']';\n\t}\n\n\tpublic isValid(): boolean {\n\t\treturn !!(this.min && this.max);\n\t}\n\n\tpublic intersectsAny(boundsArray: Bounds[]): boolean {\n\t\tfor (var i = 0; i < boundsArray.length; ++i) {\n\t\t\tif (boundsArray[i].intersects(this)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tpublic clampX(x: number): number {\n\t\treturn Math.max(this.min.x, Math.min(this.max.x, x));\n\t}\n\n\tpublic clampY(y: number): number {\n\t\treturn Math.max(this.min.y, Math.min(this.max.y, y));\n\t}\n\n\tpublic clamp(obj: Point | Bounds): Point | Bounds {\n\t\tif (obj instanceof L.Point) {\n\t\t\treturn PointConstruct(\n\t\t\t\tthis.clampX((obj as Point).x),\n\t\t\t\tthis.clampY((obj as Point).y)\n\t\t\t);\n\t\t}\n\n\t\tif (obj instanceof Bounds) {\n\t\t\treturn new Bounds(\n\t\t\t\tPointConstruct(\n\t\t\t\t\tthis.clampX((obj as Bounds).min.x),\n\t\t\t\t\tthis.clampY((obj as Bounds).min.y)\n\t\t\t\t),\n\n\t\t\t\tPointConstruct(\n\t\t\t\t\tthis.clampX((obj as Bounds).max.x),\n\t\t\t\t\tthis.clampY((obj as Bounds).max.y)\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\tconsole.error('invalid argument type');\n\t}\n\n\tpublic equals(bounds: Bounds): boolean {\n\t\treturn this.min.equals(bounds.min) && this.max.equals(bounds.max);\n\t}\n\n\tpublic toRectangle(): number[] {\n\t\treturn [\n\t\t\tthis.min.x, this.min.y,\n\t\t\tthis.max.x - this.min.x,\n\t\t\tthis.max.y - this.min.y\n\t\t];\n\t}\n\n\tpublic toCoreString(): string {\n\t\treturn this.min.x + ', ' + this.min.y + ', ' + (this.max.x - this.min.x) + ', ' + (this.max.y - this.min.y);\n\t}\n\n\tpublic static toBounds(a: Bounds | PointConvertable | PointConvertable[], b?: PointConvertable): Bounds {\n\t\tif (!a || a instanceof Bounds) {\n\t\t\treturn <Bounds>a;\n\t\t}\n\n\t\treturn new Bounds(a, b);\n\t}\n}\n\n}\n\nL.Bounds = cool.Bounds;\nL.bounds = cool.Bounds.toBounds;\n"]}