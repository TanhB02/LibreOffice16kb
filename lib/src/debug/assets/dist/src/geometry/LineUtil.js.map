{"version":3,"file":"LineUtil.js","sourceRoot":"","sources":["../../../../../../../../../../TanhX/online/browser/src/geometry/LineUtil.js"],"names":[],"mappings":"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","sourcesContent":["/* -*- js-indent-level: 8 -*- */\n/*\n * L.LineUtil contains different utility functions for line segments\n * and polylines (clipping, simplification, distances, etc.)\n */\n/* global Uint8Array */\nL.LineUtil = {\n\n\t// Simplify polyline with vertex reduction and Douglas-Peucker simplification.\n\t// Improves rendering performance dramatically by lessening the number of points to draw.\n\n\tsimplify: function (points, tolerance) {\n\t\tif (!tolerance || !points.length) {\n\t\t\treturn points.slice();\n\t\t}\n\n\t\tvar sqTolerance = tolerance * tolerance;\n\n\t\t// stage 1: vertex reduction\n\t\tpoints = this._reducePoints(points, sqTolerance);\n\n\t\t// stage 2: Douglas-Peucker simplification\n\t\tpoints = this._simplifyDP(points, sqTolerance);\n\n\t\treturn points;\n\t},\n\n\t// distance from a point to a segment between two points\n\tpointToSegmentDistance:  function (p, p1, p2) {\n\t\treturn Math.sqrt(this._sqClosestPointOnSegment(p, p1, p2, true));\n\t},\n\n\t// Douglas-Peucker simplification, see http://en.wikipedia.org/wiki/Douglas-Peucker_algorithm\n\t_simplifyDP: function (points, sqTolerance) {\n\n\t\tvar len = points.length,\n\t\t    ArrayConstructor = typeof Uint8Array !== undefined + '' ? Uint8Array : Array,\n\t\t    markers = new ArrayConstructor(len);\n\n\t\tmarkers[0] = markers[len - 1] = 1;\n\n\t\tthis._simplifyDPStep(points, markers, sqTolerance, 0, len - 1);\n\n\t\tvar i,\n\t\t    newPoints = [];\n\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tif (markers[i]) {\n\t\t\t\tnewPoints.push(points[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn newPoints;\n\t},\n\n\t_simplifyDPStep: function (points, markers, sqTolerance, first, last) {\n\n\t\tvar maxSqDist = 0,\n\t\t    index, i, sqDist;\n\n\t\tfor (i = first + 1; i <= last - 1; i++) {\n\t\t\tsqDist = this._sqClosestPointOnSegment(points[i], points[first], points[last], true);\n\n\t\t\tif (sqDist > maxSqDist) {\n\t\t\t\tindex = i;\n\t\t\t\tmaxSqDist = sqDist;\n\t\t\t}\n\t\t}\n\n\t\tif (maxSqDist > sqTolerance) {\n\t\t\tmarkers[index] = 1;\n\n\t\t\tthis._simplifyDPStep(points, markers, sqTolerance, first, index);\n\t\t\tthis._simplifyDPStep(points, markers, sqTolerance, index, last);\n\t\t}\n\t},\n\n\t// reduce points that are too close to each other to a single point\n\t_reducePoints: function (points, sqTolerance) {\n\t\tvar reducedPoints = [points[0]];\n\n\t\tfor (var i = 1, prev = 0, len = points.length; i < len; i++) {\n\t\t\tif (this._sqDist(points[i], points[prev]) > sqTolerance) {\n\t\t\t\treducedPoints.push(points[i]);\n\t\t\t\tprev = i;\n\t\t\t}\n\t\t}\n\t\tif (prev < len - 1) {\n\t\t\treducedPoints.push(points[len - 1]);\n\t\t}\n\t\treturn reducedPoints;\n\t},\n\n\t// Cohen-Sutherland line clipping algorithm.\n\t// Used to avoid rendering parts of a polyline that are not currently visible.\n\n\tclipSegment: function (a, b, bounds, useLastCode, round) {\n\t\tvar codeA = useLastCode ? this._lastCode : this._getBitCode(a, bounds),\n\t\t    codeB = this._getBitCode(b, bounds),\n\n\t\t    codeOut, p, newCode;\n\n\t\t// save 2nd code to avoid calculating it on the next segment\n\t\tthis._lastCode = codeB;\n\n\t\twhile (true) {\n\t\t\t// if a,b is inside the clip window (trivial accept)\n\t\t\tif (!(codeA | codeB)) {\n\t\t\t\treturn [a, b];\n\t\t\t// if a,b is outside the clip window (trivial reject)\n\t\t\t} else if (codeA & codeB) {\n\t\t\t\treturn false;\n\t\t\t// other cases\n\t\t\t} else {\n\t\t\t\tcodeOut = codeA || codeB;\n\t\t\t\tp = this._getEdgeIntersection(a, b, codeOut, bounds, round);\n\t\t\t\tnewCode = this._getBitCode(p, bounds);\n\n\t\t\t\tif (codeOut === codeA) {\n\t\t\t\t\ta = p;\n\t\t\t\t\tcodeA = newCode;\n\t\t\t\t} else {\n\t\t\t\t\tb = p;\n\t\t\t\t\tcodeB = newCode;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t_getEdgeIntersection: function (a, b, code, bounds, round) {\n\t\tvar dx = b.x - a.x,\n\t\t    dy = b.y - a.y,\n\t\t    min = bounds.min,\n\t\t    max = bounds.max,\n\t\t    x, y;\n\n\t\tif (code & 8) { // top\n\t\t\tx = a.x + dx * (max.y - a.y) / dy;\n\t\t\ty = max.y;\n\n\t\t} else if (code & 4) { // bottom\n\t\t\tx = a.x + dx * (min.y - a.y) / dy;\n\t\t\ty = min.y;\n\n\t\t} else if (code & 2) { // right\n\t\t\tx = max.x;\n\t\t\ty = a.y + dy * (max.x - a.x) / dx;\n\n\t\t} else if (code & 1) { // left\n\t\t\tx = min.x;\n\t\t\ty = a.y + dy * (min.x - a.x) / dx;\n\t\t}\n\n\t\treturn new L.Point(x, y, round);\n\t},\n\n\t_getBitCode: function (/*Point*/ p, bounds) {\n\t\tvar code = 0;\n\n\t\tif (p.x < bounds.min.x) { // left\n\t\t\tcode |= 1;\n\t\t} else if (p.x > bounds.max.x) { // right\n\t\t\tcode |= 2;\n\t\t}\n\n\t\tif (p.y < bounds.min.y) { // bottom\n\t\t\tcode |= 4;\n\t\t} else if (p.y > bounds.max.y) { // top\n\t\t\tcode |= 8;\n\t\t}\n\n\t\treturn code;\n\t},\n\n\t// square distance (to avoid unnecessary Math.sqrt calls)\n\t_sqDist: function (p1, p2) {\n\t\tvar dx = p2.x - p1.x,\n\t\t    dy = p2.y - p1.y;\n\t\treturn dx * dx + dy * dy;\n\t},\n\n\t// return closest point on segment or distance to that point\n\t_sqClosestPointOnSegment: function (p, p1, p2, sqDist) {\n\t\tvar x = p1.x,\n\t\t    y = p1.y,\n\t\t    dx = p2.x - x,\n\t\t    dy = p2.y - y,\n\t\t    dot = dx * dx + dy * dy,\n\t\t    t;\n\n\t\tif (dot > 0) {\n\t\t\tt = ((p.x - x) * dx + (p.y - y) * dy) / dot;\n\n\t\t\tif (t > 1) {\n\t\t\t\tx = p2.x;\n\t\t\t\ty = p2.y;\n\t\t\t} else if (t > 0) {\n\t\t\t\tx += dx * t;\n\t\t\t\ty += dy * t;\n\t\t\t}\n\t\t}\n\n\t\tdx = p.x - x;\n\t\tdy = p.y - y;\n\n\t\treturn sqDist ? dx * dx + dy * dy : new L.Point(x, y);\n\t}\n};\n"]}