{"version":3,"file":"VenetianTransition.js","sourceRoot":"","sources":["../../../../../../../../../../../TanhX/online/browser/src/slideshow/transition/VenetianTransition.ts"],"names":[],"mappings":"AAAA,oBAAoB;AACpB,gCAAgC;;;;;;;;;;;;;;;;AAchC,IAAK,eAGJ;AAHD,WAAK,eAAe;IACnB,iEAAU,CAAA;IACV,6DAAQ,CAAA;AACT,CAAC,EAHI,eAAe,KAAf,eAAe,QAGnB;AAED;IAAiC,sCAAkB;IAGlD,4BAAY,oBAA0C;eACrD,kBAAM,oBAAoB,CAAC;IAC5B,CAAC;IAES,mDAAsB,GAAhC;QACC,IAAM,iBAAiB,GAAG,IAAI,CAAC,oBAAoB,CAAC,iBAAiB,CAAC;QAEtE,IAAI,iBAAiB,IAAI,iBAAiB,CAAC,UAAU,EAAE;YACtD,IAAI,CAAC,SAAS,GAAG,eAAe,CAAC,UAAU,CAAC;SAC5C;aAAM;YACN,IAAI,CAAC,SAAS,GAAG,eAAe,CAAC,QAAQ,CAAC;SAC1C;IACF,CAAC;IAES,4CAAe,GAAzB;QACC,IAAM,SAAS,GAAG,GAAG,CAAC;QACtB,IAAM,UAAU,GAAG,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,KAAK,GAAG,SAAS,CAAC;QACpD,IAAM,WAAW,GAAG,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,MAAM,GAAG,SAAS,CAAC;QACtD,IAAM,SAAS,GACd,IAAI,CAAC,SAAS,IAAI,eAAe,CAAC,QAAQ,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,WAAW,CAAC;QAEvE,IAAM,IAAI,GAAW,IAAI,CAAC,SAAS,IAAI,eAAe,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;QAE5E,OAAO,4CAC8B,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,KAAK,gDACnB,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,MAAM,2OAMf,SAAS,0DAET,IAAI,sBAAiB,IAAI,yJAMpE,CAAC;IACH,CAAC;IACF,yBAAC;AAAD,CAAC,AA5CD,CAAiC,kBAAkB,GA4ClD;AAED,SAAS,CAAC,kBAAkB,GAAG,kBAAkB,CAAC","sourcesContent":["// @ts-strict-ignore\n/* -*- js-indent-level: 8 -*- */\n\n/*\n * Copyright the Collabora Online contributors.\n *\n * SPDX-License-Identifier: MPL-2.0\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\ndeclare var SlideShow: any;\n\nenum VenetianSubType {\n\tHORIZONTAL,\n\tVERTICAL,\n}\n\nclass VenetianTransition extends ClippingTransition {\n\tprivate direction: number;\n\n\tconstructor(transitionParameters: TransitionParameters) {\n\t\tsuper(transitionParameters);\n\t}\n\n\tprotected initMaskFunctionParams() {\n\t\tconst transitionSubType = this.transitionFilterInfo.transitionSubtype;\n\n\t\tif (transitionSubType == TransitionSubType.HORIZONTAL) {\n\t\t\tthis.direction = VenetianSubType.HORIZONTAL;\n\t\t} else {\n\t\t\tthis.direction = VenetianSubType.VERTICAL;\n\t\t}\n\t}\n\n\tprotected getMaskFunction(): string {\n\t\tconst numBlinds = 6.0;\n\t\tconst blindWidth = this.gl.canvas.width / numBlinds;\n\t\tconst blindHeight = this.gl.canvas.height / numBlinds;\n\t\tconst blindSize =\n\t\t\tthis.direction == VenetianSubType.VERTICAL ? blindWidth : blindHeight;\n\n\t\tconst comp: string = this.direction == VenetianSubType.VERTICAL ? 'x' : 'y';\n\n\t\treturn `\n                #define CANVAS_WIDTH ${this.gl.canvas.width}\n                #define CANVAS_HEIGHT ${this.gl.canvas.height}\n\n                float getMaskValue(vec2 uv, float time) {\n                    float progress = time;\n\n                    vec2 resolution = vec2(CANVAS_WIDTH, CANVAS_HEIGHT);\n                    float blindSize = float(${blindSize});\n\n                    float position = mod(uv.${comp} * resolution.${comp}, blindSize);\n\n                    float mask = step(position / blindSize, progress);\n\n                    return mask;\n                }\n\t\t`;\n\t}\n}\n\nSlideShow.VenetianTransition = VenetianTransition;\n"]}