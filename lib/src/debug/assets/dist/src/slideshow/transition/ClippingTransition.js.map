{"version":3,"file":"ClippingTransition.js","sourceRoot":"","sources":["../../../../../../../../../../../TanhX/online/browser/src/slideshow/transition/ClippingTransition.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-strict-ignore\n/* -*- js-indent-level: 8 -*- */\n\n/*\n * Copyright the Collabora Online contributors.\n *\n * SPDX-License-Identifier: MPL-2.0\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\ndeclare var SlideShow: any;\n\nclass ClippingTransition extends Transition2d {\n\tprivate forwardParameterSweep: boolean;\n\tprivate invertMask: boolean;\n\tprivate scaleIsotropically: boolean;\n\n\tconstructor(transitionParameters: TransitionParameters) {\n\t\tsuper(transitionParameters);\n\t}\n\tprotected initProgramTemplateParams() {\n\t\tthis.forwardParameterSweep = true;\n\t\tthis.invertMask = false;\n\t\tthis.scaleIsotropically = false;\n\n\t\tconst transitionType = this.transitionFilterInfo.transitionType;\n\t\tconst transitionSubtype = this.transitionFilterInfo.transitionSubtype;\n\t\tconst isDirectionForward = this.transitionFilterInfo.isDirectionForward;\n\t\tconst isModeIn = this.transitionFilterInfo.isModeIn;\n\n\t\tconst transitionInfo =\n\t\t\taTransitionInfoTable[transitionType][transitionSubtype];\n\t\tif (!transitionInfo) {\n\t\t\twindow.app.console.log(\n\t\t\t\t`ClippingTransition: no transition info found for type: ` +\n\t\t\t\t\t`${transitionType} and subtype: ${transitionSubtype}`,\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\t\tthis.scaleIsotropically = transitionInfo.scaleIsotropically;\n\n\t\tif (!isDirectionForward) {\n\t\t\t// At present Rotate180, FlipX, FlipY reverse methods are handled\n\t\t\t// case by case in each mask function transition\n\t\t\tswitch (transitionInfo.reverseMethod) {\n\t\t\t\tdefault:\n\t\t\t\t\twindow.app.console.log(\n\t\t\t\t\t\t`ClippingTransition: unexpected reverse method for type: ` +\n\t\t\t\t\t\t\t`${transitionType} and subtype: ${transitionSubtype}`,\n\t\t\t\t\t);\n\t\t\t\t\treturn;\n\t\t\t\tcase TransitionReverseMethod.Ignore:\n\t\t\t\t\tbreak;\n\t\t\t\tcase TransitionReverseMethod.SubtractAndInvert:\n\t\t\t\t\tthis.forwardParameterSweep = !this.forwardParameterSweep;\n\t\t\t\t\tthis.invertMask = !this.invertMask;\n\t\t\t\t\tbreak;\n\t\t\t\tcase TransitionReverseMethod.Rotate180:\n\t\t\t\t\t// to be handled\n\t\t\t\t\tbreak;\n\t\t\t\tcase TransitionReverseMethod.FlipX:\n\t\t\t\t\t// to be handled\n\t\t\t\t\tbreak;\n\t\t\t\tcase TransitionReverseMethod.FlipY:\n\t\t\t\t\t// to be handled\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!isModeIn) {\n\t\t\tif (transitionInfo.outInvertsSweep)\n\t\t\t\tthis.forwardParameterSweep = !this.forwardParameterSweep;\n\t\t\telse this.invertMask = !this.invertMask;\n\t\t}\n\n\t\tconsole.debug(`ClippingTransition: \n\t\t\ttype: ${transitionType} \n\t\t\tsubtype: ${transitionSubtype} \n\t\t\tdirection forward: ${isDirectionForward}\n\t\t\tmode in: ${isModeIn}\n\t\t\treverse method: ${TransitionReverseMethod[transitionInfo.reverseMethod]}\n\t\t\toutInvertsSweep: ${transitionInfo.outInvertsSweep}\n\t\t\tforwardParameterSweep: ${this.forwardParameterSweep}\n\t\t\tinvertMask: ${this.invertMask}\n\t\t\t`);\n\t\tthis.initMaskFunctionParams();\n\t}\n\n\t// eslint-disable-next-line @typescript-eslint/no-empty-function\n\tprotected initMaskFunctionParams() {}\n\n\tprotected getMaskFunction(): string {\n\t\treturn '';\n\t}\n\n\tpublic getFragmentShader(): string {\n\t\tconst isSlideTransition = !!this.leavingSlide;\n\n\t\tlet scaleFactor = 1.0;\n\t\tlet isLandscape: boolean;\n\t\tif (this.scaleIsotropically) {\n\t\t\tconst ctx = this.transitionParameters.context;\n\t\t\tconst width = ctx.canvas.width;\n\t\t\tconst height = ctx.canvas.height;\n\t\t\tisLandscape = width > height;\n\t\t\tscaleFactor = isLandscape ? height / width : width / height;\n\t\t}\n\t\tconst needScaling = scaleFactor != 1.0;\n\t\tconst comp = isLandscape ? 'y' : 'x';\n\n\t\t// prettier-ignore\n\t\treturn `#version 300 es\n                precision mediump float;\n\n                ${isSlideTransition\n                      ? 'uniform sampler2D leavingSlideTexture;'\n                      : ''}\n                uniform sampler2D enteringSlideTexture;\n                uniform float time;\n                ${!isSlideTransition\n                      ? `\n                          uniform float alpha;\n                          uniform vec4 fromFillColor;\n                          uniform vec4 toFillColor;\n                          uniform vec4 fromLineColor;\n                          uniform vec4 toLineColor;\n                          `\n                      : ''}\n\n                in vec2 v_texCoord;\n                out vec4 outColor;\n\n                ${this.getMaskFunction()}\n\n\t\t            float scaleCompWrtCenter(float c, float s) {\n\t\t                return (c - 0.5) * s + 0.5;\n\t\t            }\n\n                ${!isSlideTransition\n                      ? `\n                          ${GlHelpers.nearestPointOnSegment}\n                          ${GlHelpers.computeColor}\n                          `\n                      : ''}\n\n                void main() {\n                    // reverse direction / mode out ?\n                    float progress = ${\n                        this.forwardParameterSweep\n                            ? 'time'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t: '1.0 - time'\n                    };\n\n\n                    vec2 uv = v_texCoord;\n                    // isotropic scale case ?\n                    ${needScaling ? `uv.${comp} = scaleCompWrtCenter(uv.${comp}, ${scaleFactor})` : ''};\n\n                    float mask = getMaskValue(uv, progress);\n                    // reverse direction / mode out ?\n                    ${this.invertMask ? 'mask = 1.0 - mask;' : ''}\n\n                    vec4 color1 = ${\n                        isSlideTransition\n                          ? 'texture(leavingSlideTexture, v_texCoord)'\n                          : 'vec4(0, 0, 0, 0)'};\n                    vec4 color2 = texture(enteringSlideTexture, v_texCoord);\n                    ${!isSlideTransition\n                          ? `\n                              color2 = computeColor(color2);\n                              color2 *= alpha;\n                              `\n                          : ''}\n\n                    outColor = mix(color1, color2, mask);\n                }\n                `;\n\t}\n}\n\nSlideShow.ClippingTransition = ClippingTransition;\n"]}