{"version":3,"file":"StaticNoiseTransition.js","sourceRoot":"","sources":["../../../../../../../../../../../TanhX/online/browser/src/slideshow/transition3d/StaticNoiseTransition.ts"],"names":[],"mappings":"AAAA,gCAAgC;;;;;;;;;;;;;;;;;;;;;;;;;;;AAchC;IAAuC,4CAAqB;IAC3D,kCAAY,oBAA4C;eACvD,kBAAM,oBAAoB,CAAC;IAC5B,CAAC;IAEM,oDAAiB,GAAxB;QACC,OAAO,s4CAuCJ,CAAC;IACL,CAAC;IACF,+BAAC;AAAD,CAAC,AA/CD,CAAuC,qBAAqB,GA+C3D;AAED,SAAS,qBAAqB,CAAC,oBAA0C;IACxE,IAAM,KAAK,GAAG,IAAI,SAAS,EAAE,CAAC;IAC9B,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC3C,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAE3C,IAAM,kBAAkB,GAAgB,EAAE,CAAC;IAC3C,kBAAkB,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;IAEpD,KAAK,CAAC,UAAU,CAAC,IAAI,CACpB,8BAA8B,CAC7B,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACxB,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACzB,EAAE,EACF,KAAK,EACL,KAAK,EACL,GAAG,EACH,GAAG,CACH,CACD,CAAC;IAEF,IAAM,mBAAmB,GAAgB,EAAE,CAAC;IAC5C,mBAAmB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAEhC,IAAM,WAAW,GAAgB,EAAE,CAAC;IACpC,WAAW,CAAC,IAAI,CACf,8BAA8B,CAC7B,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACxB,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACzB,CAAC,EAAE,EACH,KAAK,EACL,IAAI,EACJ,GAAG,EACH,GAAG,CACH,CACD,CAAC;IAEF,IAAM,uBAAuB,yBACzB,oBAAoB,KACvB,iBAAiB,EAAE,kBAAkB,EACrC,kBAAkB,EAAE,mBAAmB,EACvC,aAAa,EAAE,WAAW,GAC1B,CAAC;IAEF,OAAO,IAAI,wBAAwB,CAAC,uBAAuB,CAAC,CAAC;AAC9D,CAAC;AAED,SAAS,CAAC,qBAAqB,GAAG,qBAAqB,CAAC","sourcesContent":["/* -*- js-indent-level: 8 -*- */\n\n/*\n * Copyright the Collabora Online contributors.\n *\n * SPDX-License-Identifier: MPL-2.0\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\ndeclare var SlideShow: any;\n\nclass StaticNoiseTransitionImp extends PermTextureTransition {\n\tconstructor(transitionParameters: TransitionParameters3D) {\n\t\tsuper(transitionParameters);\n\t}\n\n\tpublic getFragmentShader(): string {\n\t\treturn `#version 300 es\n\t\t\t\tprecision mediump float;\n\n\t\t\t\tuniform sampler2D leavingSlideTexture;\n\t\t\t\tuniform sampler2D enteringSlideTexture;\n\t\t\t\tuniform sampler2D permTexture;\n\t\t\t\tuniform float time;\n\n\t\t\t\tin vec2 v_texturePosition;\n\t\t\t\tin vec3 v_normal;\n\t\t\t\tout vec4 outColor;\n\n\t\t\t\tfloat snoise(vec2 P) {\n\t\t\t\t\treturn texture(permTexture, P).r;\n\t\t\t\t}\n\n\t\t\t\t#define PART 0.5\n\t\t\t\t#define START 0.4\n\t\t\t\t#define END 0.9\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tfloat sn = snoise(10.0 * v_texturePosition + time * 0.07);\n\t\t\t\t\t\n\t\t\t\t\tif (time < PART) {\n\t\t\t\t\t\tfloat sn1 = snoise(vec2(time * 15.0, 20.0 * v_texturePosition.y));\n\t\t\t\t\t\tfloat sn2 = snoise(v_texturePosition);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (sn1 > 1.0 - time * time && sn2 < 2.0 * time + 0.1)\n\t\t\t\t\t\t\toutColor = vec4(sn, sn, sn, 1.0);\n\t\t\t\t\t\telse if (time > START)\n\t\t\t\t\t\t\toutColor = mix(texture(leavingSlideTexture, v_texturePosition), vec4(sn, sn, sn, 1.0), (time - START) / (PART - START));\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\toutColor = texture(leavingSlideTexture, v_texturePosition);\n\t\t\t\t\t} else if (time > END) {\n\t\t\t\t\t\toutColor = mix(vec4(sn, sn, sn, 1.0), texture(enteringSlideTexture, v_texturePosition), (time - END) / (1.0 - END));\n\t\t\t\t\t} else {\n\t\t\t\t\t\toutColor = vec4(sn, sn, sn, 1.0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t`;\n\t}\n}\n\nfunction StaticNoiseTransition(transitionParameters: TransitionParameters) {\n\tconst slide = new Primitive();\n\tslide.pushTriangle([0, 0], [1, 0], [0, 1]);\n\tslide.pushTriangle([1, 0], [0, 1], [1, 1]);\n\n\tconst aLeavingPrimitives: Primitive[] = [];\n\taLeavingPrimitives.push(Primitive.cloneDeep(slide));\n\n\tslide.operations.push(\n\t\tmakeRotateAndScaleDepthByWidth(\n\t\t\tvec3.fromValues(0, 1, 0),\n\t\t\tvec3.fromValues(0, 0, -1),\n\t\t\t90,\n\t\t\tfalse,\n\t\t\tfalse,\n\t\t\t0.0,\n\t\t\t1.0,\n\t\t),\n\t);\n\n\tconst aEnteringPrimitives: Primitive[] = [];\n\taEnteringPrimitives.push(slide);\n\n\tconst aOperations: Operation[] = [];\n\taOperations.push(\n\t\tmakeRotateAndScaleDepthByWidth(\n\t\t\tvec3.fromValues(0, 1, 0),\n\t\t\tvec3.fromValues(0, 0, -1),\n\t\t\t-90,\n\t\t\tfalse,\n\t\t\ttrue,\n\t\t\t0.0,\n\t\t\t1.0,\n\t\t),\n\t);\n\n\tconst newTransitionParameters: TransitionParameters3D = {\n\t\t...transitionParameters,\n\t\tleavingPrimitives: aLeavingPrimitives,\n\t\tenteringPrimitives: aEnteringPrimitives,\n\t\tallOperations: aOperations,\n\t};\n\n\treturn new StaticNoiseTransitionImp(newTransitionParameters);\n}\n\nSlideShow.StaticNoiseTransition = StaticNoiseTransition;\n"]}