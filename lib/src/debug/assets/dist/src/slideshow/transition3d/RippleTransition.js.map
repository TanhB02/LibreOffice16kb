{"version":3,"file":"RippleTransition.js","sourceRoot":"","sources":["../../../../../../../../../../../TanhX/online/browser/src/slideshow/transition3d/RippleTransition.ts"],"names":[],"mappings":"AAAA,gCAAgC;;;;;;;;;;;;;;;;;;;;;;;;;;;AAchC;IAAkC,uCAAqB;IACtD,6BAAY,oBAA4C;eACvD,kBAAM,oBAAoB,CAAC;IAC5B,CAAC;IAEM,+CAAiB,GAAxB;QACC,IAAM,aAAa,GAAG,IAAI,CAAC,EAAE,CAAC,kBAAkB,CAAC,IAAI,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;QACzE,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,aAAa,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;QAE9C,IAAM,WAAW,GAAG,IAAI,CAAC,EAAE,CAAC,kBAAkB,CAAC,IAAI,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;QAC3E,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;IACrC,CAAC;IAEM,+CAAiB,GAAxB;QACC,OAAO,ilDA2CR,CAAC;IACD,CAAC;IACF,0BAAC;AAAD,CAAC,AA3DD,CAAkC,qBAAqB,GA2DtD;AAED,SAAS,gBAAgB,CAAC,oBAA0C;IACnE,IAAM,KAAK,GAAG,IAAI,SAAS,EAAE,CAAC;IAE9B,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC3C,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAE3C,IAAM,kBAAkB,GAAgB,EAAE,CAAC;IAC3C,kBAAkB,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;IAEpD,IAAM,mBAAmB,GAAgB,CAAC,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;IAEtE,IAAM,uBAAuB,yBACzB,oBAAoB,KACvB,iBAAiB,EAAE,kBAAkB,EACrC,kBAAkB,EAAE,mBAAmB,EACvC,aAAa,EAAE,EAAE,GACjB,CAAC;IAEF,OAAO,IAAI,mBAAmB,CAAC,uBAAuB,CAAC,CAAC;AACzD,CAAC;AAED,SAAS,CAAC,gBAAgB,GAAG,gBAAgB,CAAC","sourcesContent":["/* -*- js-indent-level: 8 -*- */\n\n/*\n * Copyright the Collabora Online contributors.\n *\n * SPDX-License-Identifier: MPL-2.0\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\ndeclare var SlideShow: any;\n\nclass RippleTransitionImp extends PermTextureTransition {\n\tconstructor(transitionParameters: TransitionParameters3D) {\n\t\tsuper(transitionParameters);\n\t}\n\n\tpublic displayPermSlide_(): void {\n\t\tconst centerUniform = this.gl.getUniformLocation(this.program, 'center');\n\t\tthis.gl.uniform2fv(centerUniform, [0.5, 0.5]);\n\n\t\tconst slideRation = this.gl.getUniformLocation(this.program, 'slideRatio');\n\t\tthis.gl.uniform1f(slideRation, 1.0);\n\t}\n\n\tpublic getFragmentShader(): string {\n\t\treturn `#version 300 es\n                precision mediump float;\n\n                #define M_PI 3.1415926535897932384626433832795\n\n\n                uniform sampler2D leavingSlideTexture;\n                uniform sampler2D enteringSlideTexture;\n                uniform float time;\n                uniform vec2 center;\n                uniform float slideRatio;\n\n                in vec2 v_texturePosition;\n                in vec3 v_normal;\n                out vec4 outColor;\n\n                float betterDistance(vec2 p1, vec2 p2)\n                {\n                    p1.x *= slideRatio;\n                    p2.x *= slideRatio;\n                    return distance(p1, p2);\n                }\n\n                void main() {\n                    const float w = 0.7;\n                    const float v = 0.1;\n\n                    float dist = betterDistance(center, v_texturePosition);\n\n                    float t = time * (sqrt(2.0) * (slideRatio < 1.0 ? 1.0 / slideRatio : slideRatio));\n\n                    float mixed = smoothstep(t*w-v, t*w+v, dist);\n\n                    vec2 offset = (v_texturePosition - center) * (sin(dist * 64.0 - time * 16.0) + 0.5) / 32.0;\n                    vec2 wavyTexCoord = mix(v_texturePosition + offset, v_texturePosition, time);\n\n                    vec2 pos = mix(wavyTexCoord, v_texturePosition, mixed);\n\n                    vec4 leaving = texture(leavingSlideTexture, pos);\n                    vec4 entering = texture(enteringSlideTexture, pos);\n                    outColor = mix(entering, leaving, mixed);\n                    \n                }\n`;\n\t}\n}\n\nfunction RippleTransition(transitionParameters: TransitionParameters) {\n\tconst slide = new Primitive();\n\n\tslide.pushTriangle([0, 0], [1, 0], [0, 1]);\n\tslide.pushTriangle([1, 0], [0, 1], [1, 1]);\n\n\tconst aLeavingPrimitives: Primitive[] = [];\n\taLeavingPrimitives.push(Primitive.cloneDeep(slide));\n\n\tconst aEnteringPrimitives: Primitive[] = [Primitive.cloneDeep(slide)];\n\n\tconst newTransitionParameters: TransitionParameters3D = {\n\t\t...transitionParameters,\n\t\tleavingPrimitives: aLeavingPrimitives,\n\t\tenteringPrimitives: aEnteringPrimitives,\n\t\tallOperations: [],\n\t};\n\n\treturn new RippleTransitionImp(newTransitionParameters);\n}\n\nSlideShow.RippleTransition = RippleTransition;\n"]}