{"version":3,"file":"ElapsedTime.js","sourceRoot":"","sources":["../../../../../../../../../../../TanhX/online/browser/src/slideshow/engine/ElapsedTime.ts"],"names":[],"mappings":"AAAA,oBAAoB;AACpB,0BAA0B;AAC1B;;;;;;;;GAQG;AAEH;IAQC,qBAAY,SAAuB;QAP3B,cAAS,GAAgB,IAAI,CAAC;QAQrC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,KAAK,EAAE,CAAC;IACd,CAAC;IAED,iCAAW,GAAX;QACC,OAAO,IAAI,CAAC,SAAS,CAAC;IACvB,CAAC;IAED,2BAAK,GAAL;QACC,IAAI,CAAC,gBAAgB,GAAG,GAAG,CAAC;QAC5B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;QACxC,IAAI,CAAC,WAAW,GAAG,GAAG,CAAC;QACvB,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;QAC1B,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;IAC1B,CAAC;IAED,oCAAc,GAAd;QACC,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAClD,OAAO,IAAI,CAAC,gBAAgB,CAAC;IAC9B,CAAC;IAED,gCAAU,GAAV;QACC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC7C,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;IAC1B,CAAC;IAED,mCAAa,GAAb;QACC,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;QAE1B,2CAA2C;QAC3C,gDAAgD;QAChD,wDAAwD;QACxD,IAAM,cAAc,GAAG,IAAI,CAAC,kBAAkB,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC;QAEpE,iEAAiE;QACjE,2CAA2C;QAC3C,IAAI,CAAC,UAAU,IAAI,cAAc,CAAC;IACnC,CAAC;IAED,iCAAW,GAAX,UAAY,OAAe;QAC1B,uEAAuE;QACvE,IAAI,CAAC,UAAU,IAAI,OAAO,CAAC;QAE3B,gEAAgE;QAChE,sCAAsC;QACtC,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,YAAY;YAAE,IAAI,CAAC,WAAW,IAAI,OAAO,CAAC;IACxE,CAAC;IAED,+BAAS,GAAT;QACC,6DAA6D;QAC7D,sDAAsD;QACtD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC7C,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;IACzB,CAAC;IAED,kCAAY,GAAZ;QACC,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;IAC1B,CAAC;IAED,mCAAa,GAAb;QACC,OAAO,oBAAoB,EAAE,GAAG,MAAM,CAAC;IACxC,CAAC;IAED,oCAAc,GAAd;QACC,IAAI,YAAY,CAAC;QACjB,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACpB,YAAY,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;SACpC;aAAM;YACN,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,kBAAkB,EAAE,CAAC;SACnD;QAED,MAAM,CACL,OAAO,YAAY,KAAK,OAAO,CAAC,IAAI,QAAQ,CAAC,YAAY,CAAC,EAC1D,gEAAgE;YAC/D,YAAY,CACb,CAAC;QAEF,OAAO,YAAY,CAAC;IACrB,CAAC;IAED,wCAAkB,GAAlB;QACC,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,YAAY,EAAE;YAC1C,OAAO,IAAI,CAAC,WAAW,CAAC;SACxB;QAED,IAAM,QAAQ,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;QACvC,OAAO,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC;IACnC,CAAC;IACF,kBAAC;AAAD,CAAC,AAjGD,IAiGC","sourcesContent":["// @ts-strict-ignore\n/* -*- tab-width: 4 -*- */\n/*\n * Copyright the Collabora Online contributors.\n *\n * SPDX-License-Identifier: MPL-2.0\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\nclass ElapsedTime {\n\tprivate aTimeBase: ElapsedTime = null;\n\tprivate nLastQueriedTime: number;\n\tprivate nStartTime: number;\n\tprivate nFrozenTime: number;\n\tprivate bInPauseMode: boolean;\n\tprivate bInHoldMode: boolean;\n\n\tconstructor(aTimeBase?: ElapsedTime) {\n\t\tthis.aTimeBase = aTimeBase;\n\t\tthis.reset();\n\t}\n\n\tgetTimeBase() {\n\t\treturn this.aTimeBase;\n\t}\n\n\treset() {\n\t\tthis.nLastQueriedTime = 0.0;\n\t\tthis.nStartTime = this.getCurrentTime();\n\t\tthis.nFrozenTime = 0.0;\n\t\tthis.bInPauseMode = false;\n\t\tthis.bInHoldMode = false;\n\t}\n\n\tgetElapsedTime() {\n\t\tthis.nLastQueriedTime = this.getElapsedTimeImpl();\n\t\treturn this.nLastQueriedTime;\n\t}\n\n\tpauseTimer() {\n\t\tthis.nFrozenTime = this.getElapsedTimeImpl();\n\t\tthis.bInPauseMode = true;\n\t}\n\n\tcontinueTimer() {\n\t\tthis.bInPauseMode = false;\n\n\t\t// stop pausing, time runs again. Note that\n\t\t// getElapsedTimeImpl() honors hold mode, i.e. a\n\t\t// continueTimer() in hold mode will preserve the latter\n\t\tconst nPauseDuration = this.getElapsedTimeImpl() - this.nFrozenTime;\n\n\t\t// adjust start time, such that subsequent getElapsedTime() calls\n\t\t// will virtually start from m_fFrozenTime.\n\t\tthis.nStartTime += nPauseDuration;\n\t}\n\n\tadjustTimer(nOffset: number) {\n\t\t// to make getElapsedTime() become _larger_, have to reduce nStartTime.\n\t\tthis.nStartTime -= nOffset;\n\n\t\t// also adjust frozen time, this method must _always_ affect the\n\t\t// value returned by getElapsedTime()!\n\t\tif (this.bInHoldMode || this.bInPauseMode) this.nFrozenTime += nOffset;\n\t}\n\n\tholdTimer() {\n\t\t// when called during hold mode (e.g. more than once per time\n\t\t// object), the original hold time will be maintained.\n\t\tthis.nFrozenTime = this.getElapsedTimeImpl();\n\t\tthis.bInHoldMode = true;\n\t}\n\n\treleaseTimer() {\n\t\tthis.bInHoldMode = false;\n\t}\n\n\tgetSystemTime(): number {\n\t\treturn getCurrentSystemTime() / 1000.0;\n\t}\n\n\tgetCurrentTime(): number {\n\t\tlet nCurrentTime;\n\t\tif (!this.aTimeBase) {\n\t\t\tnCurrentTime = this.getSystemTime();\n\t\t} else {\n\t\t\tnCurrentTime = this.aTimeBase.getElapsedTimeImpl();\n\t\t}\n\n\t\tassert(\n\t\t\ttypeof nCurrentTime === typeof 0 && isFinite(nCurrentTime),\n\t\t\t'ElapsedTime.getCurrentTime: assertion failed: nCurrentTime == ' +\n\t\t\t\tnCurrentTime,\n\t\t);\n\n\t\treturn nCurrentTime;\n\t}\n\n\tgetElapsedTimeImpl(): number {\n\t\tif (this.bInHoldMode || this.bInPauseMode) {\n\t\t\treturn this.nFrozenTime;\n\t\t}\n\n\t\tconst nCurTime = this.getCurrentTime();\n\t\treturn nCurTime - this.nStartTime;\n\t}\n}\n"]}