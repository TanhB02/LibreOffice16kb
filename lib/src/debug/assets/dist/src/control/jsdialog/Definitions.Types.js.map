{"version":3,"file":"Definitions.Types.js","sourceRoot":"","sources":["../../../../../../../../../../../TanhX/online/browser/src/control/jsdialog/Definitions.Types.ts"],"names":[],"mappings":"AAAA,gCAAgC;AAChC;;;;;;;;GAQG","sourcesContent":["/* -*- js-indent-level: 8 -*- */\n/*\n * Copyright the Collabora Online contributors.\n *\n * SPDX-License-Identifier: MPL-2.0\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\n/*\n * Definitions.Types - types and interfaces for JSDialog\n */\n\n// common for all widgets\ninterface WidgetJSON {\n\tid: string; // unique id of a widget\n\ttype: string; // type of widget\n\tenabled?: boolean; // enabled state\n\tvisible?: boolean; // visibility state\n\tchildren: Array<WidgetJSON>; // child nodes\n\ttitle?: string;\n\ttop?: string; // placement in the grid - row\n\tleft?: string; // placement in the grid - column\n\twidth?: string; // inside grid - width in number of columns\n\tlabelledBy?: string;\n}\n\ninterface JSBuilderOptions {\n\tcssClass: string; // class added to every widget root\n\twindowId: number; // window id to be sent with dialogevent\n\tmap: any; // reference to map\n\tmobileWizard: any; // reference to the parent container\tFIXME: rename\n\tuseSetTabs: boolean; // custom tabs placement handled by the parent container\n\n\t// modifiers\n\tnoLabelsForUnoButtons: boolean; // create only icon without label\n\tuseInLineLabelsForUnoButtons: boolean; // create labels next to the icon\n}\n\ninterface JSBuilder {\n\t_currentDepth: number; // mobile-wizard only FIXME: encapsulate\n\t_controlHandlers: any; // handlers for widget types\n\n\toptions: JSBuilderOptions; // current state\n\tmap: any; // reference to map\n\trendersCache: any; // on demand content cache\n\n\tbuild: (\n\t\tparentContainer: Element,\n\t\tdata: WidgetJSON[],\n\t\thasVerticalParent: boolean,\n\t) => boolean;\n\tupdateWidget: (parentContainer: Element, updateJSON: any) => void;\n\texecuteAction: (parentContainer: Element, actionJSON: any) => void;\n\tcallback: JSDialogCallback;\n\tpostProcess: (parentContainer: Element, data: WidgetJSON) => void;\n\n\t// helpers FIXME: put as local in Control.Containers.ts\n\t_getGridColumns: (data: WidgetJSON[]) => number;\n\t_getGridRows: (data: WidgetJSON[]) => number;\n\t_preventDocumentLosingFocusOnClick: (container: Element) => void;\n\t_cleanText: (text: string) => string;\n\t_expanderHandler: any; // FIXME: use handlers getter instead\n}\n\ninterface DialogResponse {\n\tid: string;\n\tresponse: number;\n}\n\ninterface DialogJSON extends WidgetJSON {\n\tdialogid: string; // unique id for a dialog type, not instance\n\tresponses?: Array<DialogResponse>;\n}\n\n// JSDialog message (full, update or action)\ninterface JSDialogJSON extends DialogJSON {\n\tid: string; // unique windowId\n\tjsontype: string; // specifies target component, on root level only\n\taction?: string; // optional name of an action\n\tcontrol?: WidgetJSON;\n}\n\n// JSDialog message for popup\ninterface PopupData extends JSDialogJSON {\n\tisAutoCompletePopup?: boolean;\n\tisAutoFillPreviewTooltip?: boolean;\n\tcancellable?: boolean;\n\thasClose: boolean;\n\tnoOverlay: boolean;\n\tpopupParent?: string;\n\tclickToClose?: string;\n\tpersistKeyboard?: boolean;\n\tposx: number;\n\tposy: number;\n}\n\n// callback triggered by user actions\ntype JSDialogCallback = (\n\tobjectType: string,\n\teventType: string,\n\tobject: any,\n\tdata: any,\n\tbuilder: JSBuilder,\n) => void;\n\n// used to define menus\ntype MenuDefinition = {\n\tid: string; // unique identifier\n\ttype?: 'action' | 'menu' | 'separator' | 'html'; // type of entry\n\ttext: string; // displayed text\n\thint: string; // hint text\n\tuno: string; // uno command\n\taction: string; // dispatch command\n\thtmlId: string; // id of HTMLContent\n\timg: string; // icon name\n\ticon: string; // icon name FIXME: duplicated property, used in exportMenuButton\n\tchecked: boolean; // state of check mark\n\titems: Array<any>; // submenu\n};\n\ninterface ContainerWidgetJSON extends WidgetJSON {\n\tlayoutstyle?: string | 'start' | 'end'; // describes alignment of the elements\n\tvertical?: boolean; // is horizontal or vertical container\n}\n\ninterface GridWidgetJSON extends ContainerWidgetJSON {\n\tcols: number; // number of grid columns\n\trows: number; // numer of grid rows\n}\n\ninterface ToolboxWidgetJSON extends WidgetJSON {\n\thasVerticalParent: boolean;\n}\n\ninterface PanelWidgetJSON extends WidgetJSON {\n\thidden: boolean; // is hidden\n\tcommand: string; // command to trigger options for a panel\n\ttext: string; // panel title\n\tname?: string; // legacy panel id\n}\n\ntype ExpanderWidgetJSON = any;\n\n// type: 'fixedtext'\ninterface TextWidget extends WidgetJSON {\n\ttext: string;\n\tlabelFor?: string;\n}\n\n// type: 'pushbutton'\ninterface PushButtonWidget extends WidgetJSON {\n\tsymbol?: string;\n\ttext?: string;\n}\n\n// type: 'buttonbox'\ninterface ButtonBoxWidget extends WidgetJSON {\n\tlayoutstyle: string;\n}\n\n// type: 'listbox'\ninterface ListBoxWidget extends WidgetJSON {\n\tentries: Array<string>;\n}\n\ninterface TreeColumnJSON {\n\ttext?: any;\n\tlink?: string;\n\tcollapsed?: string | boolean;\n\texpanded?: string | boolean;\n\tcollapsedimage?: string;\n\texpandedimage?: string;\n\teditable?: boolean;\n}\n\ninterface TreeEntryJSON {\n\trow: number | string; // unique id of the entry\n\ttext: string; // deprecated: simple text for an entry\n\tstate: boolean; // checked radio/checkbox or not\n\tenabled: boolean; // enabled entry or not\n\tselected: boolean; // is entry selected\n\tcollapsed: boolean; // is entry collapsed\n\tondemand: boolean; // has content to request\n\tcolumns: Array<TreeColumnJSON>; // entry data\n\tchildren: Array<TreeEntryJSON>;\n}\n\ninterface TreeHeaderJSON {\n\ttext: string;\n\tsortable: boolean; // can be sorted by column\n}\n\ninterface TreeWidgetJSON extends WidgetJSON {\n\ttext: string;\n\tsingleclickactivate: boolean; // activates element on single click instead of just selection\n\tfireKeyEvents?: boolean; // do we sent key events to core\n\thideIfEmpty?: boolean; // hide the widget if no entries available\n\tcheckboxtype: string; // radio or checkbox\n\tdraggable?: boolean; // indicates if we can drag entries to another treeview\n\tentries: Array<TreeEntryJSON>;\n\theaders: Array<TreeHeaderJSON>; // header columns\n}\n\ninterface IconViewEntry {\n\trow: number | string; // unique id of the entry\n\tseparator: boolean; // is separator\n\tselected: boolean; // is currently selected\n\timage: string; // base64 encoded image\n\ttext: string; // label of an entry\n\ttooltip: string; // tooltip of an entry\n\tondemand: boolean; // if true then we ignore image property and request it on demand (when shown)\n}\n\ninterface IconViewJSON extends WidgetJSON {\n\tentries: Array<IconViewEntry>;\n\tsingleclickactivate: boolean; // activates element on single click instead of just selection\n\ttextWithIconEnabled: boolean; // To identify if we should add text below the icon or not.\n}\n\ninterface EditWidgetJSON extends WidgetJSON {\n\tplaceholder: string; // show when empty\n\ttext: string; // text value\n\tpassword: boolean; // is password field\n\thidden: boolean; // is hidden, TODO: duplicate?\n\tchangedCallback: any; // callback  for 'change' event\n}\n"]}