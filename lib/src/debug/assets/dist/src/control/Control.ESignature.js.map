{"version":3,"file":"Control.ESignature.js","sourceRoot":"","sources":["../../../../../../../../../../TanhX/online/browser/src/control/Control.ESignature.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright the Collabora Online contributors.\n *\n * SPDX-License-Identifier: MPL-2.0\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\nnamespace cool {\n\texport interface SignatureResponse {\n\t\tsignatureTime: number;\n\t\tdigest: string;\n\t}\n\n\texport interface CommandValuesResponse {\n\t\tcommandName: string;\n\t\tcommandValues: SignatureResponse;\n\t}\n\n\texport interface CommandResultResponse {\n\t\tcommandName: string;\n\t\tsuccess: boolean;\n\t\t// Depends on the value of commandName\n\t\tresult: HashSendResponse | ReceiveSignatureResponse;\n\t}\n\n\t// Describes one provider\n\texport interface MethodConfig {\n\t\t// Name of the provider\n\t\taction_type: string;\n\t\tsupported_countries: Array<string>;\n\t}\n\n\texport interface HashSendResponse {\n\t\tdoc_id: string;\n\t\tavailable_methods: Array<string>;\n\t\tmethod_configs: Array<MethodConfig>;\n\t\tmessage: string;\n\t}\n\n\texport interface SignedResponse {\n\t\ttype: string;\n\t\terror: string;\n\t}\n\n\texport interface ReceiveSignatureResponse {\n\t\tstatus: string;\n\t\tsigned_file_contents: string;\n\t}\n\n\t/**\n\t * Provides electronic signing with document hashes for PDF files.\n\t */\n\texport class ESignature {\n\t\t// Base url, e.g. https://id.eideasy.com or https://test.eideasy.com\n\t\turl: string;\n\t\t// This is a partial API token, see\n\t\t// <https://docs.eideasy.com/guide/api-credentials.html>\n\t\tclientId: string;\n\n\t\t// Timestamp of the hash extraction\n\t\tsignatureTime: number = 0;\n\n\t\t// Identifier of the document on the eIDEasy side\n\t\tdocId: string = '';\n\n\t\t// The popup window we opened.\n\t\tpopup: Window | null = null;\n\n\t\tshowSignaturesOnNextUpdate = false;\n\n\t\t// Tracks when the signature popup is open.\n\t\tsignInProgress = false;\n\n\t\t// Provider ID to name map.\n\t\tstatic providerNames: { [name: string]: string } = {\n\t\t\t// The /api/client-config API would provide this, but having the data here\n\t\t\t// saves us from fetching the same data every time for every user.\n\t\t\t'id-signature': 'Estonian ID card',\n\t\t\t'mid-signature': 'Estonian Mobile-ID',\n\t\t\t'lt-mid-signature': 'Lithuanian Mobile-ID',\n\t\t\t'smart-id-signature': 'Smart-ID',\n\t\t\t'be-id-signature': 'Belgian ID card',\n\t\t\t'lt-id-signature': 'Lithuanian ID card',\n\t\t\t'lv-id-signature': 'Latvian ID card',\n\t\t\t'lv-eparaksts-mobile-signature': 'Latvian eParaksts Mobile',\n\t\t\t'fi-id-signature': 'Finnish ID card',\n\t\t\t'at-handy-signatur-signature': 'Austrian Handy-Signatur',\n\t\t\t'evrotrust-signature': 'Evrotrust',\n\t\t\t'd-trust-sign-me-qes-signature': 'D-Trust sign-me',\n\t\t\t'certeurope-usb-token-signature': 'CertEurope USB token',\n\t\t\t'certsign-usb-token-signature': 'certSIGN USB token',\n\t\t\t'zealid-signature': 'ZealID app',\n\t\t\t'audkenni-qes-signature': 'Audkenni',\n\t\t\t'simply-sign-qes-signature': 'SimplySign',\n\t\t\t'halcom-qes-signature': 'Halcom',\n\t\t\t'hr-id-signature': 'Croatian ID Card',\n\t\t\t'uanataca-qes-signature': 'Uanataca',\n\t\t\t'itsme-qes-signature': 'Itsme',\n\t\t\t'harica-qes-signature': 'Harica',\n\t\t\t'lt-id-qes-signature': 'LT ID',\n\t\t\t'trust-asia-signature': 'TrustAsia',\n\t\t\t'buypass-qes-signature': 'Buypass',\n\t\t\t'cert-store-qes-signature': 'Local Certificate',\n\t\t\t'fi-ftn-intesi-adv-signature':\n\t\t\t\t'Finnish Trust Network / Luottamusverkosto',\n\t\t\t'cz-id-signature': 'Czech ID Card',\n\t\t\t'es-lleida-advanced-signature': 'Lleida',\n\t\t\t'serpro-id-advanced-signature': 'SerproID',\n\t\t};\n\n\t\t// Country code to name map\n\t\tstatic countryNames: { [name: string]: string } | null = null;\n\n\t\tconstructor(url: string, clientId: string) {\n\t\t\tthis.url = url;\n\t\t\tthis.clientId = clientId;\n\n\t\t\tapp.map.on('commandvalues', this.onCommandValues.bind(this));\n\t\t\tapp.map.on('commandresult', this.onCommandResult.bind(this));\n\n\t\t\tif (!ESignature.countryNames) {\n\t\t\t\tESignature.countryNames = {\n\t\t\t\t\t// Generated by scripts/countries.py\n\t\t\t\t\tAD: _('Andorra'),\n\t\t\t\t\tAE: _('United Arab Emirates'),\n\t\t\t\t\tAL: _('Albania'),\n\t\t\t\t\tAM: _('Armenia'),\n\t\t\t\t\tAR: _('Argentina'),\n\t\t\t\t\tAT: _('Austria'),\n\t\t\t\t\tAU: _('Australia'),\n\t\t\t\t\tAX: _('Åland Islands'),\n\t\t\t\t\tAZ: _('Azerbaijan'),\n\t\t\t\t\tBA: _('Bosnia and Herzegovina'),\n\t\t\t\t\tBE: _('Belgium'),\n\t\t\t\t\tBG: _('Bulgaria'),\n\t\t\t\t\tBR: _('Brazil'),\n\t\t\t\t\tBY: _('Belarus'),\n\t\t\t\t\tCA: _('Canada'),\n\t\t\t\t\tCH: _('Switzerland'),\n\t\t\t\t\tCL: _('Chile'),\n\t\t\t\t\tCN: _('China'),\n\t\t\t\t\tCY: _('Cyprus'),\n\t\t\t\t\tCZ: _('Czech Republic'),\n\t\t\t\t\tDE: _('Germany'),\n\t\t\t\t\tDK: _('Denmark'),\n\t\t\t\t\tEE: _('Estonia'),\n\t\t\t\t\tES: _('Spain'),\n\t\t\t\t\tFI: _('Finland'),\n\t\t\t\t\tFR: _('France'),\n\t\t\t\t\tGB: _('United Kingdom'),\n\t\t\t\t\tGE: _('Georgia'),\n\t\t\t\t\tGG: _('Guernsey'),\n\t\t\t\t\tGR: _('Greece'),\n\t\t\t\t\tHR: _('Croatia'),\n\t\t\t\t\tHU: _('Hungary'),\n\t\t\t\t\tID: _('Indonesia'),\n\t\t\t\t\tIE: _('Ireland'),\n\t\t\t\t\tIL: _('Israel'),\n\t\t\t\t\tIN: _('India'),\n\t\t\t\t\tIS: _('Iceland'),\n\t\t\t\t\tIT: _('Italy'),\n\t\t\t\t\tJP: _('Japan'),\n\t\t\t\t\tKE: _('Kenya'),\n\t\t\t\t\tKR: _('South Korea'),\n\t\t\t\t\tKZ: _('Kazakhstan'),\n\t\t\t\t\tLI: _('Liechtenstein'),\n\t\t\t\t\tLT: _('Lithuania'),\n\t\t\t\t\tLU: _('Luxembourg'),\n\t\t\t\t\tLV: _('Latvia'),\n\t\t\t\t\tMC: _('Monaco'),\n\t\t\t\t\tMD: _('Moldova, Republic of'),\n\t\t\t\t\tME: _('Montenegro'),\n\t\t\t\t\tMK: _('North Macedonia, Republic of'),\n\t\t\t\t\tMT: _('Malta'),\n\t\t\t\t\tMX: _('Mexico'),\n\t\t\t\t\tNL: _('Netherlands'),\n\t\t\t\t\tNO: _('Norway'),\n\t\t\t\t\tNZ: _('New Zealand'),\n\t\t\t\t\tPH: _('Philippines'),\n\t\t\t\t\tPL: _('Poland'),\n\t\t\t\t\tPT: _('Portugal'),\n\t\t\t\t\tQA: _('Qatar'),\n\t\t\t\t\tRO: _('Romania'),\n\t\t\t\t\tRS: _('Serbia'),\n\t\t\t\t\tRU: _('Russian Federation'),\n\t\t\t\t\tSA: _('Saudi Arabia'),\n\t\t\t\t\tSE: _('Sweden'),\n\t\t\t\t\tSG: _('Singapore'),\n\t\t\t\t\tSI: _('Slovenia'),\n\t\t\t\t\tSK: _('Slovakia'),\n\t\t\t\t\tSM: _('San Marino'),\n\t\t\t\t\tTR: _('Turkey'),\n\t\t\t\t\tTW: _('Taiwan, Province of China'),\n\t\t\t\t\tUA: _('Ukraine'),\n\t\t\t\t\tUS: _('United States of America'),\n\t\t\t\t\tVA: _('Holy See (Vatican City State)'),\n\t\t\t\t\tXK: _('Kosovo'),\n\t\t\t\t\tZA: _('South Africa'),\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tinsert(): void {\n\t\t\t// Step 1: extract the document hash.\n\t\t\tapp.socket.sendMessage('commandvalues command=.uno:Signature');\n\t\t}\n\n\t\t// Handles the result of dispatched UNO commands\n\t\tonCommandResult(event: CommandResultResponse): void {\n\t\t\tif (event.commandName == '.uno:PrepareSignature') {\n\t\t\t\tconst response = <HashSendResponse>event.result;\n\t\t\t\tthis.handleSendHashResponse(event.success, response);\n\t\t\t} else if (event.commandName == '.uno:DownloadSignature') {\n\t\t\t\tconst response = <ReceiveSignatureResponse>event.result;\n\t\t\t\tthis.handleReceiveSignatureResponse(response);\n\t\t\t}\n\t\t}\n\n\t\t// Handles the command values response for .uno:Signature\n\t\tonCommandValues(event: CommandValuesResponse): void {\n\t\t\tif (event.commandName != '.uno:Signature') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst signatureResponse = event.commandValues;\n\n\t\t\t// Save this, we'll need it for the serialize step.\n\t\t\tthis.signatureTime = signatureResponse.signatureTime;\n\n\t\t\tconst digest = signatureResponse.digest;\n\n\t\t\t// Step 2: send the hash, get a document ID.\n\t\t\tconst redirectUrl = window.makeHttpUrl('/cool/signature');\n\t\t\tconst documentName = <HTMLInputElement>(\n\t\t\t\tdocument.querySelector('#document-name-input')\n\t\t\t);\n\t\t\tconst fileName = documentName.value;\n\t\t\tconst body = {\n\t\t\t\tclient_id: this.clientId,\n\t\t\t\t// Create a PKCS#7 binary signature\n\t\t\t\tcontainer_type: 'cades',\n\t\t\t\tfiles: [\n\t\t\t\t\t{\n\t\t\t\t\t\t// Actual file name appears during 2FA\n\t\t\t\t\t\tfileName: fileName,\n\t\t\t\t\t\tmimeType: 'application/pdf',\n\t\t\t\t\t\tfileContent: digest,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\t// Learn about possible providers\n\t\t\t\treturn_available_methods: true,\n\t\t\t\t// Learn about which provider is available in which country\n\t\t\t\treturn_method_configs: true,\n\t\t\t\tsignature_redirect: redirectUrl,\n\t\t\t\t// Automatic file download will not happen after signing\n\t\t\t\tnodownload: true,\n\t\t\t};\n\t\t\tconst args = {\n\t\t\t\tbody: body,\n\t\t\t};\n\t\t\tapp.map.sendUnoCommand('.uno:PrepareSignature', args);\n\t\t}\n\n\t\t// Handles the 'send hash' response JSON\n\t\thandleSendHashResponse(ok: boolean, response: HashSendResponse): void {\n\t\t\tif (!ok) {\n\t\t\t\tapp.console.log(\n\t\t\t\t\t'/api/signatures/prepare-files-for-signing failed: ' +\n\t\t\t\t\t\tresponse.message,\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.docId = response.doc_id;\n\t\t\tconst availableProviderIDs = response.available_methods;\n\t\t\tconst availableProviderConfigs = response.method_configs;\n\t\t\tconst countries = this.createCountryList(availableProviderConfigs);\n\t\t\tconst providers = this.createProviders(\n\t\t\t\tavailableProviderIDs,\n\t\t\t\tavailableProviderConfigs,\n\t\t\t);\n\t\t\tconst dialog = JSDialog.eSignatureDialog(countries, providers);\n\t\t\t// Providers can be in-context or redirect-based.  Most real-world providers\n\t\t\t// are redirect-based, set the only tested non-in-context provider as\n\t\t\t// preferred.\n\t\t\tconst defaultProviderId = window.prefs.get(\n\t\t\t\t'eSignatureDefaultProviderId',\n\t\t\t\t'd-trust-sign-me-qes-signature',\n\t\t\t);\n\t\t\tdialog.setDefaultProviderId(defaultProviderId);\n\t\t\t// Set the country for the default provider as preferred.\n\t\t\tconst defaultCountryCode = window.prefs.get(\n\t\t\t\t'eSignatureDefaultCountryCode',\n\t\t\t\t'DE',\n\t\t\t);\n\t\t\tdialog.setDefaultCountryCode(defaultCountryCode);\n\t\t\tdialog.open();\n\t\t}\n\n\t\t// Handles the selected provider from the dialog\n\t\thandleSelectedProvider(countryCode: string, providerId: string): void {\n\t\t\tapp.console.log(\n\t\t\t\t'attempting to esign using the \"' + providerId + '\" provider',\n\t\t\t);\n\t\t\twindow.prefs.set('eSignatureDefaultCountryCode', countryCode);\n\t\t\twindow.prefs.set('eSignatureDefaultProviderId', providerId);\n\n\t\t\tlet url = this.url + '/single-method-signature';\n\t\t\turl += '?client_id=' + this.clientId;\n\t\t\turl += '&doc_id=' + this.docId;\n\t\t\turl += '&method=' + providerId;\n\t\t\turl += '&country=' + countryCode;\n\n\t\t\tconst lang = window.coolParams.get('lang');\n\t\t\tif (lang) {\n\t\t\t\t// Two letter ISO 639-1 language code is wanted, but it seems to\n\t\t\t\t// accept our xx-YY version.\n\t\t\t\turl += '&lang=' + lang;\n\t\t\t}\n\n\t\t\tlet features = 'popup';\n\t\t\tfeatures += ', left=' + window.screen.width / 4;\n\t\t\tfeatures += ', top=' + window.screen.height / 4;\n\t\t\tfeatures += ', width=' + window.screen.width / 2;\n\t\t\tfeatures += ', height=' + window.screen.height / 2;\n\n\t\t\t// Step 3: sign the hash.\n\t\t\tthis.signInProgress = true;\n\t\t\tthis.popup = window.open(url, '_blank', features);\n\n\t\t\tconst message = _(\n\t\t\t\t'The document is being signed and will be availably shortly',\n\t\t\t);\n\t\t\tapp.map.fire('showbusy', { label: message });\n\n\t\t\t// If our window would be closed before the popup, then close the popup as\n\t\t\t// well.\n\t\t\twindow.addEventListener('beforeunload', this.closePopup.bind(this));\n\t\t}\n\n\t\tclosePopup(): boolean {\n\t\t\ttry {\n\t\t\t\twindow.removeEventListener('beforeunload', this.closePopup.bind(this));\n\n\t\t\t\tif (this.popup) {\n\t\t\t\t\tthis.popup.close();\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tapp.console.log('failed to close the signing popup: ' + error);\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\t// Handles the 'sign hash' response\n\t\thandleSigned(response: SignedResponse): void {\n\t\t\tapp.map.fire('hidebusy');\n\n\t\t\tif (response.type != 'SUCCESS') {\n\t\t\t\tapp.console.log('failed to sign: ' + response.error);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!this.closePopup()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.signInProgress = false;\n\n\t\t\t// Step 4: fetch the signature.\n\t\t\tconst body = {\n\t\t\t\tclient_id: this.clientId,\n\t\t\t\tdoc_id: this.docId,\n\t\t\t};\n\t\t\tconst args = {\n\t\t\t\tbody: body,\n\t\t\t};\n\t\t\tapp.map.sendUnoCommand('.uno:DownloadSignature', args, /*force=*/ true);\n\t\t}\n\n\t\t// Handles the 'receive signature' response JSON\n\t\thandleReceiveSignatureResponse(response: ReceiveSignatureResponse): void {\n\t\t\tif (response.status != 'OK') {\n\t\t\t\tapp.console.log(\n\t\t\t\t\t'received signature status is not OK: ' + response.status,\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Step 5: serialize the signature.\n\t\t\tthis.showSignaturesOnNextUpdate = true;\n\t\t\tconst args = {\n\t\t\t\tSignatureTime: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tvalue: String(this.signatureTime),\n\t\t\t\t},\n\t\t\t\tSignatureValue: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tvalue: response.signed_file_contents,\n\t\t\t\t},\n\t\t\t};\n\t\t\tapp.map.sendUnoCommand('.uno:Signature', args, /*force=*/ true);\n\t\t}\n\n\t\t// Turns a list of provider IDs into a list of signature providers\n\t\tcreateProviders(\n\t\t\tproviderIds: Array<string>,\n\t\t\tproviderConfigs: Array<MethodConfig>,\n\t\t): Array<cool.SignatureProvider> {\n\t\t\treturn providerIds.map((id) => {\n\t\t\t\tlet providerName = ESignature.providerNames[id];\n\t\t\t\tif (!providerName) {\n\t\t\t\t\tapp.console.log(\n\t\t\t\t\t\t'failed to find a human-readable name for provider \"' + id + '\"',\n\t\t\t\t\t);\n\t\t\t\t\tproviderName = id;\n\t\t\t\t}\n\t\t\t\tconst providerConfig = providerConfigs.find((i) => i.action_type == id);\n\t\t\t\tlet countryCodes: Array<string> = [];\n\t\t\t\tif (providerConfig) {\n\t\t\t\t\tcountryCodes = providerConfig.supported_countries;\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\taction_type: id,\n\t\t\t\t\tname: providerName,\n\t\t\t\t\tcountryCodes: countryCodes,\n\t\t\t\t};\n\t\t\t});\n\t\t}\n\n\t\tcreateCountryList(\n\t\t\tavailableProviderConfigs: Array<MethodConfig>,\n\t\t): Array<cool.Country> {\n\t\t\tlet codes = new Array<string>();\n\t\t\tfor (const config of availableProviderConfigs) {\n\t\t\t\tfor (const code of config.supported_countries) {\n\t\t\t\t\tcodes.push(code);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcodes = [...new Set(codes)];\n\n\t\t\treturn codes.map((code) => {\n\t\t\t\tconst countryName = ESignature.countryNames\n\t\t\t\t\t? ESignature.countryNames[code]\n\t\t\t\t\t: null;\n\t\t\t\tif (countryName) {\n\t\t\t\t\treturn { code: code, name: countryName };\n\t\t\t\t}\n\t\t\t\tapp.console.log(\n\t\t\t\t\t'failed to find a human-readable name for country \"' + code + '\"',\n\t\t\t\t);\n\t\t\t\treturn { code: code, name: code };\n\t\t\t});\n\t\t}\n\t}\n}\n\nL.Control.ESignature = cool.ESignature;\n\nL.control.eSignature = function (url: string, clientId: string) {\n\treturn new L.Control.ESignature(url, clientId);\n};\n"]}