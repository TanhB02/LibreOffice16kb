{"version":3,"file":"Control.FormulaAutoCompletePopup.js","sourceRoot":"","sources":["../../../../../../../../../../TanhX/online/browser/src/control/Control.FormulaAutoCompletePopup.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-strict-ignore\n/* -*- js-indent-level: 8 -*- */\n/*\n * Copyright the Collabora Online contributors.\n *\n * SPDX-License-Identifier: MPL-2.0\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n/*\n * Control.FormulaAutoCompletePopup\n */\n\n/* global app */\n\nclass FormulaAutoCompletePopup extends L.Control.AutoCompletePopup {\n\tfunctionList: Array<any>;\n\n\tconstructor(map: ReturnType<typeof L.map>) {\n\t\tsuper('formulaautocompletePopup', map);\n\t}\n\n\tonAdd() {\n\t\tthis.newPopupData.isAutoCompletePopup = true;\n\t\tthis.map.on(\n\t\t\t'openformulaautocompletepopup',\n\t\t\tthis.openFormulaAutoCompletePopup,\n\t\t\tthis,\n\t\t);\n\t\tthis.map.on('sendformulatext', this.sendFormulaText, this);\n\t\tthis.functionList = null;\n\t}\n\n\topenFormulaAutoCompletePopup(ev: FireEvent) {\n\t\tthis.map.fire('closepopup');\n\t\tthis.openPopup({ data: ev });\n\t}\n\n\tsendFormulaText(ev: FireEvent) {\n\t\tthis.openFormulaAutoCompletePopup(ev);\n\t}\n\n\tgetPopupEntries(ev: FireEvent): any[] {\n\t\tconst entries: any[] = [];\n\t\tthis.functionList = ev.data.data;\n\t\tif (this.functionList.length !== 0) {\n\t\t\tfor (var i in this.functionList) {\n\t\t\t\tvar entry = {\n\t\t\t\t\ttext: this.functionList[i].name,\n\t\t\t\t\tcolumns: [\n\t\t\t\t\t\t{ text: this.functionList[i].name },\n\t\t\t\t\t\t{ text: '\\n' + this.functionList[i].description },\n\t\t\t\t\t],\n\t\t\t\t\trow: i.toString(),\n\t\t\t\t};\n\t\t\t\tentries.push(entry);\n\t\t\t}\n\t\t}\n\t\treturn entries;\n\t}\n\n\tgetAutocompleteText(\n\t\tcurrentCellFormula: string,\n\t\tfunctionName: string,\n\t\tendIndex: number,\n\t): string {\n\t\t// Step-1: Find indexes of all the '(', ';', '-', '+', '*', '/'\n\t\tconst openBracketIndex: number[] = [];\n\t\tconst semicolonIndex: number[] = [];\n\t\tconst plusIndex: number[] = [];\n\t\tconst multiplyIndex: number[] = [];\n\t\tconst divideIndex: number[] = [];\n\t\tconst minusIndex: number[] = [];\n\t\tconst equalIndex: number = 0;\n\n\t\tfor (let i = 0; i < currentCellFormula.length; i++) {\n\t\t\tconst char = currentCellFormula.charAt(i);\n\t\t\tif (char === '(') openBracketIndex.push(i);\n\t\t\telse if (char === ';') semicolonIndex.push(i);\n\t\t\telse if (char === '+') plusIndex.push(i);\n\t\t\telse if (char === '*') multiplyIndex.push(i);\n\t\t\telse if (char === '/') divideIndex.push(i);\n\t\t\telse if (char === '-') minusIndex.push(i);\n\t\t}\n\n\t\t// Step-2: Find smallest difference between endIndex and indexes of all the '(', ';'\n\t\t// that will give us the startIndex\n\t\tlet minDiff: number = Number.MAX_VALUE;\n\t\tlet startIndex: number;\n\n\t\tconst updateMinDiff = (index: number) => {\n\t\t\tconst tmp = endIndex - index;\n\t\t\tif (tmp >= 0 && tmp < minDiff) {\n\t\t\t\tminDiff = tmp;\n\t\t\t\tstartIndex = index + 1;\n\t\t\t}\n\t\t};\n\n\t\tupdateMinDiff(equalIndex);\n\t\topenBracketIndex.forEach(updateMinDiff);\n\t\tsemicolonIndex.forEach(updateMinDiff);\n\t\tplusIndex.forEach(updateMinDiff);\n\t\tminusIndex.forEach(updateMinDiff);\n\t\tmultiplyIndex.forEach(updateMinDiff);\n\t\tdivideIndex.forEach(updateMinDiff);\n\n\t\t// Step-3: extract the text we want to complete using startIndex and endIndex\n\t\tconst partialText: string = currentCellFormula\n\t\t\t.substring(startIndex, endIndex + 1)\n\t\t\t.trim();\n\n\t\t// Step-4: compare partialText and functionName to find remaining text need to autocomplete\n\t\tlet autoCompleteFunctionName: string = '';\n\t\tfor (\n\t\t\tlet i = 0;\n\t\t\ti < Math.max(partialText.length, functionName.length);\n\t\t\ti++\n\t\t) {\n\t\t\tif (\n\t\t\t\tpartialText.charAt(i).toLowerCase() !=\n\t\t\t\tfunctionName.charAt(i).toLowerCase()\n\t\t\t) {\n\t\t\t\tautoCompleteFunctionName = functionName.substring(i);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn autoCompleteFunctionName;\n\t}\n\n\tcallback(objectType: any, eventType: any, object: any, index: number) {\n\t\tif (eventType === 'close') {\n\t\t\tthis.closePopup();\n\t\t} else if (eventType === 'select' || eventType === 'activate') {\n\t\t\tconst namedRange: string = this.functionList[index].namedRange;\n\t\t\tconst currentText: string = this.map._docLayer._lastFormula;\n\t\t\tconst addedCharacterIndex: number =\n\t\t\t\tthis.map._docLayer._newFormulaDiffIndex;\n\n\t\t\tconst functionName: string = this.getAutocompleteText(\n\t\t\t\tcurrentText,\n\t\t\t\tthis.functionList[index].name,\n\t\t\t\taddedCharacterIndex,\n\t\t\t);\n\n\t\t\tif (namedRange) this.map._textInput._sendText(functionName);\n\t\t\telse this.map._textInput._sendText(functionName + '(');\n\t\t\tthis.closePopup();\n\t\t} else if (eventType === 'keydown') {\n\t\t\tif (object.key !== 'Tab' && object.key !== 'Shift') {\n\t\t\t\tthis.map.focus();\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\n\nL.control.formulaautocomplete = function (map: any) {\n\treturn new FormulaAutoCompletePopup(map);\n};\n"]}